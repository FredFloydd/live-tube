/**
 * Generated by orval v7.1.1 üç∫
 * Do not edit manually.
 * Transport for London Unified API
 * OpenAPI spec version: v1
 */
import { z as zod } from 'zod';

/**
 * @summary Gets all accident details for accidents occuring in the specified year
 */
export const accidentStatsGetParams = zod.object({
	year: zod.number()
});

export const accidentStatsGetResponseItem = zod.object({
	id: zod.number().optional(),
	lat: zod.number().optional(),
	lon: zod.number().optional(),
	location: zod.string().optional(),
	date: zod.string().datetime().optional(),
	severity: zod.string().optional(),
	borough: zod.string().optional(),
	casualties: zod
		.array(
			zod.object({
				age: zod.number().optional(),
				class: zod.string().optional(),
				severity: zod.string().optional(),
				mode: zod.string().optional(),
				ageBand: zod.string().optional()
			})
		)
		.optional(),
	vehicles: zod
		.array(
			zod.object({
				type: zod.string().optional()
			})
		)
		.optional()
});
export const accidentStatsGetResponse = zod.array(accidentStatsGetResponseItem);

/**
 * @summary Gets air quality data feed
 */
export const airQualityGetResponse = zod.object({});

/**
 * @summary Gets all bike point locations. The Place object has an addtionalProperties array which contains the nbBikes, nbDocks and nbSpaces
            numbers which give the status of the BikePoint. A mismatch in these numbers i.e. nbDocks - (nbBikes + nbSpaces) != 0 indicates broken docks.
 */
export const bikePointGetAllResponseItem = zod.object({
	id: zod.string().optional(),
	url: zod.string().optional(),
	commonName: zod.string().optional(),
	distance: zod.number().optional(),
	placeType: zod.string().optional(),
	additionalProperties: zod
		.array(
			zod.object({
				category: zod.string().optional(),
				key: zod.string().optional(),
				sourceSystemKey: zod.string().optional(),
				value: zod.string().optional(),
				modified: zod.string().datetime().optional()
			})
		)
		.optional(),
	children: zod.array(zod.any()).optional(),
	childrenUrls: zod.array(zod.string()).optional(),
	lat: zod.number().optional(),
	lon: zod.number().optional()
});
export const bikePointGetAllResponse = zod.array(bikePointGetAllResponseItem);

/**
 * @summary Gets the bike point with the given id.
 */
export const bikePointGetParams = zod.object({
	id: zod.string()
});

export const bikePointGetResponse = zod.object({
	id: zod.string().optional(),
	url: zod.string().optional(),
	commonName: zod.string().optional(),
	distance: zod.number().optional(),
	placeType: zod.string().optional(),
	additionalProperties: zod
		.array(
			zod.object({
				category: zod.string().optional(),
				key: zod.string().optional(),
				sourceSystemKey: zod.string().optional(),
				value: zod.string().optional(),
				modified: zod.string().datetime().optional()
			})
		)
		.optional(),
	children: zod.array(zod.any()).optional(),
	childrenUrls: zod.array(zod.string()).optional(),
	lat: zod.number().optional(),
	lon: zod.number().optional()
});

/**
 * @summary Search for bike stations by their name, a bike point's name often contains information about the name of the street
            or nearby landmarks, for example. Note that the search result does not contain the PlaceProperties i.e. the status
            or occupancy of the BikePoint, to get that information you should retrieve the BikePoint by its id on /BikePoint/id.
 */
export const bikePointSearchQueryParams = zod.object({
	query: zod.string()
});

export const bikePointSearchResponseItem = zod.object({
	id: zod.string().optional(),
	url: zod.string().optional(),
	commonName: zod.string().optional(),
	distance: zod.number().optional(),
	placeType: zod.string().optional(),
	additionalProperties: zod
		.array(
			zod.object({
				category: zod.string().optional(),
				key: zod.string().optional(),
				sourceSystemKey: zod.string().optional(),
				value: zod.string().optional(),
				modified: zod.string().datetime().optional()
			})
		)
		.optional(),
	children: zod.array(zod.any()).optional(),
	childrenUrls: zod.array(zod.string()).optional(),
	lat: zod.number().optional(),
	lon: zod.number().optional()
});
export const bikePointSearchResponse = zod.array(bikePointSearchResponseItem);

/**
 * @summary Gets taxis and minicabs contact information
 */
export const cabwiseGetQueryParams = zod.object({
	lat: zod.number(),
	lon: zod.number(),
	optype: zod.string().optional(),
	wc: zod.string().optional(),
	radius: zod.number().optional(),
	name: zod.string().optional(),
	maxResults: zod.number().optional(),
	legacyFormat: zod.boolean().optional(),
	forceXml: zod.boolean().optional(),
	twentyFourSevenOnly: zod.boolean().optional()
});

export const cabwiseGetResponse = zod.object({});

/**
 * @summary Gets a list of all of the available journey planner modes
 */
export const journeyMetaResponseItem = zod.object({
	isTflService: zod.boolean().optional(),
	isFarePaying: zod.boolean().optional(),
	isScheduledService: zod.boolean().optional(),
	modeName: zod.string().optional(),
	motType: zod.string().optional(),
	network: zod.string().optional()
});
export const journeyMetaResponse = zod.array(journeyMetaResponseItem);

/**
 * @summary Perform a Journey Planner search from the parameters specified in simple types
 */
export const journeyJourneyResultsParams = zod.object({
	from: zod.string(),
	to: zod.string()
});

export const journeyJourneyResultsQueryParams = zod.object({
	via: zod.string().optional(),
	nationalSearch: zod.boolean().optional(),
	date: zod.string().optional(),
	time: zod.string().optional(),
	timeIs: zod.enum(['Arriving', 'Departing']).optional(),
	journeyPreference: zod.enum(['LeastInterchange', 'LeastTime', 'LeastWalking']).optional(),
	mode: zod.array(zod.string()).optional(),
	accessibilityPreference: zod
		.array(
			zod.enum([
				'NoRequirements',
				'NoSolidStairs',
				'NoEscalators',
				'NoElevators',
				'StepFreeToVehicle',
				'StepFreeToPlatform'
			])
		)
		.optional(),
	fromName: zod.string().optional(),
	toName: zod.string().optional(),
	viaName: zod.string().optional(),
	maxTransferMinutes: zod.string().optional(),
	maxWalkingMinutes: zod.string().optional(),
	walkingSpeed: zod.enum(['Slow', 'Average', 'Fast']).optional(),
	cyclePreference: zod
		.enum(['None', 'LeaveAtStation', 'TakeOnTransport', 'AllTheWay', 'CycleHire'])
		.optional(),
	adjustment: zod.string().optional(),
	bikeProficiency: zod.array(zod.enum(['Easy', 'Moderate', 'Fast'])).optional(),
	alternativeCycle: zod.boolean().optional(),
	alternativeWalking: zod.boolean().optional(),
	applyHtmlMarkup: zod.boolean().optional(),
	useMultiModalCall: zod.boolean().optional(),
	walkingOptimization: zod.boolean().optional(),
	taxiOnlyTrip: zod.boolean().optional(),
	routeBetweenEntrances: zod.boolean().optional(),
	useRealTimeLiveArrivals: zod.boolean().optional(),
	calcOneDirection: zod.boolean().optional(),
	includeAlternativeRoutes: zod.boolean().optional(),
	overrideMultiModalScenario: zod.number().optional(),
	combineTransferLegs: zod.boolean().optional()
});

export const journeyJourneyResultsResponse = zod.object({
	journeys: zod
		.array(
			zod.object({
				startDateTime: zod.string().datetime().optional(),
				duration: zod.number().optional(),
				arrivalDateTime: zod.string().datetime().optional(),
				description: zod.string().optional(),
				alternativeRoute: zod.boolean().optional(),
				legs: zod
					.array(
						zod.object({
							duration: zod.number().optional(),
							speed: zod.string().optional(),
							instruction: zod
								.object({
									summary: zod.string().optional(),
									detailed: zod.string().optional(),
									steps: zod
										.array(
											zod.object({
												description: zod.string().optional(),
												turnDirection: zod.string().optional(),
												streetName: zod.string().optional(),
												distance: zod.number().optional(),
												cumulativeDistance: zod.number().optional(),
												skyDirection: zod.number().optional(),
												skyDirectionDescription: zod
													.enum([
														'North',
														'NorthEast',
														'East',
														'SouthEast',
														'South',
														'SouthWest',
														'West',
														'NorthWest'
													])
													.optional(),
												cumulativeTravelTime: zod.number().optional(),
												latitude: zod.number().optional(),
												longitude: zod.number().optional(),
												pathAttribute: zod
													.object({
														name: zod.string().optional(),
														value: zod.string().optional()
													})
													.optional(),
												descriptionHeading: zod.string().optional(),
												trackType: zod
													.enum([
														'CycleSuperHighway',
														'CanalTowpath',
														'QuietRoad',
														'ProvisionForCyclists',
														'BusyRoads',
														'None',
														'PushBike',
														'Quietway'
													])
													.optional()
											})
										)
										.optional()
								})
								.optional(),
							obstacles: zod
								.array(
									zod.object({
										type: zod.string().optional(),
										incline: zod.string().optional(),
										stopId: zod.number().optional(),
										position: zod.string().optional()
									})
								)
								.optional(),
							departureTime: zod.string().datetime().optional(),
							arrivalTime: zod.string().datetime().optional(),
							departurePoint: zod
								.object({
									lat: zod.number().optional(),
									lon: zod.number().optional()
								})
								.optional(),
							arrivalPoint: zod
								.object({
									lat: zod.number().optional(),
									lon: zod.number().optional()
								})
								.optional(),
							path: zod
								.object({
									lineString: zod.string().optional(),
									stopPoints: zod
										.array(
											zod.object({
												id: zod.string().optional(),
												name: zod.string().optional(),
												uri: zod.string().optional(),
												fullName: zod.string().optional(),
												type: zod.string().optional(),
												crowding: zod
													.object({
														passengerFlows: zod
															.array(
																zod.object({
																	timeSlice: zod.string().optional(),
																	value: zod.number().optional()
																})
															)
															.optional(),
														trainLoadings: zod
															.array(
																zod.object({
																	line: zod.string().optional(),
																	lineDirection: zod.string().optional(),
																	platformDirection: zod.string().optional(),
																	direction: zod.string().optional(),
																	naptanTo: zod.string().optional(),
																	timeSlice: zod.string().optional(),
																	value: zod.number().optional()
																})
															)
															.optional()
													})
													.optional(),
												routeType: zod
													.enum([
														'Unknown',
														'All',
														'Cycle Superhighways',
														'Quietways',
														'Cycleways',
														'Mini-Hollands',
														'Central London Grid',
														'Streetspace Route'
													])
													.optional(),
												status: zod
													.enum([
														'Unknown',
														'All',
														'Open',
														'In Progress',
														'Planned',
														'Planned - Subject to feasibility and consultation.',
														'Not Open'
													])
													.optional(),
												motType: zod.string().optional(),
												network: zod.string().optional()
											})
										)
										.optional(),
									elevation: zod
										.array(
											zod.object({
												distance: zod.number().optional(),
												startLat: zod.number().optional(),
												startLon: zod.number().optional(),
												endLat: zod.number().optional(),
												endLon: zod.number().optional(),
												heightFromPreviousPoint: zod.number().optional(),
												gradient: zod.number().optional()
											})
										)
										.optional()
								})
								.optional(),
							routeOptions: zod
								.array(
									zod.object({
										id: zod.string().optional(),
										name: zod.string().optional(),
										directions: zod.array(zod.string()).optional(),
										lineIdentifier: zod
											.object({
												id: zod.string().optional(),
												name: zod.string().optional(),
												uri: zod.string().optional(),
												fullName: zod.string().optional(),
												type: zod.string().optional(),
												crowding: zod
													.object({
														passengerFlows: zod
															.array(
																zod.object({
																	timeSlice: zod.string().optional(),
																	value: zod.number().optional()
																})
															)
															.optional(),
														trainLoadings: zod
															.array(
																zod.object({
																	line: zod.string().optional(),
																	lineDirection: zod.string().optional(),
																	platformDirection: zod.string().optional(),
																	direction: zod.string().optional(),
																	naptanTo: zod.string().optional(),
																	timeSlice: zod.string().optional(),
																	value: zod.number().optional()
																})
															)
															.optional()
													})
													.optional(),
												routeType: zod
													.enum([
														'Unknown',
														'All',
														'Cycle Superhighways',
														'Quietways',
														'Cycleways',
														'Mini-Hollands',
														'Central London Grid',
														'Streetspace Route'
													])
													.optional(),
												status: zod
													.enum([
														'Unknown',
														'All',
														'Open',
														'In Progress',
														'Planned',
														'Planned - Subject to feasibility and consultation.',
														'Not Open'
													])
													.optional(),
												motType: zod.string().optional(),
												network: zod.string().optional()
											})
											.optional(),
										direction: zod.string().optional()
									})
								)
								.optional(),
							mode: zod
								.object({
									id: zod.string().optional(),
									name: zod.string().optional(),
									uri: zod.string().optional(),
									fullName: zod.string().optional(),
									type: zod.string().optional(),
									crowding: zod
										.object({
											passengerFlows: zod
												.array(
													zod.object({
														timeSlice: zod.string().optional(),
														value: zod.number().optional()
													})
												)
												.optional(),
											trainLoadings: zod
												.array(
													zod.object({
														line: zod.string().optional(),
														lineDirection: zod.string().optional(),
														platformDirection: zod.string().optional(),
														direction: zod.string().optional(),
														naptanTo: zod.string().optional(),
														timeSlice: zod.string().optional(),
														value: zod.number().optional()
													})
												)
												.optional()
										})
										.optional(),
									routeType: zod
										.enum([
											'Unknown',
											'All',
											'Cycle Superhighways',
											'Quietways',
											'Cycleways',
											'Mini-Hollands',
											'Central London Grid',
											'Streetspace Route'
										])
										.optional(),
									status: zod
										.enum([
											'Unknown',
											'All',
											'Open',
											'In Progress',
											'Planned',
											'Planned - Subject to feasibility and consultation.',
											'Not Open'
										])
										.optional(),
									motType: zod.string().optional(),
									network: zod.string().optional()
								})
								.optional(),
							disruptions: zod
								.array(
									zod.object({
										category: zod
											.enum([
												'Undefined',
												'RealTime',
												'PlannedWork',
												'Information',
												'Event',
												'Crowding',
												'StatusAlert'
											])
											.optional(),
										type: zod.string().optional(),
										categoryDescription: zod.string().optional(),
										description: zod.string().optional(),
										summary: zod.string().optional(),
										additionalInfo: zod.string().optional(),
										created: zod.string().datetime().optional(),
										lastUpdate: zod.string().datetime().optional(),
										affectedRoutes: zod
											.array(
												zod.object({
													id: zod.string().optional(),
													lineId: zod.string().optional(),
													routeCode: zod.string().optional(),
													name: zod.string().optional(),
													lineString: zod.string().optional(),
													direction: zod.string().optional(),
													originationName: zod.string().optional(),
													destinationName: zod.string().optional(),
													via: zod
														.object({
															ordinal: zod.number().optional(),
															stopPoint: zod
																.object({
																	naptanId: zod.string().optional(),
																	platformName: zod.string().optional(),
																	indicator: zod.string().optional(),
																	stopLetter: zod.string().optional(),
																	modes: zod.array(zod.string()).optional(),
																	icsCode: zod.string().optional(),
																	smsCode: zod.string().optional(),
																	stopType: zod.string().optional(),
																	stationNaptan: zod.string().optional(),
																	accessibilitySummary: zod.string().optional(),
																	hubNaptanCode: zod.string().optional(),
																	lines: zod
																		.array(
																			zod.object({
																				id: zod.string().optional(),
																				name: zod.string().optional(),
																				uri: zod.string().optional(),
																				fullName: zod.string().optional(),
																				type: zod.string().optional(),
																				crowding: zod
																					.object({
																						passengerFlows: zod
																							.array(
																								zod.object({
																									timeSlice: zod.string().optional(),
																									value: zod.number().optional()
																								})
																							)
																							.optional(),
																						trainLoadings: zod
																							.array(
																								zod.object({
																									line: zod.string().optional(),
																									lineDirection: zod.string().optional(),
																									platformDirection: zod.string().optional(),
																									direction: zod.string().optional(),
																									naptanTo: zod.string().optional(),
																									timeSlice: zod.string().optional(),
																									value: zod.number().optional()
																								})
																							)
																							.optional()
																					})
																					.optional(),
																				routeType: zod
																					.enum([
																						'Unknown',
																						'All',
																						'Cycle Superhighways',
																						'Quietways',
																						'Cycleways',
																						'Mini-Hollands',
																						'Central London Grid',
																						'Streetspace Route'
																					])
																					.optional(),
																				status: zod
																					.enum([
																						'Unknown',
																						'All',
																						'Open',
																						'In Progress',
																						'Planned',
																						'Planned - Subject to feasibility and consultation.',
																						'Not Open'
																					])
																					.optional(),
																				motType: zod.string().optional(),
																				network: zod.string().optional()
																			})
																		)
																		.optional(),
																	lineGroup: zod
																		.array(
																			zod.object({
																				naptanIdReference: zod.string().optional(),
																				stationAtcoCode: zod.string().optional(),
																				lineIdentifier: zod.array(zod.string()).optional()
																			})
																		)
																		.optional(),
																	lineModeGroups: zod
																		.array(
																			zod.object({
																				modeName: zod.string().optional(),
																				lineIdentifier: zod.array(zod.string()).optional()
																			})
																		)
																		.optional(),
																	fullName: zod.string().optional(),
																	naptanMode: zod.string().optional(),
																	status: zod.boolean().optional(),
																	individualStopId: zod.string().optional(),
																	id: zod.string().optional(),
																	url: zod.string().optional(),
																	commonName: zod.string().optional(),
																	distance: zod.number().optional(),
																	placeType: zod.string().optional(),
																	additionalProperties: zod
																		.array(
																			zod.object({
																				category: zod.string().optional(),
																				key: zod.string().optional(),
																				sourceSystemKey: zod.string().optional(),
																				value: zod.string().optional(),
																				modified: zod.string().datetime().optional()
																			})
																		)
																		.optional(),
																	children: zod
																		.array(
																			zod.object({
																				id: zod.string().optional(),
																				url: zod.string().optional(),
																				commonName: zod.string().optional(),
																				distance: zod.number().optional(),
																				placeType: zod.string().optional(),
																				additionalProperties: zod
																					.array(
																						zod.object({
																							category: zod.string().optional(),
																							key: zod.string().optional(),
																							sourceSystemKey: zod.string().optional(),
																							value: zod.string().optional(),
																							modified: zod.string().datetime().optional()
																						})
																					)
																					.optional(),
																				children: zod.array(zod.any()).optional(),
																				childrenUrls: zod.array(zod.string()).optional(),
																				lat: zod.number().optional(),
																				lon: zod.number().optional()
																			})
																		)
																		.optional(),
																	childrenUrls: zod.array(zod.string()).optional(),
																	lat: zod.number().optional(),
																	lon: zod.number().optional()
																})
																.optional()
														})
														.optional(),
													isEntireRouteSection: zod.boolean().optional(),
													validTo: zod.string().datetime().optional(),
													validFrom: zod.string().datetime().optional(),
													routeSectionNaptanEntrySequence: zod
														.array(
															zod.object({
																ordinal: zod.number().optional(),
																stopPoint: zod
																	.object({
																		naptanId: zod.string().optional(),
																		platformName: zod.string().optional(),
																		indicator: zod.string().optional(),
																		stopLetter: zod.string().optional(),
																		modes: zod.array(zod.string()).optional(),
																		icsCode: zod.string().optional(),
																		smsCode: zod.string().optional(),
																		stopType: zod.string().optional(),
																		stationNaptan: zod.string().optional(),
																		accessibilitySummary: zod.string().optional(),
																		hubNaptanCode: zod.string().optional(),
																		lines: zod
																			.array(
																				zod.object({
																					id: zod.string().optional(),
																					name: zod.string().optional(),
																					uri: zod.string().optional(),
																					fullName: zod.string().optional(),
																					type: zod.string().optional(),
																					crowding: zod
																						.object({
																							passengerFlows: zod
																								.array(
																									zod.object({
																										timeSlice: zod.string().optional(),
																										value: zod.number().optional()
																									})
																								)
																								.optional(),
																							trainLoadings: zod
																								.array(
																									zod.object({
																										line: zod.string().optional(),
																										lineDirection: zod.string().optional(),
																										platformDirection: zod.string().optional(),
																										direction: zod.string().optional(),
																										naptanTo: zod.string().optional(),
																										timeSlice: zod.string().optional(),
																										value: zod.number().optional()
																									})
																								)
																								.optional()
																						})
																						.optional(),
																					routeType: zod
																						.enum([
																							'Unknown',
																							'All',
																							'Cycle Superhighways',
																							'Quietways',
																							'Cycleways',
																							'Mini-Hollands',
																							'Central London Grid',
																							'Streetspace Route'
																						])
																						.optional(),
																					status: zod
																						.enum([
																							'Unknown',
																							'All',
																							'Open',
																							'In Progress',
																							'Planned',
																							'Planned - Subject to feasibility and consultation.',
																							'Not Open'
																						])
																						.optional(),
																					motType: zod.string().optional(),
																					network: zod.string().optional()
																				})
																			)
																			.optional(),
																		lineGroup: zod
																			.array(
																				zod.object({
																					naptanIdReference: zod.string().optional(),
																					stationAtcoCode: zod.string().optional(),
																					lineIdentifier: zod.array(zod.string()).optional()
																				})
																			)
																			.optional(),
																		lineModeGroups: zod
																			.array(
																				zod.object({
																					modeName: zod.string().optional(),
																					lineIdentifier: zod.array(zod.string()).optional()
																				})
																			)
																			.optional(),
																		fullName: zod.string().optional(),
																		naptanMode: zod.string().optional(),
																		status: zod.boolean().optional(),
																		individualStopId: zod.string().optional(),
																		id: zod.string().optional(),
																		url: zod.string().optional(),
																		commonName: zod.string().optional(),
																		distance: zod.number().optional(),
																		placeType: zod.string().optional(),
																		additionalProperties: zod
																			.array(
																				zod.object({
																					category: zod.string().optional(),
																					key: zod.string().optional(),
																					sourceSystemKey: zod.string().optional(),
																					value: zod.string().optional(),
																					modified: zod.string().datetime().optional()
																				})
																			)
																			.optional(),
																		children: zod
																			.array(
																				zod.object({
																					id: zod.string().optional(),
																					url: zod.string().optional(),
																					commonName: zod.string().optional(),
																					distance: zod.number().optional(),
																					placeType: zod.string().optional(),
																					additionalProperties: zod
																						.array(
																							zod.object({
																								category: zod.string().optional(),
																								key: zod.string().optional(),
																								sourceSystemKey: zod.string().optional(),
																								value: zod.string().optional(),
																								modified: zod.string().datetime().optional()
																							})
																						)
																						.optional(),
																					children: zod.array(zod.any()).optional(),
																					childrenUrls: zod.array(zod.string()).optional(),
																					lat: zod.number().optional(),
																					lon: zod.number().optional()
																				})
																			)
																			.optional(),
																		childrenUrls: zod.array(zod.string()).optional(),
																		lat: zod.number().optional(),
																		lon: zod.number().optional()
																	})
																	.optional()
															})
														)
														.optional()
												})
											)
											.optional(),
										affectedStops: zod
											.array(
												zod.object({
													naptanId: zod.string().optional(),
													platformName: zod.string().optional(),
													indicator: zod.string().optional(),
													stopLetter: zod.string().optional(),
													modes: zod.array(zod.string()).optional(),
													icsCode: zod.string().optional(),
													smsCode: zod.string().optional(),
													stopType: zod.string().optional(),
													stationNaptan: zod.string().optional(),
													accessibilitySummary: zod.string().optional(),
													hubNaptanCode: zod.string().optional(),
													lines: zod
														.array(
															zod.object({
																id: zod.string().optional(),
																name: zod.string().optional(),
																uri: zod.string().optional(),
																fullName: zod.string().optional(),
																type: zod.string().optional(),
																crowding: zod
																	.object({
																		passengerFlows: zod
																			.array(
																				zod.object({
																					timeSlice: zod.string().optional(),
																					value: zod.number().optional()
																				})
																			)
																			.optional(),
																		trainLoadings: zod
																			.array(
																				zod.object({
																					line: zod.string().optional(),
																					lineDirection: zod.string().optional(),
																					platformDirection: zod.string().optional(),
																					direction: zod.string().optional(),
																					naptanTo: zod.string().optional(),
																					timeSlice: zod.string().optional(),
																					value: zod.number().optional()
																				})
																			)
																			.optional()
																	})
																	.optional(),
																routeType: zod
																	.enum([
																		'Unknown',
																		'All',
																		'Cycle Superhighways',
																		'Quietways',
																		'Cycleways',
																		'Mini-Hollands',
																		'Central London Grid',
																		'Streetspace Route'
																	])
																	.optional(),
																status: zod
																	.enum([
																		'Unknown',
																		'All',
																		'Open',
																		'In Progress',
																		'Planned',
																		'Planned - Subject to feasibility and consultation.',
																		'Not Open'
																	])
																	.optional(),
																motType: zod.string().optional(),
																network: zod.string().optional()
															})
														)
														.optional(),
													lineGroup: zod
														.array(
															zod.object({
																naptanIdReference: zod.string().optional(),
																stationAtcoCode: zod.string().optional(),
																lineIdentifier: zod.array(zod.string()).optional()
															})
														)
														.optional(),
													lineModeGroups: zod
														.array(
															zod.object({
																modeName: zod.string().optional(),
																lineIdentifier: zod.array(zod.string()).optional()
															})
														)
														.optional(),
													fullName: zod.string().optional(),
													naptanMode: zod.string().optional(),
													status: zod.boolean().optional(),
													individualStopId: zod.string().optional(),
													id: zod.string().optional(),
													url: zod.string().optional(),
													commonName: zod.string().optional(),
													distance: zod.number().optional(),
													placeType: zod.string().optional(),
													additionalProperties: zod
														.array(
															zod.object({
																category: zod.string().optional(),
																key: zod.string().optional(),
																sourceSystemKey: zod.string().optional(),
																value: zod.string().optional(),
																modified: zod.string().datetime().optional()
															})
														)
														.optional(),
													children: zod
														.array(
															zod.object({
																id: zod.string().optional(),
																url: zod.string().optional(),
																commonName: zod.string().optional(),
																distance: zod.number().optional(),
																placeType: zod.string().optional(),
																additionalProperties: zod
																	.array(
																		zod.object({
																			category: zod.string().optional(),
																			key: zod.string().optional(),
																			sourceSystemKey: zod.string().optional(),
																			value: zod.string().optional(),
																			modified: zod.string().datetime().optional()
																		})
																	)
																	.optional(),
																children: zod.array(zod.any()).optional(),
																childrenUrls: zod.array(zod.string()).optional(),
																lat: zod.number().optional(),
																lon: zod.number().optional()
															})
														)
														.optional(),
													childrenUrls: zod.array(zod.string()).optional(),
													lat: zod.number().optional(),
													lon: zod.number().optional()
												})
											)
											.optional(),
										closureText: zod.string().optional()
									})
								)
								.optional(),
							plannedWorks: zod
								.array(
									zod.object({
										id: zod.string().optional(),
										description: zod.string().optional(),
										createdDateTime: zod.string().datetime().optional(),
										lastUpdateDateTime: zod.string().datetime().optional()
									})
								)
								.optional(),
							distance: zod.number().optional(),
							isDisrupted: zod.boolean().optional(),
							hasFixedLocations: zod.boolean().optional(),
							scheduledDepartureTime: zod.string().datetime().optional(),
							scheduledArrivalTime: zod.string().datetime().optional(),
							interChangeDuration: zod.string().optional(),
							interChangePosition: zod.string().optional()
						})
					)
					.optional(),
				fare: zod
					.object({
						totalCost: zod.number().optional(),
						fares: zod
							.array(
								zod.object({
									lowZone: zod.number().optional(),
									highZone: zod.number().optional(),
									cost: zod.number().optional(),
									chargeProfileName: zod.string().optional(),
									isHopperFare: zod.boolean().optional(),
									chargeLevel: zod.string().optional(),
									peak: zod.number().optional(),
									offPeak: zod.number().optional(),
									taps: zod
										.array(
											zod.object({
												atcoCode: zod.string().optional(),
												tapDetails: zod
													.object({
														modeType: zod.string().optional(),
														validationType: zod.string().optional(),
														hostDeviceType: zod.string().optional(),
														busRouteId: zod.string().optional(),
														nationalLocationCode: zod.number().optional(),
														tapTimestamp: zod.string().datetime().optional()
													})
													.optional()
											})
										)
										.optional()
								})
							)
							.optional(),
						caveats: zod
							.array(
								zod.object({
									text: zod.string().optional(),
									type: zod.string().optional()
								})
							)
							.optional()
					})
					.optional()
			})
		)
		.optional(),
	lines: zod
		.array(
			zod.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
				modeName: zod.string().optional(),
				disruptions: zod
					.array(
						zod.object({
							category: zod
								.enum([
									'Undefined',
									'RealTime',
									'PlannedWork',
									'Information',
									'Event',
									'Crowding',
									'StatusAlert'
								])
								.optional(),
							type: zod.string().optional(),
							categoryDescription: zod.string().optional(),
							description: zod.string().optional(),
							summary: zod.string().optional(),
							additionalInfo: zod.string().optional(),
							created: zod.string().datetime().optional(),
							lastUpdate: zod.string().datetime().optional(),
							affectedRoutes: zod
								.array(
									zod.object({
										id: zod.string().optional(),
										lineId: zod.string().optional(),
										routeCode: zod.string().optional(),
										name: zod.string().optional(),
										lineString: zod.string().optional(),
										direction: zod.string().optional(),
										originationName: zod.string().optional(),
										destinationName: zod.string().optional(),
										via: zod
											.object({
												ordinal: zod.number().optional(),
												stopPoint: zod
													.object({
														naptanId: zod.string().optional(),
														platformName: zod.string().optional(),
														indicator: zod.string().optional(),
														stopLetter: zod.string().optional(),
														modes: zod.array(zod.string()).optional(),
														icsCode: zod.string().optional(),
														smsCode: zod.string().optional(),
														stopType: zod.string().optional(),
														stationNaptan: zod.string().optional(),
														accessibilitySummary: zod.string().optional(),
														hubNaptanCode: zod.string().optional(),
														lines: zod
															.array(
																zod.object({
																	id: zod.string().optional(),
																	name: zod.string().optional(),
																	uri: zod.string().optional(),
																	fullName: zod.string().optional(),
																	type: zod.string().optional(),
																	crowding: zod
																		.object({
																			passengerFlows: zod
																				.array(
																					zod.object({
																						timeSlice: zod.string().optional(),
																						value: zod.number().optional()
																					})
																				)
																				.optional(),
																			trainLoadings: zod
																				.array(
																					zod.object({
																						line: zod.string().optional(),
																						lineDirection: zod.string().optional(),
																						platformDirection: zod.string().optional(),
																						direction: zod.string().optional(),
																						naptanTo: zod.string().optional(),
																						timeSlice: zod.string().optional(),
																						value: zod.number().optional()
																					})
																				)
																				.optional()
																		})
																		.optional(),
																	routeType: zod
																		.enum([
																			'Unknown',
																			'All',
																			'Cycle Superhighways',
																			'Quietways',
																			'Cycleways',
																			'Mini-Hollands',
																			'Central London Grid',
																			'Streetspace Route'
																		])
																		.optional(),
																	status: zod
																		.enum([
																			'Unknown',
																			'All',
																			'Open',
																			'In Progress',
																			'Planned',
																			'Planned - Subject to feasibility and consultation.',
																			'Not Open'
																		])
																		.optional(),
																	motType: zod.string().optional(),
																	network: zod.string().optional()
																})
															)
															.optional(),
														lineGroup: zod
															.array(
																zod.object({
																	naptanIdReference: zod.string().optional(),
																	stationAtcoCode: zod.string().optional(),
																	lineIdentifier: zod.array(zod.string()).optional()
																})
															)
															.optional(),
														lineModeGroups: zod
															.array(
																zod.object({
																	modeName: zod.string().optional(),
																	lineIdentifier: zod.array(zod.string()).optional()
																})
															)
															.optional(),
														fullName: zod.string().optional(),
														naptanMode: zod.string().optional(),
														status: zod.boolean().optional(),
														individualStopId: zod.string().optional(),
														id: zod.string().optional(),
														url: zod.string().optional(),
														commonName: zod.string().optional(),
														distance: zod.number().optional(),
														placeType: zod.string().optional(),
														additionalProperties: zod
															.array(
																zod.object({
																	category: zod.string().optional(),
																	key: zod.string().optional(),
																	sourceSystemKey: zod.string().optional(),
																	value: zod.string().optional(),
																	modified: zod.string().datetime().optional()
																})
															)
															.optional(),
														children: zod
															.array(
																zod.object({
																	id: zod.string().optional(),
																	url: zod.string().optional(),
																	commonName: zod.string().optional(),
																	distance: zod.number().optional(),
																	placeType: zod.string().optional(),
																	additionalProperties: zod
																		.array(
																			zod.object({
																				category: zod.string().optional(),
																				key: zod.string().optional(),
																				sourceSystemKey: zod.string().optional(),
																				value: zod.string().optional(),
																				modified: zod.string().datetime().optional()
																			})
																		)
																		.optional(),
																	children: zod.array(zod.any()).optional(),
																	childrenUrls: zod.array(zod.string()).optional(),
																	lat: zod.number().optional(),
																	lon: zod.number().optional()
																})
															)
															.optional(),
														childrenUrls: zod.array(zod.string()).optional(),
														lat: zod.number().optional(),
														lon: zod.number().optional()
													})
													.optional()
											})
											.optional(),
										isEntireRouteSection: zod.boolean().optional(),
										validTo: zod.string().datetime().optional(),
										validFrom: zod.string().datetime().optional(),
										routeSectionNaptanEntrySequence: zod
											.array(
												zod.object({
													ordinal: zod.number().optional(),
													stopPoint: zod
														.object({
															naptanId: zod.string().optional(),
															platformName: zod.string().optional(),
															indicator: zod.string().optional(),
															stopLetter: zod.string().optional(),
															modes: zod.array(zod.string()).optional(),
															icsCode: zod.string().optional(),
															smsCode: zod.string().optional(),
															stopType: zod.string().optional(),
															stationNaptan: zod.string().optional(),
															accessibilitySummary: zod.string().optional(),
															hubNaptanCode: zod.string().optional(),
															lines: zod
																.array(
																	zod.object({
																		id: zod.string().optional(),
																		name: zod.string().optional(),
																		uri: zod.string().optional(),
																		fullName: zod.string().optional(),
																		type: zod.string().optional(),
																		crowding: zod
																			.object({
																				passengerFlows: zod
																					.array(
																						zod.object({
																							timeSlice: zod.string().optional(),
																							value: zod.number().optional()
																						})
																					)
																					.optional(),
																				trainLoadings: zod
																					.array(
																						zod.object({
																							line: zod.string().optional(),
																							lineDirection: zod.string().optional(),
																							platformDirection: zod.string().optional(),
																							direction: zod.string().optional(),
																							naptanTo: zod.string().optional(),
																							timeSlice: zod.string().optional(),
																							value: zod.number().optional()
																						})
																					)
																					.optional()
																			})
																			.optional(),
																		routeType: zod
																			.enum([
																				'Unknown',
																				'All',
																				'Cycle Superhighways',
																				'Quietways',
																				'Cycleways',
																				'Mini-Hollands',
																				'Central London Grid',
																				'Streetspace Route'
																			])
																			.optional(),
																		status: zod
																			.enum([
																				'Unknown',
																				'All',
																				'Open',
																				'In Progress',
																				'Planned',
																				'Planned - Subject to feasibility and consultation.',
																				'Not Open'
																			])
																			.optional(),
																		motType: zod.string().optional(),
																		network: zod.string().optional()
																	})
																)
																.optional(),
															lineGroup: zod
																.array(
																	zod.object({
																		naptanIdReference: zod.string().optional(),
																		stationAtcoCode: zod.string().optional(),
																		lineIdentifier: zod.array(zod.string()).optional()
																	})
																)
																.optional(),
															lineModeGroups: zod
																.array(
																	zod.object({
																		modeName: zod.string().optional(),
																		lineIdentifier: zod.array(zod.string()).optional()
																	})
																)
																.optional(),
															fullName: zod.string().optional(),
															naptanMode: zod.string().optional(),
															status: zod.boolean().optional(),
															individualStopId: zod.string().optional(),
															id: zod.string().optional(),
															url: zod.string().optional(),
															commonName: zod.string().optional(),
															distance: zod.number().optional(),
															placeType: zod.string().optional(),
															additionalProperties: zod
																.array(
																	zod.object({
																		category: zod.string().optional(),
																		key: zod.string().optional(),
																		sourceSystemKey: zod.string().optional(),
																		value: zod.string().optional(),
																		modified: zod.string().datetime().optional()
																	})
																)
																.optional(),
															children: zod
																.array(
																	zod.object({
																		id: zod.string().optional(),
																		url: zod.string().optional(),
																		commonName: zod.string().optional(),
																		distance: zod.number().optional(),
																		placeType: zod.string().optional(),
																		additionalProperties: zod
																			.array(
																				zod.object({
																					category: zod.string().optional(),
																					key: zod.string().optional(),
																					sourceSystemKey: zod.string().optional(),
																					value: zod.string().optional(),
																					modified: zod.string().datetime().optional()
																				})
																			)
																			.optional(),
																		children: zod.array(zod.any()).optional(),
																		childrenUrls: zod.array(zod.string()).optional(),
																		lat: zod.number().optional(),
																		lon: zod.number().optional()
																	})
																)
																.optional(),
															childrenUrls: zod.array(zod.string()).optional(),
															lat: zod.number().optional(),
															lon: zod.number().optional()
														})
														.optional()
												})
											)
											.optional()
									})
								)
								.optional(),
							affectedStops: zod
								.array(
									zod.object({
										naptanId: zod.string().optional(),
										platformName: zod.string().optional(),
										indicator: zod.string().optional(),
										stopLetter: zod.string().optional(),
										modes: zod.array(zod.string()).optional(),
										icsCode: zod.string().optional(),
										smsCode: zod.string().optional(),
										stopType: zod.string().optional(),
										stationNaptan: zod.string().optional(),
										accessibilitySummary: zod.string().optional(),
										hubNaptanCode: zod.string().optional(),
										lines: zod
											.array(
												zod.object({
													id: zod.string().optional(),
													name: zod.string().optional(),
													uri: zod.string().optional(),
													fullName: zod.string().optional(),
													type: zod.string().optional(),
													crowding: zod
														.object({
															passengerFlows: zod
																.array(
																	zod.object({
																		timeSlice: zod.string().optional(),
																		value: zod.number().optional()
																	})
																)
																.optional(),
															trainLoadings: zod
																.array(
																	zod.object({
																		line: zod.string().optional(),
																		lineDirection: zod.string().optional(),
																		platformDirection: zod.string().optional(),
																		direction: zod.string().optional(),
																		naptanTo: zod.string().optional(),
																		timeSlice: zod.string().optional(),
																		value: zod.number().optional()
																	})
																)
																.optional()
														})
														.optional(),
													routeType: zod
														.enum([
															'Unknown',
															'All',
															'Cycle Superhighways',
															'Quietways',
															'Cycleways',
															'Mini-Hollands',
															'Central London Grid',
															'Streetspace Route'
														])
														.optional(),
													status: zod
														.enum([
															'Unknown',
															'All',
															'Open',
															'In Progress',
															'Planned',
															'Planned - Subject to feasibility and consultation.',
															'Not Open'
														])
														.optional(),
													motType: zod.string().optional(),
													network: zod.string().optional()
												})
											)
											.optional(),
										lineGroup: zod
											.array(
												zod.object({
													naptanIdReference: zod.string().optional(),
													stationAtcoCode: zod.string().optional(),
													lineIdentifier: zod.array(zod.string()).optional()
												})
											)
											.optional(),
										lineModeGroups: zod
											.array(
												zod.object({
													modeName: zod.string().optional(),
													lineIdentifier: zod.array(zod.string()).optional()
												})
											)
											.optional(),
										fullName: zod.string().optional(),
										naptanMode: zod.string().optional(),
										status: zod.boolean().optional(),
										individualStopId: zod.string().optional(),
										id: zod.string().optional(),
										url: zod.string().optional(),
										commonName: zod.string().optional(),
										distance: zod.number().optional(),
										placeType: zod.string().optional(),
										additionalProperties: zod
											.array(
												zod.object({
													category: zod.string().optional(),
													key: zod.string().optional(),
													sourceSystemKey: zod.string().optional(),
													value: zod.string().optional(),
													modified: zod.string().datetime().optional()
												})
											)
											.optional(),
										children: zod
											.array(
												zod.object({
													id: zod.string().optional(),
													url: zod.string().optional(),
													commonName: zod.string().optional(),
													distance: zod.number().optional(),
													placeType: zod.string().optional(),
													additionalProperties: zod
														.array(
															zod.object({
																category: zod.string().optional(),
																key: zod.string().optional(),
																sourceSystemKey: zod.string().optional(),
																value: zod.string().optional(),
																modified: zod.string().datetime().optional()
															})
														)
														.optional(),
													children: zod.array(zod.any()).optional(),
													childrenUrls: zod.array(zod.string()).optional(),
													lat: zod.number().optional(),
													lon: zod.number().optional()
												})
											)
											.optional(),
										childrenUrls: zod.array(zod.string()).optional(),
										lat: zod.number().optional(),
										lon: zod.number().optional()
									})
								)
								.optional(),
							closureText: zod.string().optional()
						})
					)
					.optional(),
				created: zod.string().datetime().optional(),
				modified: zod.string().datetime().optional(),
				lineStatuses: zod
					.array(
						zod.object({
							id: zod.number().optional(),
							lineId: zod.string().optional(),
							statusSeverity: zod.number().optional(),
							statusSeverityDescription: zod.string().optional(),
							reason: zod.string().optional(),
							created: zod.string().datetime().optional(),
							modified: zod.string().datetime().optional(),
							validityPeriods: zod
								.array(
									zod.object({
										fromDate: zod.string().datetime().optional(),
										toDate: zod.string().datetime().optional(),
										isNow: zod.boolean().optional()
									})
								)
								.optional(),
							disruption: zod
								.object({
									category: zod
										.enum([
											'Undefined',
											'RealTime',
											'PlannedWork',
											'Information',
											'Event',
											'Crowding',
											'StatusAlert'
										])
										.optional(),
									type: zod.string().optional(),
									categoryDescription: zod.string().optional(),
									description: zod.string().optional(),
									summary: zod.string().optional(),
									additionalInfo: zod.string().optional(),
									created: zod.string().datetime().optional(),
									lastUpdate: zod.string().datetime().optional(),
									affectedRoutes: zod
										.array(
											zod.object({
												id: zod.string().optional(),
												lineId: zod.string().optional(),
												routeCode: zod.string().optional(),
												name: zod.string().optional(),
												lineString: zod.string().optional(),
												direction: zod.string().optional(),
												originationName: zod.string().optional(),
												destinationName: zod.string().optional(),
												via: zod
													.object({
														ordinal: zod.number().optional(),
														stopPoint: zod
															.object({
																naptanId: zod.string().optional(),
																platformName: zod.string().optional(),
																indicator: zod.string().optional(),
																stopLetter: zod.string().optional(),
																modes: zod.array(zod.string()).optional(),
																icsCode: zod.string().optional(),
																smsCode: zod.string().optional(),
																stopType: zod.string().optional(),
																stationNaptan: zod.string().optional(),
																accessibilitySummary: zod.string().optional(),
																hubNaptanCode: zod.string().optional(),
																lines: zod
																	.array(
																		zod.object({
																			id: zod.string().optional(),
																			name: zod.string().optional(),
																			uri: zod.string().optional(),
																			fullName: zod.string().optional(),
																			type: zod.string().optional(),
																			crowding: zod
																				.object({
																					passengerFlows: zod
																						.array(
																							zod.object({
																								timeSlice: zod.string().optional(),
																								value: zod.number().optional()
																							})
																						)
																						.optional(),
																					trainLoadings: zod
																						.array(
																							zod.object({
																								line: zod.string().optional(),
																								lineDirection: zod.string().optional(),
																								platformDirection: zod.string().optional(),
																								direction: zod.string().optional(),
																								naptanTo: zod.string().optional(),
																								timeSlice: zod.string().optional(),
																								value: zod.number().optional()
																							})
																						)
																						.optional()
																				})
																				.optional(),
																			routeType: zod
																				.enum([
																					'Unknown',
																					'All',
																					'Cycle Superhighways',
																					'Quietways',
																					'Cycleways',
																					'Mini-Hollands',
																					'Central London Grid',
																					'Streetspace Route'
																				])
																				.optional(),
																			status: zod
																				.enum([
																					'Unknown',
																					'All',
																					'Open',
																					'In Progress',
																					'Planned',
																					'Planned - Subject to feasibility and consultation.',
																					'Not Open'
																				])
																				.optional(),
																			motType: zod.string().optional(),
																			network: zod.string().optional()
																		})
																	)
																	.optional(),
																lineGroup: zod
																	.array(
																		zod.object({
																			naptanIdReference: zod.string().optional(),
																			stationAtcoCode: zod.string().optional(),
																			lineIdentifier: zod.array(zod.string()).optional()
																		})
																	)
																	.optional(),
																lineModeGroups: zod
																	.array(
																		zod.object({
																			modeName: zod.string().optional(),
																			lineIdentifier: zod.array(zod.string()).optional()
																		})
																	)
																	.optional(),
																fullName: zod.string().optional(),
																naptanMode: zod.string().optional(),
																status: zod.boolean().optional(),
																individualStopId: zod.string().optional(),
																id: zod.string().optional(),
																url: zod.string().optional(),
																commonName: zod.string().optional(),
																distance: zod.number().optional(),
																placeType: zod.string().optional(),
																additionalProperties: zod
																	.array(
																		zod.object({
																			category: zod.string().optional(),
																			key: zod.string().optional(),
																			sourceSystemKey: zod.string().optional(),
																			value: zod.string().optional(),
																			modified: zod.string().datetime().optional()
																		})
																	)
																	.optional(),
																children: zod
																	.array(
																		zod.object({
																			id: zod.string().optional(),
																			url: zod.string().optional(),
																			commonName: zod.string().optional(),
																			distance: zod.number().optional(),
																			placeType: zod.string().optional(),
																			additionalProperties: zod
																				.array(
																					zod.object({
																						category: zod.string().optional(),
																						key: zod.string().optional(),
																						sourceSystemKey: zod.string().optional(),
																						value: zod.string().optional(),
																						modified: zod.string().datetime().optional()
																					})
																				)
																				.optional(),
																			children: zod.array(zod.any()).optional(),
																			childrenUrls: zod.array(zod.string()).optional(),
																			lat: zod.number().optional(),
																			lon: zod.number().optional()
																		})
																	)
																	.optional(),
																childrenUrls: zod.array(zod.string()).optional(),
																lat: zod.number().optional(),
																lon: zod.number().optional()
															})
															.optional()
													})
													.optional(),
												isEntireRouteSection: zod.boolean().optional(),
												validTo: zod.string().datetime().optional(),
												validFrom: zod.string().datetime().optional(),
												routeSectionNaptanEntrySequence: zod
													.array(
														zod.object({
															ordinal: zod.number().optional(),
															stopPoint: zod
																.object({
																	naptanId: zod.string().optional(),
																	platformName: zod.string().optional(),
																	indicator: zod.string().optional(),
																	stopLetter: zod.string().optional(),
																	modes: zod.array(zod.string()).optional(),
																	icsCode: zod.string().optional(),
																	smsCode: zod.string().optional(),
																	stopType: zod.string().optional(),
																	stationNaptan: zod.string().optional(),
																	accessibilitySummary: zod.string().optional(),
																	hubNaptanCode: zod.string().optional(),
																	lines: zod
																		.array(
																			zod.object({
																				id: zod.string().optional(),
																				name: zod.string().optional(),
																				uri: zod.string().optional(),
																				fullName: zod.string().optional(),
																				type: zod.string().optional(),
																				crowding: zod
																					.object({
																						passengerFlows: zod
																							.array(
																								zod.object({
																									timeSlice: zod.string().optional(),
																									value: zod.number().optional()
																								})
																							)
																							.optional(),
																						trainLoadings: zod
																							.array(
																								zod.object({
																									line: zod.string().optional(),
																									lineDirection: zod.string().optional(),
																									platformDirection: zod.string().optional(),
																									direction: zod.string().optional(),
																									naptanTo: zod.string().optional(),
																									timeSlice: zod.string().optional(),
																									value: zod.number().optional()
																								})
																							)
																							.optional()
																					})
																					.optional(),
																				routeType: zod
																					.enum([
																						'Unknown',
																						'All',
																						'Cycle Superhighways',
																						'Quietways',
																						'Cycleways',
																						'Mini-Hollands',
																						'Central London Grid',
																						'Streetspace Route'
																					])
																					.optional(),
																				status: zod
																					.enum([
																						'Unknown',
																						'All',
																						'Open',
																						'In Progress',
																						'Planned',
																						'Planned - Subject to feasibility and consultation.',
																						'Not Open'
																					])
																					.optional(),
																				motType: zod.string().optional(),
																				network: zod.string().optional()
																			})
																		)
																		.optional(),
																	lineGroup: zod
																		.array(
																			zod.object({
																				naptanIdReference: zod.string().optional(),
																				stationAtcoCode: zod.string().optional(),
																				lineIdentifier: zod.array(zod.string()).optional()
																			})
																		)
																		.optional(),
																	lineModeGroups: zod
																		.array(
																			zod.object({
																				modeName: zod.string().optional(),
																				lineIdentifier: zod.array(zod.string()).optional()
																			})
																		)
																		.optional(),
																	fullName: zod.string().optional(),
																	naptanMode: zod.string().optional(),
																	status: zod.boolean().optional(),
																	individualStopId: zod.string().optional(),
																	id: zod.string().optional(),
																	url: zod.string().optional(),
																	commonName: zod.string().optional(),
																	distance: zod.number().optional(),
																	placeType: zod.string().optional(),
																	additionalProperties: zod
																		.array(
																			zod.object({
																				category: zod.string().optional(),
																				key: zod.string().optional(),
																				sourceSystemKey: zod.string().optional(),
																				value: zod.string().optional(),
																				modified: zod.string().datetime().optional()
																			})
																		)
																		.optional(),
																	children: zod
																		.array(
																			zod.object({
																				id: zod.string().optional(),
																				url: zod.string().optional(),
																				commonName: zod.string().optional(),
																				distance: zod.number().optional(),
																				placeType: zod.string().optional(),
																				additionalProperties: zod
																					.array(
																						zod.object({
																							category: zod.string().optional(),
																							key: zod.string().optional(),
																							sourceSystemKey: zod.string().optional(),
																							value: zod.string().optional(),
																							modified: zod.string().datetime().optional()
																						})
																					)
																					.optional(),
																				children: zod.array(zod.any()).optional(),
																				childrenUrls: zod.array(zod.string()).optional(),
																				lat: zod.number().optional(),
																				lon: zod.number().optional()
																			})
																		)
																		.optional(),
																	childrenUrls: zod.array(zod.string()).optional(),
																	lat: zod.number().optional(),
																	lon: zod.number().optional()
																})
																.optional()
														})
													)
													.optional()
											})
										)
										.optional(),
									affectedStops: zod
										.array(
											zod.object({
												naptanId: zod.string().optional(),
												platformName: zod.string().optional(),
												indicator: zod.string().optional(),
												stopLetter: zod.string().optional(),
												modes: zod.array(zod.string()).optional(),
												icsCode: zod.string().optional(),
												smsCode: zod.string().optional(),
												stopType: zod.string().optional(),
												stationNaptan: zod.string().optional(),
												accessibilitySummary: zod.string().optional(),
												hubNaptanCode: zod.string().optional(),
												lines: zod
													.array(
														zod.object({
															id: zod.string().optional(),
															name: zod.string().optional(),
															uri: zod.string().optional(),
															fullName: zod.string().optional(),
															type: zod.string().optional(),
															crowding: zod
																.object({
																	passengerFlows: zod
																		.array(
																			zod.object({
																				timeSlice: zod.string().optional(),
																				value: zod.number().optional()
																			})
																		)
																		.optional(),
																	trainLoadings: zod
																		.array(
																			zod.object({
																				line: zod.string().optional(),
																				lineDirection: zod.string().optional(),
																				platformDirection: zod.string().optional(),
																				direction: zod.string().optional(),
																				naptanTo: zod.string().optional(),
																				timeSlice: zod.string().optional(),
																				value: zod.number().optional()
																			})
																		)
																		.optional()
																})
																.optional(),
															routeType: zod
																.enum([
																	'Unknown',
																	'All',
																	'Cycle Superhighways',
																	'Quietways',
																	'Cycleways',
																	'Mini-Hollands',
																	'Central London Grid',
																	'Streetspace Route'
																])
																.optional(),
															status: zod
																.enum([
																	'Unknown',
																	'All',
																	'Open',
																	'In Progress',
																	'Planned',
																	'Planned - Subject to feasibility and consultation.',
																	'Not Open'
																])
																.optional(),
															motType: zod.string().optional(),
															network: zod.string().optional()
														})
													)
													.optional(),
												lineGroup: zod
													.array(
														zod.object({
															naptanIdReference: zod.string().optional(),
															stationAtcoCode: zod.string().optional(),
															lineIdentifier: zod.array(zod.string()).optional()
														})
													)
													.optional(),
												lineModeGroups: zod
													.array(
														zod.object({
															modeName: zod.string().optional(),
															lineIdentifier: zod.array(zod.string()).optional()
														})
													)
													.optional(),
												fullName: zod.string().optional(),
												naptanMode: zod.string().optional(),
												status: zod.boolean().optional(),
												individualStopId: zod.string().optional(),
												id: zod.string().optional(),
												url: zod.string().optional(),
												commonName: zod.string().optional(),
												distance: zod.number().optional(),
												placeType: zod.string().optional(),
												additionalProperties: zod
													.array(
														zod.object({
															category: zod.string().optional(),
															key: zod.string().optional(),
															sourceSystemKey: zod.string().optional(),
															value: zod.string().optional(),
															modified: zod.string().datetime().optional()
														})
													)
													.optional(),
												children: zod
													.array(
														zod.object({
															id: zod.string().optional(),
															url: zod.string().optional(),
															commonName: zod.string().optional(),
															distance: zod.number().optional(),
															placeType: zod.string().optional(),
															additionalProperties: zod
																.array(
																	zod.object({
																		category: zod.string().optional(),
																		key: zod.string().optional(),
																		sourceSystemKey: zod.string().optional(),
																		value: zod.string().optional(),
																		modified: zod.string().datetime().optional()
																	})
																)
																.optional(),
															children: zod.array(zod.any()).optional(),
															childrenUrls: zod.array(zod.string()).optional(),
															lat: zod.number().optional(),
															lon: zod.number().optional()
														})
													)
													.optional(),
												childrenUrls: zod.array(zod.string()).optional(),
												lat: zod.number().optional(),
												lon: zod.number().optional()
											})
										)
										.optional(),
									closureText: zod.string().optional()
								})
								.optional()
						})
					)
					.optional(),
				routeSections: zod
					.array(
						zod.object({
							routeCode: zod.string().optional(),
							name: zod.string().optional(),
							direction: zod.string().optional(),
							originationName: zod.string().optional(),
							destinationName: zod.string().optional(),
							originator: zod.string().optional(),
							destination: zod.string().optional(),
							serviceType: zod.string().optional(),
							validTo: zod.string().datetime().optional(),
							validFrom: zod.string().datetime().optional()
						})
					)
					.optional(),
				serviceTypes: zod
					.array(
						zod.object({
							name: zod.string().optional(),
							uri: zod.string().optional()
						})
					)
					.optional(),
				crowding: zod
					.object({
						passengerFlows: zod
							.array(
								zod.object({
									timeSlice: zod.string().optional(),
									value: zod.number().optional()
								})
							)
							.optional(),
						trainLoadings: zod
							.array(
								zod.object({
									line: zod.string().optional(),
									lineDirection: zod.string().optional(),
									platformDirection: zod.string().optional(),
									direction: zod.string().optional(),
									naptanTo: zod.string().optional(),
									timeSlice: zod.string().optional(),
									value: zod.number().optional()
								})
							)
							.optional()
					})
					.optional()
			})
		)
		.optional(),
	cycleHireDockingStationData: zod
		.object({
			originNumberOfBikes: zod.number().optional(),
			destinationNumberOfBikes: zod.number().optional(),
			originNumberOfEmptySlots: zod.number().optional(),
			destinationNumberOfEmptySlots: zod.number().optional(),
			originId: zod.string().optional(),
			destinationId: zod.string().optional()
		})
		.optional(),
	stopMessages: zod.array(zod.string()).optional(),
	recommendedMaxAgeMinutes: zod.number().optional(),
	searchCriteria: zod
		.object({
			dateTime: zod.string().datetime().optional(),
			dateTimeType: zod.enum(['Arriving', 'Departing']).optional(),
			timeAdjustments: zod
				.object({
					earliest: zod
						.object({
							date: zod.string().optional(),
							time: zod.string().optional(),
							timeIs: zod.string().optional(),
							uri: zod.string().optional()
						})
						.optional(),
					earlier: zod
						.object({
							date: zod.string().optional(),
							time: zod.string().optional(),
							timeIs: zod.string().optional(),
							uri: zod.string().optional()
						})
						.optional(),
					later: zod
						.object({
							date: zod.string().optional(),
							time: zod.string().optional(),
							timeIs: zod.string().optional(),
							uri: zod.string().optional()
						})
						.optional(),
					latest: zod
						.object({
							date: zod.string().optional(),
							time: zod.string().optional(),
							timeIs: zod.string().optional(),
							uri: zod.string().optional()
						})
						.optional()
				})
				.optional()
		})
		.optional(),
	journeyVector: zod
		.object({
			from: zod.string().optional(),
			to: zod.string().optional(),
			via: zod.string().optional(),
			uri: zod.string().optional()
		})
		.optional()
});

/**
 * @summary Gets a list of valid modes
 */
export const lineMetaModesResponseItem = zod.object({
	isTflService: zod.boolean().optional(),
	isFarePaying: zod.boolean().optional(),
	isScheduledService: zod.boolean().optional(),
	modeName: zod.string().optional(),
	motType: zod.string().optional(),
	network: zod.string().optional()
});
export const lineMetaModesResponse = zod.array(lineMetaModesResponseItem);

/**
 * @summary Gets a list of valid severity codes
 */
export const lineMetaSeverityResponseItem = zod.object({
	modeName: zod.string().optional(),
	severityLevel: zod.number().optional(),
	description: zod.string().optional()
});
export const lineMetaSeverityResponse = zod.array(lineMetaSeverityResponseItem);

/**
 * @summary Gets a list of valid disruption categories
 */
export const lineMetaDisruptionCategoriesResponseItem = zod.string();
export const lineMetaDisruptionCategoriesResponse = zod.array(
	lineMetaDisruptionCategoriesResponseItem
);

/**
 * @summary Gets a list of valid ServiceTypes to filter on
 */
export const lineMetaServiceTypesResponseItem = zod.string();
export const lineMetaServiceTypesResponse = zod.array(lineMetaServiceTypesResponseItem);

/**
 * @summary Gets lines that match the specified line ids.
 */
export const lineGetParams = zod.object({
	ids: zod.array(zod.string())
});

export const lineGetResponseItem = zod.object({
	id: zod.string().optional(),
	name: zod.string().optional(),
	modeName: zod.string().optional(),
	disruptions: zod
		.array(
			zod.object({
				category: zod
					.enum([
						'Undefined',
						'RealTime',
						'PlannedWork',
						'Information',
						'Event',
						'Crowding',
						'StatusAlert'
					])
					.optional(),
				type: zod.string().optional(),
				categoryDescription: zod.string().optional(),
				description: zod.string().optional(),
				summary: zod.string().optional(),
				additionalInfo: zod.string().optional(),
				created: zod.string().datetime().optional(),
				lastUpdate: zod.string().datetime().optional(),
				affectedRoutes: zod
					.array(
						zod.object({
							id: zod.string().optional(),
							lineId: zod.string().optional(),
							routeCode: zod.string().optional(),
							name: zod.string().optional(),
							lineString: zod.string().optional(),
							direction: zod.string().optional(),
							originationName: zod.string().optional(),
							destinationName: zod.string().optional(),
							via: zod
								.object({
									ordinal: zod.number().optional(),
									stopPoint: zod
										.object({
											naptanId: zod.string().optional(),
											platformName: zod.string().optional(),
											indicator: zod.string().optional(),
											stopLetter: zod.string().optional(),
											modes: zod.array(zod.string()).optional(),
											icsCode: zod.string().optional(),
											smsCode: zod.string().optional(),
											stopType: zod.string().optional(),
											stationNaptan: zod.string().optional(),
											accessibilitySummary: zod.string().optional(),
											hubNaptanCode: zod.string().optional(),
											lines: zod
												.array(
													zod.object({
														id: zod.string().optional(),
														name: zod.string().optional(),
														uri: zod.string().optional(),
														fullName: zod.string().optional(),
														type: zod.string().optional(),
														crowding: zod
															.object({
																passengerFlows: zod
																	.array(
																		zod.object({
																			timeSlice: zod.string().optional(),
																			value: zod.number().optional()
																		})
																	)
																	.optional(),
																trainLoadings: zod
																	.array(
																		zod.object({
																			line: zod.string().optional(),
																			lineDirection: zod.string().optional(),
																			platformDirection: zod.string().optional(),
																			direction: zod.string().optional(),
																			naptanTo: zod.string().optional(),
																			timeSlice: zod.string().optional(),
																			value: zod.number().optional()
																		})
																	)
																	.optional()
															})
															.optional(),
														routeType: zod
															.enum([
																'Unknown',
																'All',
																'Cycle Superhighways',
																'Quietways',
																'Cycleways',
																'Mini-Hollands',
																'Central London Grid',
																'Streetspace Route'
															])
															.optional(),
														status: zod
															.enum([
																'Unknown',
																'All',
																'Open',
																'In Progress',
																'Planned',
																'Planned - Subject to feasibility and consultation.',
																'Not Open'
															])
															.optional(),
														motType: zod.string().optional(),
														network: zod.string().optional()
													})
												)
												.optional(),
											lineGroup: zod
												.array(
													zod.object({
														naptanIdReference: zod.string().optional(),
														stationAtcoCode: zod.string().optional(),
														lineIdentifier: zod.array(zod.string()).optional()
													})
												)
												.optional(),
											lineModeGroups: zod
												.array(
													zod.object({
														modeName: zod.string().optional(),
														lineIdentifier: zod.array(zod.string()).optional()
													})
												)
												.optional(),
											fullName: zod.string().optional(),
											naptanMode: zod.string().optional(),
											status: zod.boolean().optional(),
											individualStopId: zod.string().optional(),
											id: zod.string().optional(),
											url: zod.string().optional(),
											commonName: zod.string().optional(),
											distance: zod.number().optional(),
											placeType: zod.string().optional(),
											additionalProperties: zod
												.array(
													zod.object({
														category: zod.string().optional(),
														key: zod.string().optional(),
														sourceSystemKey: zod.string().optional(),
														value: zod.string().optional(),
														modified: zod.string().datetime().optional()
													})
												)
												.optional(),
											children: zod
												.array(
													zod.object({
														id: zod.string().optional(),
														url: zod.string().optional(),
														commonName: zod.string().optional(),
														distance: zod.number().optional(),
														placeType: zod.string().optional(),
														additionalProperties: zod
															.array(
																zod.object({
																	category: zod.string().optional(),
																	key: zod.string().optional(),
																	sourceSystemKey: zod.string().optional(),
																	value: zod.string().optional(),
																	modified: zod.string().datetime().optional()
																})
															)
															.optional(),
														children: zod.array(zod.any()).optional(),
														childrenUrls: zod.array(zod.string()).optional(),
														lat: zod.number().optional(),
														lon: zod.number().optional()
													})
												)
												.optional(),
											childrenUrls: zod.array(zod.string()).optional(),
											lat: zod.number().optional(),
											lon: zod.number().optional()
										})
										.optional()
								})
								.optional(),
							isEntireRouteSection: zod.boolean().optional(),
							validTo: zod.string().datetime().optional(),
							validFrom: zod.string().datetime().optional(),
							routeSectionNaptanEntrySequence: zod
								.array(
									zod.object({
										ordinal: zod.number().optional(),
										stopPoint: zod
											.object({
												naptanId: zod.string().optional(),
												platformName: zod.string().optional(),
												indicator: zod.string().optional(),
												stopLetter: zod.string().optional(),
												modes: zod.array(zod.string()).optional(),
												icsCode: zod.string().optional(),
												smsCode: zod.string().optional(),
												stopType: zod.string().optional(),
												stationNaptan: zod.string().optional(),
												accessibilitySummary: zod.string().optional(),
												hubNaptanCode: zod.string().optional(),
												lines: zod
													.array(
														zod.object({
															id: zod.string().optional(),
															name: zod.string().optional(),
															uri: zod.string().optional(),
															fullName: zod.string().optional(),
															type: zod.string().optional(),
															crowding: zod
																.object({
																	passengerFlows: zod
																		.array(
																			zod.object({
																				timeSlice: zod.string().optional(),
																				value: zod.number().optional()
																			})
																		)
																		.optional(),
																	trainLoadings: zod
																		.array(
																			zod.object({
																				line: zod.string().optional(),
																				lineDirection: zod.string().optional(),
																				platformDirection: zod.string().optional(),
																				direction: zod.string().optional(),
																				naptanTo: zod.string().optional(),
																				timeSlice: zod.string().optional(),
																				value: zod.number().optional()
																			})
																		)
																		.optional()
																})
																.optional(),
															routeType: zod
																.enum([
																	'Unknown',
																	'All',
																	'Cycle Superhighways',
																	'Quietways',
																	'Cycleways',
																	'Mini-Hollands',
																	'Central London Grid',
																	'Streetspace Route'
																])
																.optional(),
															status: zod
																.enum([
																	'Unknown',
																	'All',
																	'Open',
																	'In Progress',
																	'Planned',
																	'Planned - Subject to feasibility and consultation.',
																	'Not Open'
																])
																.optional(),
															motType: zod.string().optional(),
															network: zod.string().optional()
														})
													)
													.optional(),
												lineGroup: zod
													.array(
														zod.object({
															naptanIdReference: zod.string().optional(),
															stationAtcoCode: zod.string().optional(),
															lineIdentifier: zod.array(zod.string()).optional()
														})
													)
													.optional(),
												lineModeGroups: zod
													.array(
														zod.object({
															modeName: zod.string().optional(),
															lineIdentifier: zod.array(zod.string()).optional()
														})
													)
													.optional(),
												fullName: zod.string().optional(),
												naptanMode: zod.string().optional(),
												status: zod.boolean().optional(),
												individualStopId: zod.string().optional(),
												id: zod.string().optional(),
												url: zod.string().optional(),
												commonName: zod.string().optional(),
												distance: zod.number().optional(),
												placeType: zod.string().optional(),
												additionalProperties: zod
													.array(
														zod.object({
															category: zod.string().optional(),
															key: zod.string().optional(),
															sourceSystemKey: zod.string().optional(),
															value: zod.string().optional(),
															modified: zod.string().datetime().optional()
														})
													)
													.optional(),
												children: zod
													.array(
														zod.object({
															id: zod.string().optional(),
															url: zod.string().optional(),
															commonName: zod.string().optional(),
															distance: zod.number().optional(),
															placeType: zod.string().optional(),
															additionalProperties: zod
																.array(
																	zod.object({
																		category: zod.string().optional(),
																		key: zod.string().optional(),
																		sourceSystemKey: zod.string().optional(),
																		value: zod.string().optional(),
																		modified: zod.string().datetime().optional()
																	})
																)
																.optional(),
															children: zod.array(zod.any()).optional(),
															childrenUrls: zod.array(zod.string()).optional(),
															lat: zod.number().optional(),
															lon: zod.number().optional()
														})
													)
													.optional(),
												childrenUrls: zod.array(zod.string()).optional(),
												lat: zod.number().optional(),
												lon: zod.number().optional()
											})
											.optional()
									})
								)
								.optional()
						})
					)
					.optional(),
				affectedStops: zod
					.array(
						zod.object({
							naptanId: zod.string().optional(),
							platformName: zod.string().optional(),
							indicator: zod.string().optional(),
							stopLetter: zod.string().optional(),
							modes: zod.array(zod.string()).optional(),
							icsCode: zod.string().optional(),
							smsCode: zod.string().optional(),
							stopType: zod.string().optional(),
							stationNaptan: zod.string().optional(),
							accessibilitySummary: zod.string().optional(),
							hubNaptanCode: zod.string().optional(),
							lines: zod
								.array(
									zod.object({
										id: zod.string().optional(),
										name: zod.string().optional(),
										uri: zod.string().optional(),
										fullName: zod.string().optional(),
										type: zod.string().optional(),
										crowding: zod
											.object({
												passengerFlows: zod
													.array(
														zod.object({
															timeSlice: zod.string().optional(),
															value: zod.number().optional()
														})
													)
													.optional(),
												trainLoadings: zod
													.array(
														zod.object({
															line: zod.string().optional(),
															lineDirection: zod.string().optional(),
															platformDirection: zod.string().optional(),
															direction: zod.string().optional(),
															naptanTo: zod.string().optional(),
															timeSlice: zod.string().optional(),
															value: zod.number().optional()
														})
													)
													.optional()
											})
											.optional(),
										routeType: zod
											.enum([
												'Unknown',
												'All',
												'Cycle Superhighways',
												'Quietways',
												'Cycleways',
												'Mini-Hollands',
												'Central London Grid',
												'Streetspace Route'
											])
											.optional(),
										status: zod
											.enum([
												'Unknown',
												'All',
												'Open',
												'In Progress',
												'Planned',
												'Planned - Subject to feasibility and consultation.',
												'Not Open'
											])
											.optional(),
										motType: zod.string().optional(),
										network: zod.string().optional()
									})
								)
								.optional(),
							lineGroup: zod
								.array(
									zod.object({
										naptanIdReference: zod.string().optional(),
										stationAtcoCode: zod.string().optional(),
										lineIdentifier: zod.array(zod.string()).optional()
									})
								)
								.optional(),
							lineModeGroups: zod
								.array(
									zod.object({
										modeName: zod.string().optional(),
										lineIdentifier: zod.array(zod.string()).optional()
									})
								)
								.optional(),
							fullName: zod.string().optional(),
							naptanMode: zod.string().optional(),
							status: zod.boolean().optional(),
							individualStopId: zod.string().optional(),
							id: zod.string().optional(),
							url: zod.string().optional(),
							commonName: zod.string().optional(),
							distance: zod.number().optional(),
							placeType: zod.string().optional(),
							additionalProperties: zod
								.array(
									zod.object({
										category: zod.string().optional(),
										key: zod.string().optional(),
										sourceSystemKey: zod.string().optional(),
										value: zod.string().optional(),
										modified: zod.string().datetime().optional()
									})
								)
								.optional(),
							children: zod
								.array(
									zod.object({
										id: zod.string().optional(),
										url: zod.string().optional(),
										commonName: zod.string().optional(),
										distance: zod.number().optional(),
										placeType: zod.string().optional(),
										additionalProperties: zod
											.array(
												zod.object({
													category: zod.string().optional(),
													key: zod.string().optional(),
													sourceSystemKey: zod.string().optional(),
													value: zod.string().optional(),
													modified: zod.string().datetime().optional()
												})
											)
											.optional(),
										children: zod.array(zod.any()).optional(),
										childrenUrls: zod.array(zod.string()).optional(),
										lat: zod.number().optional(),
										lon: zod.number().optional()
									})
								)
								.optional(),
							childrenUrls: zod.array(zod.string()).optional(),
							lat: zod.number().optional(),
							lon: zod.number().optional()
						})
					)
					.optional(),
				closureText: zod.string().optional()
			})
		)
		.optional(),
	created: zod.string().datetime().optional(),
	modified: zod.string().datetime().optional(),
	lineStatuses: zod
		.array(
			zod.object({
				id: zod.number().optional(),
				lineId: zod.string().optional(),
				statusSeverity: zod.number().optional(),
				statusSeverityDescription: zod.string().optional(),
				reason: zod.string().optional(),
				created: zod.string().datetime().optional(),
				modified: zod.string().datetime().optional(),
				validityPeriods: zod
					.array(
						zod.object({
							fromDate: zod.string().datetime().optional(),
							toDate: zod.string().datetime().optional(),
							isNow: zod.boolean().optional()
						})
					)
					.optional(),
				disruption: zod
					.object({
						category: zod
							.enum([
								'Undefined',
								'RealTime',
								'PlannedWork',
								'Information',
								'Event',
								'Crowding',
								'StatusAlert'
							])
							.optional(),
						type: zod.string().optional(),
						categoryDescription: zod.string().optional(),
						description: zod.string().optional(),
						summary: zod.string().optional(),
						additionalInfo: zod.string().optional(),
						created: zod.string().datetime().optional(),
						lastUpdate: zod.string().datetime().optional(),
						affectedRoutes: zod
							.array(
								zod.object({
									id: zod.string().optional(),
									lineId: zod.string().optional(),
									routeCode: zod.string().optional(),
									name: zod.string().optional(),
									lineString: zod.string().optional(),
									direction: zod.string().optional(),
									originationName: zod.string().optional(),
									destinationName: zod.string().optional(),
									via: zod
										.object({
											ordinal: zod.number().optional(),
											stopPoint: zod
												.object({
													naptanId: zod.string().optional(),
													platformName: zod.string().optional(),
													indicator: zod.string().optional(),
													stopLetter: zod.string().optional(),
													modes: zod.array(zod.string()).optional(),
													icsCode: zod.string().optional(),
													smsCode: zod.string().optional(),
													stopType: zod.string().optional(),
													stationNaptan: zod.string().optional(),
													accessibilitySummary: zod.string().optional(),
													hubNaptanCode: zod.string().optional(),
													lines: zod
														.array(
															zod.object({
																id: zod.string().optional(),
																name: zod.string().optional(),
																uri: zod.string().optional(),
																fullName: zod.string().optional(),
																type: zod.string().optional(),
																crowding: zod
																	.object({
																		passengerFlows: zod
																			.array(
																				zod.object({
																					timeSlice: zod.string().optional(),
																					value: zod.number().optional()
																				})
																			)
																			.optional(),
																		trainLoadings: zod
																			.array(
																				zod.object({
																					line: zod.string().optional(),
																					lineDirection: zod.string().optional(),
																					platformDirection: zod.string().optional(),
																					direction: zod.string().optional(),
																					naptanTo: zod.string().optional(),
																					timeSlice: zod.string().optional(),
																					value: zod.number().optional()
																				})
																			)
																			.optional()
																	})
																	.optional(),
																routeType: zod
																	.enum([
																		'Unknown',
																		'All',
																		'Cycle Superhighways',
																		'Quietways',
																		'Cycleways',
																		'Mini-Hollands',
																		'Central London Grid',
																		'Streetspace Route'
																	])
																	.optional(),
																status: zod
																	.enum([
																		'Unknown',
																		'All',
																		'Open',
																		'In Progress',
																		'Planned',
																		'Planned - Subject to feasibility and consultation.',
																		'Not Open'
																	])
																	.optional(),
																motType: zod.string().optional(),
																network: zod.string().optional()
															})
														)
														.optional(),
													lineGroup: zod
														.array(
															zod.object({
																naptanIdReference: zod.string().optional(),
																stationAtcoCode: zod.string().optional(),
																lineIdentifier: zod.array(zod.string()).optional()
															})
														)
														.optional(),
													lineModeGroups: zod
														.array(
															zod.object({
																modeName: zod.string().optional(),
																lineIdentifier: zod.array(zod.string()).optional()
															})
														)
														.optional(),
													fullName: zod.string().optional(),
													naptanMode: zod.string().optional(),
													status: zod.boolean().optional(),
													individualStopId: zod.string().optional(),
													id: zod.string().optional(),
													url: zod.string().optional(),
													commonName: zod.string().optional(),
													distance: zod.number().optional(),
													placeType: zod.string().optional(),
													additionalProperties: zod
														.array(
															zod.object({
																category: zod.string().optional(),
																key: zod.string().optional(),
																sourceSystemKey: zod.string().optional(),
																value: zod.string().optional(),
																modified: zod.string().datetime().optional()
															})
														)
														.optional(),
													children: zod
														.array(
															zod.object({
																id: zod.string().optional(),
																url: zod.string().optional(),
																commonName: zod.string().optional(),
																distance: zod.number().optional(),
																placeType: zod.string().optional(),
																additionalProperties: zod
																	.array(
																		zod.object({
																			category: zod.string().optional(),
																			key: zod.string().optional(),
																			sourceSystemKey: zod.string().optional(),
																			value: zod.string().optional(),
																			modified: zod.string().datetime().optional()
																		})
																	)
																	.optional(),
																children: zod.array(zod.any()).optional(),
																childrenUrls: zod.array(zod.string()).optional(),
																lat: zod.number().optional(),
																lon: zod.number().optional()
															})
														)
														.optional(),
													childrenUrls: zod.array(zod.string()).optional(),
													lat: zod.number().optional(),
													lon: zod.number().optional()
												})
												.optional()
										})
										.optional(),
									isEntireRouteSection: zod.boolean().optional(),
									validTo: zod.string().datetime().optional(),
									validFrom: zod.string().datetime().optional(),
									routeSectionNaptanEntrySequence: zod
										.array(
											zod.object({
												ordinal: zod.number().optional(),
												stopPoint: zod
													.object({
														naptanId: zod.string().optional(),
														platformName: zod.string().optional(),
														indicator: zod.string().optional(),
														stopLetter: zod.string().optional(),
														modes: zod.array(zod.string()).optional(),
														icsCode: zod.string().optional(),
														smsCode: zod.string().optional(),
														stopType: zod.string().optional(),
														stationNaptan: zod.string().optional(),
														accessibilitySummary: zod.string().optional(),
														hubNaptanCode: zod.string().optional(),
														lines: zod
															.array(
																zod.object({
																	id: zod.string().optional(),
																	name: zod.string().optional(),
																	uri: zod.string().optional(),
																	fullName: zod.string().optional(),
																	type: zod.string().optional(),
																	crowding: zod
																		.object({
																			passengerFlows: zod
																				.array(
																					zod.object({
																						timeSlice: zod.string().optional(),
																						value: zod.number().optional()
																					})
																				)
																				.optional(),
																			trainLoadings: zod
																				.array(
																					zod.object({
																						line: zod.string().optional(),
																						lineDirection: zod.string().optional(),
																						platformDirection: zod.string().optional(),
																						direction: zod.string().optional(),
																						naptanTo: zod.string().optional(),
																						timeSlice: zod.string().optional(),
																						value: zod.number().optional()
																					})
																				)
																				.optional()
																		})
																		.optional(),
																	routeType: zod
																		.enum([
																			'Unknown',
																			'All',
																			'Cycle Superhighways',
																			'Quietways',
																			'Cycleways',
																			'Mini-Hollands',
																			'Central London Grid',
																			'Streetspace Route'
																		])
																		.optional(),
																	status: zod
																		.enum([
																			'Unknown',
																			'All',
																			'Open',
																			'In Progress',
																			'Planned',
																			'Planned - Subject to feasibility and consultation.',
																			'Not Open'
																		])
																		.optional(),
																	motType: zod.string().optional(),
																	network: zod.string().optional()
																})
															)
															.optional(),
														lineGroup: zod
															.array(
																zod.object({
																	naptanIdReference: zod.string().optional(),
																	stationAtcoCode: zod.string().optional(),
																	lineIdentifier: zod.array(zod.string()).optional()
																})
															)
															.optional(),
														lineModeGroups: zod
															.array(
																zod.object({
																	modeName: zod.string().optional(),
																	lineIdentifier: zod.array(zod.string()).optional()
																})
															)
															.optional(),
														fullName: zod.string().optional(),
														naptanMode: zod.string().optional(),
														status: zod.boolean().optional(),
														individualStopId: zod.string().optional(),
														id: zod.string().optional(),
														url: zod.string().optional(),
														commonName: zod.string().optional(),
														distance: zod.number().optional(),
														placeType: zod.string().optional(),
														additionalProperties: zod
															.array(
																zod.object({
																	category: zod.string().optional(),
																	key: zod.string().optional(),
																	sourceSystemKey: zod.string().optional(),
																	value: zod.string().optional(),
																	modified: zod.string().datetime().optional()
																})
															)
															.optional(),
														children: zod
															.array(
																zod.object({
																	id: zod.string().optional(),
																	url: zod.string().optional(),
																	commonName: zod.string().optional(),
																	distance: zod.number().optional(),
																	placeType: zod.string().optional(),
																	additionalProperties: zod
																		.array(
																			zod.object({
																				category: zod.string().optional(),
																				key: zod.string().optional(),
																				sourceSystemKey: zod.string().optional(),
																				value: zod.string().optional(),
																				modified: zod.string().datetime().optional()
																			})
																		)
																		.optional(),
																	children: zod.array(zod.any()).optional(),
																	childrenUrls: zod.array(zod.string()).optional(),
																	lat: zod.number().optional(),
																	lon: zod.number().optional()
																})
															)
															.optional(),
														childrenUrls: zod.array(zod.string()).optional(),
														lat: zod.number().optional(),
														lon: zod.number().optional()
													})
													.optional()
											})
										)
										.optional()
								})
							)
							.optional(),
						affectedStops: zod
							.array(
								zod.object({
									naptanId: zod.string().optional(),
									platformName: zod.string().optional(),
									indicator: zod.string().optional(),
									stopLetter: zod.string().optional(),
									modes: zod.array(zod.string()).optional(),
									icsCode: zod.string().optional(),
									smsCode: zod.string().optional(),
									stopType: zod.string().optional(),
									stationNaptan: zod.string().optional(),
									accessibilitySummary: zod.string().optional(),
									hubNaptanCode: zod.string().optional(),
									lines: zod
										.array(
											zod.object({
												id: zod.string().optional(),
												name: zod.string().optional(),
												uri: zod.string().optional(),
												fullName: zod.string().optional(),
												type: zod.string().optional(),
												crowding: zod
													.object({
														passengerFlows: zod
															.array(
																zod.object({
																	timeSlice: zod.string().optional(),
																	value: zod.number().optional()
																})
															)
															.optional(),
														trainLoadings: zod
															.array(
																zod.object({
																	line: zod.string().optional(),
																	lineDirection: zod.string().optional(),
																	platformDirection: zod.string().optional(),
																	direction: zod.string().optional(),
																	naptanTo: zod.string().optional(),
																	timeSlice: zod.string().optional(),
																	value: zod.number().optional()
																})
															)
															.optional()
													})
													.optional(),
												routeType: zod
													.enum([
														'Unknown',
														'All',
														'Cycle Superhighways',
														'Quietways',
														'Cycleways',
														'Mini-Hollands',
														'Central London Grid',
														'Streetspace Route'
													])
													.optional(),
												status: zod
													.enum([
														'Unknown',
														'All',
														'Open',
														'In Progress',
														'Planned',
														'Planned - Subject to feasibility and consultation.',
														'Not Open'
													])
													.optional(),
												motType: zod.string().optional(),
												network: zod.string().optional()
											})
										)
										.optional(),
									lineGroup: zod
										.array(
											zod.object({
												naptanIdReference: zod.string().optional(),
												stationAtcoCode: zod.string().optional(),
												lineIdentifier: zod.array(zod.string()).optional()
											})
										)
										.optional(),
									lineModeGroups: zod
										.array(
											zod.object({
												modeName: zod.string().optional(),
												lineIdentifier: zod.array(zod.string()).optional()
											})
										)
										.optional(),
									fullName: zod.string().optional(),
									naptanMode: zod.string().optional(),
									status: zod.boolean().optional(),
									individualStopId: zod.string().optional(),
									id: zod.string().optional(),
									url: zod.string().optional(),
									commonName: zod.string().optional(),
									distance: zod.number().optional(),
									placeType: zod.string().optional(),
									additionalProperties: zod
										.array(
											zod.object({
												category: zod.string().optional(),
												key: zod.string().optional(),
												sourceSystemKey: zod.string().optional(),
												value: zod.string().optional(),
												modified: zod.string().datetime().optional()
											})
										)
										.optional(),
									children: zod
										.array(
											zod.object({
												id: zod.string().optional(),
												url: zod.string().optional(),
												commonName: zod.string().optional(),
												distance: zod.number().optional(),
												placeType: zod.string().optional(),
												additionalProperties: zod
													.array(
														zod.object({
															category: zod.string().optional(),
															key: zod.string().optional(),
															sourceSystemKey: zod.string().optional(),
															value: zod.string().optional(),
															modified: zod.string().datetime().optional()
														})
													)
													.optional(),
												children: zod.array(zod.any()).optional(),
												childrenUrls: zod.array(zod.string()).optional(),
												lat: zod.number().optional(),
												lon: zod.number().optional()
											})
										)
										.optional(),
									childrenUrls: zod.array(zod.string()).optional(),
									lat: zod.number().optional(),
									lon: zod.number().optional()
								})
							)
							.optional(),
						closureText: zod.string().optional()
					})
					.optional()
			})
		)
		.optional(),
	routeSections: zod
		.array(
			zod.object({
				routeCode: zod.string().optional(),
				name: zod.string().optional(),
				direction: zod.string().optional(),
				originationName: zod.string().optional(),
				destinationName: zod.string().optional(),
				originator: zod.string().optional(),
				destination: zod.string().optional(),
				serviceType: zod.string().optional(),
				validTo: zod.string().datetime().optional(),
				validFrom: zod.string().datetime().optional()
			})
		)
		.optional(),
	serviceTypes: zod
		.array(
			zod.object({
				name: zod.string().optional(),
				uri: zod.string().optional()
			})
		)
		.optional(),
	crowding: zod
		.object({
			passengerFlows: zod
				.array(
					zod.object({
						timeSlice: zod.string().optional(),
						value: zod.number().optional()
					})
				)
				.optional(),
			trainLoadings: zod
				.array(
					zod.object({
						line: zod.string().optional(),
						lineDirection: zod.string().optional(),
						platformDirection: zod.string().optional(),
						direction: zod.string().optional(),
						naptanTo: zod.string().optional(),
						timeSlice: zod.string().optional(),
						value: zod.number().optional()
					})
				)
				.optional()
		})
		.optional()
});
export const lineGetResponse = zod.array(lineGetResponseItem);

/**
 * @summary Gets lines that serve the given modes.
 */
export const lineGetByModeParams = zod.object({
	modes: zod.array(zod.string())
});

export const lineGetByModeResponseItem = zod.object({
	id: zod.string().optional(),
	name: zod.string().optional(),
	modeName: zod.string().optional(),
	disruptions: zod
		.array(
			zod.object({
				category: zod
					.enum([
						'Undefined',
						'RealTime',
						'PlannedWork',
						'Information',
						'Event',
						'Crowding',
						'StatusAlert'
					])
					.optional(),
				type: zod.string().optional(),
				categoryDescription: zod.string().optional(),
				description: zod.string().optional(),
				summary: zod.string().optional(),
				additionalInfo: zod.string().optional(),
				created: zod.string().datetime().optional(),
				lastUpdate: zod.string().datetime().optional(),
				affectedRoutes: zod
					.array(
						zod.object({
							id: zod.string().optional(),
							lineId: zod.string().optional(),
							routeCode: zod.string().optional(),
							name: zod.string().optional(),
							lineString: zod.string().optional(),
							direction: zod.string().optional(),
							originationName: zod.string().optional(),
							destinationName: zod.string().optional(),
							via: zod
								.object({
									ordinal: zod.number().optional(),
									stopPoint: zod
										.object({
											naptanId: zod.string().optional(),
											platformName: zod.string().optional(),
											indicator: zod.string().optional(),
											stopLetter: zod.string().optional(),
											modes: zod.array(zod.string()).optional(),
											icsCode: zod.string().optional(),
											smsCode: zod.string().optional(),
											stopType: zod.string().optional(),
											stationNaptan: zod.string().optional(),
											accessibilitySummary: zod.string().optional(),
											hubNaptanCode: zod.string().optional(),
											lines: zod
												.array(
													zod.object({
														id: zod.string().optional(),
														name: zod.string().optional(),
														uri: zod.string().optional(),
														fullName: zod.string().optional(),
														type: zod.string().optional(),
														crowding: zod
															.object({
																passengerFlows: zod
																	.array(
																		zod.object({
																			timeSlice: zod.string().optional(),
																			value: zod.number().optional()
																		})
																	)
																	.optional(),
																trainLoadings: zod
																	.array(
																		zod.object({
																			line: zod.string().optional(),
																			lineDirection: zod.string().optional(),
																			platformDirection: zod.string().optional(),
																			direction: zod.string().optional(),
																			naptanTo: zod.string().optional(),
																			timeSlice: zod.string().optional(),
																			value: zod.number().optional()
																		})
																	)
																	.optional()
															})
															.optional(),
														routeType: zod
															.enum([
																'Unknown',
																'All',
																'Cycle Superhighways',
																'Quietways',
																'Cycleways',
																'Mini-Hollands',
																'Central London Grid',
																'Streetspace Route'
															])
															.optional(),
														status: zod
															.enum([
																'Unknown',
																'All',
																'Open',
																'In Progress',
																'Planned',
																'Planned - Subject to feasibility and consultation.',
																'Not Open'
															])
															.optional(),
														motType: zod.string().optional(),
														network: zod.string().optional()
													})
												)
												.optional(),
											lineGroup: zod
												.array(
													zod.object({
														naptanIdReference: zod.string().optional(),
														stationAtcoCode: zod.string().optional(),
														lineIdentifier: zod.array(zod.string()).optional()
													})
												)
												.optional(),
											lineModeGroups: zod
												.array(
													zod.object({
														modeName: zod.string().optional(),
														lineIdentifier: zod.array(zod.string()).optional()
													})
												)
												.optional(),
											fullName: zod.string().optional(),
											naptanMode: zod.string().optional(),
											status: zod.boolean().optional(),
											individualStopId: zod.string().optional(),
											id: zod.string().optional(),
											url: zod.string().optional(),
											commonName: zod.string().optional(),
											distance: zod.number().optional(),
											placeType: zod.string().optional(),
											additionalProperties: zod
												.array(
													zod.object({
														category: zod.string().optional(),
														key: zod.string().optional(),
														sourceSystemKey: zod.string().optional(),
														value: zod.string().optional(),
														modified: zod.string().datetime().optional()
													})
												)
												.optional(),
											children: zod
												.array(
													zod.object({
														id: zod.string().optional(),
														url: zod.string().optional(),
														commonName: zod.string().optional(),
														distance: zod.number().optional(),
														placeType: zod.string().optional(),
														additionalProperties: zod
															.array(
																zod.object({
																	category: zod.string().optional(),
																	key: zod.string().optional(),
																	sourceSystemKey: zod.string().optional(),
																	value: zod.string().optional(),
																	modified: zod.string().datetime().optional()
																})
															)
															.optional(),
														children: zod.array(zod.any()).optional(),
														childrenUrls: zod.array(zod.string()).optional(),
														lat: zod.number().optional(),
														lon: zod.number().optional()
													})
												)
												.optional(),
											childrenUrls: zod.array(zod.string()).optional(),
											lat: zod.number().optional(),
											lon: zod.number().optional()
										})
										.optional()
								})
								.optional(),
							isEntireRouteSection: zod.boolean().optional(),
							validTo: zod.string().datetime().optional(),
							validFrom: zod.string().datetime().optional(),
							routeSectionNaptanEntrySequence: zod
								.array(
									zod.object({
										ordinal: zod.number().optional(),
										stopPoint: zod
											.object({
												naptanId: zod.string().optional(),
												platformName: zod.string().optional(),
												indicator: zod.string().optional(),
												stopLetter: zod.string().optional(),
												modes: zod.array(zod.string()).optional(),
												icsCode: zod.string().optional(),
												smsCode: zod.string().optional(),
												stopType: zod.string().optional(),
												stationNaptan: zod.string().optional(),
												accessibilitySummary: zod.string().optional(),
												hubNaptanCode: zod.string().optional(),
												lines: zod
													.array(
														zod.object({
															id: zod.string().optional(),
															name: zod.string().optional(),
															uri: zod.string().optional(),
															fullName: zod.string().optional(),
															type: zod.string().optional(),
															crowding: zod
																.object({
																	passengerFlows: zod
																		.array(
																			zod.object({
																				timeSlice: zod.string().optional(),
																				value: zod.number().optional()
																			})
																		)
																		.optional(),
																	trainLoadings: zod
																		.array(
																			zod.object({
																				line: zod.string().optional(),
																				lineDirection: zod.string().optional(),
																				platformDirection: zod.string().optional(),
																				direction: zod.string().optional(),
																				naptanTo: zod.string().optional(),
																				timeSlice: zod.string().optional(),
																				value: zod.number().optional()
																			})
																		)
																		.optional()
																})
																.optional(),
															routeType: zod
																.enum([
																	'Unknown',
																	'All',
																	'Cycle Superhighways',
																	'Quietways',
																	'Cycleways',
																	'Mini-Hollands',
																	'Central London Grid',
																	'Streetspace Route'
																])
																.optional(),
															status: zod
																.enum([
																	'Unknown',
																	'All',
																	'Open',
																	'In Progress',
																	'Planned',
																	'Planned - Subject to feasibility and consultation.',
																	'Not Open'
																])
																.optional(),
															motType: zod.string().optional(),
															network: zod.string().optional()
														})
													)
													.optional(),
												lineGroup: zod
													.array(
														zod.object({
															naptanIdReference: zod.string().optional(),
															stationAtcoCode: zod.string().optional(),
															lineIdentifier: zod.array(zod.string()).optional()
														})
													)
													.optional(),
												lineModeGroups: zod
													.array(
														zod.object({
															modeName: zod.string().optional(),
															lineIdentifier: zod.array(zod.string()).optional()
														})
													)
													.optional(),
												fullName: zod.string().optional(),
												naptanMode: zod.string().optional(),
												status: zod.boolean().optional(),
												individualStopId: zod.string().optional(),
												id: zod.string().optional(),
												url: zod.string().optional(),
												commonName: zod.string().optional(),
												distance: zod.number().optional(),
												placeType: zod.string().optional(),
												additionalProperties: zod
													.array(
														zod.object({
															category: zod.string().optional(),
															key: zod.string().optional(),
															sourceSystemKey: zod.string().optional(),
															value: zod.string().optional(),
															modified: zod.string().datetime().optional()
														})
													)
													.optional(),
												children: zod
													.array(
														zod.object({
															id: zod.string().optional(),
															url: zod.string().optional(),
															commonName: zod.string().optional(),
															distance: zod.number().optional(),
															placeType: zod.string().optional(),
															additionalProperties: zod
																.array(
																	zod.object({
																		category: zod.string().optional(),
																		key: zod.string().optional(),
																		sourceSystemKey: zod.string().optional(),
																		value: zod.string().optional(),
																		modified: zod.string().datetime().optional()
																	})
																)
																.optional(),
															children: zod.array(zod.any()).optional(),
															childrenUrls: zod.array(zod.string()).optional(),
															lat: zod.number().optional(),
															lon: zod.number().optional()
														})
													)
													.optional(),
												childrenUrls: zod.array(zod.string()).optional(),
												lat: zod.number().optional(),
												lon: zod.number().optional()
											})
											.optional()
									})
								)
								.optional()
						})
					)
					.optional(),
				affectedStops: zod
					.array(
						zod.object({
							naptanId: zod.string().optional(),
							platformName: zod.string().optional(),
							indicator: zod.string().optional(),
							stopLetter: zod.string().optional(),
							modes: zod.array(zod.string()).optional(),
							icsCode: zod.string().optional(),
							smsCode: zod.string().optional(),
							stopType: zod.string().optional(),
							stationNaptan: zod.string().optional(),
							accessibilitySummary: zod.string().optional(),
							hubNaptanCode: zod.string().optional(),
							lines: zod
								.array(
									zod.object({
										id: zod.string().optional(),
										name: zod.string().optional(),
										uri: zod.string().optional(),
										fullName: zod.string().optional(),
										type: zod.string().optional(),
										crowding: zod
											.object({
												passengerFlows: zod
													.array(
														zod.object({
															timeSlice: zod.string().optional(),
															value: zod.number().optional()
														})
													)
													.optional(),
												trainLoadings: zod
													.array(
														zod.object({
															line: zod.string().optional(),
															lineDirection: zod.string().optional(),
															platformDirection: zod.string().optional(),
															direction: zod.string().optional(),
															naptanTo: zod.string().optional(),
															timeSlice: zod.string().optional(),
															value: zod.number().optional()
														})
													)
													.optional()
											})
											.optional(),
										routeType: zod
											.enum([
												'Unknown',
												'All',
												'Cycle Superhighways',
												'Quietways',
												'Cycleways',
												'Mini-Hollands',
												'Central London Grid',
												'Streetspace Route'
											])
											.optional(),
										status: zod
											.enum([
												'Unknown',
												'All',
												'Open',
												'In Progress',
												'Planned',
												'Planned - Subject to feasibility and consultation.',
												'Not Open'
											])
											.optional(),
										motType: zod.string().optional(),
										network: zod.string().optional()
									})
								)
								.optional(),
							lineGroup: zod
								.array(
									zod.object({
										naptanIdReference: zod.string().optional(),
										stationAtcoCode: zod.string().optional(),
										lineIdentifier: zod.array(zod.string()).optional()
									})
								)
								.optional(),
							lineModeGroups: zod
								.array(
									zod.object({
										modeName: zod.string().optional(),
										lineIdentifier: zod.array(zod.string()).optional()
									})
								)
								.optional(),
							fullName: zod.string().optional(),
							naptanMode: zod.string().optional(),
							status: zod.boolean().optional(),
							individualStopId: zod.string().optional(),
							id: zod.string().optional(),
							url: zod.string().optional(),
							commonName: zod.string().optional(),
							distance: zod.number().optional(),
							placeType: zod.string().optional(),
							additionalProperties: zod
								.array(
									zod.object({
										category: zod.string().optional(),
										key: zod.string().optional(),
										sourceSystemKey: zod.string().optional(),
										value: zod.string().optional(),
										modified: zod.string().datetime().optional()
									})
								)
								.optional(),
							children: zod
								.array(
									zod.object({
										id: zod.string().optional(),
										url: zod.string().optional(),
										commonName: zod.string().optional(),
										distance: zod.number().optional(),
										placeType: zod.string().optional(),
										additionalProperties: zod
											.array(
												zod.object({
													category: zod.string().optional(),
													key: zod.string().optional(),
													sourceSystemKey: zod.string().optional(),
													value: zod.string().optional(),
													modified: zod.string().datetime().optional()
												})
											)
											.optional(),
										children: zod.array(zod.any()).optional(),
										childrenUrls: zod.array(zod.string()).optional(),
										lat: zod.number().optional(),
										lon: zod.number().optional()
									})
								)
								.optional(),
							childrenUrls: zod.array(zod.string()).optional(),
							lat: zod.number().optional(),
							lon: zod.number().optional()
						})
					)
					.optional(),
				closureText: zod.string().optional()
			})
		)
		.optional(),
	created: zod.string().datetime().optional(),
	modified: zod.string().datetime().optional(),
	lineStatuses: zod
		.array(
			zod.object({
				id: zod.number().optional(),
				lineId: zod.string().optional(),
				statusSeverity: zod.number().optional(),
				statusSeverityDescription: zod.string().optional(),
				reason: zod.string().optional(),
				created: zod.string().datetime().optional(),
				modified: zod.string().datetime().optional(),
				validityPeriods: zod
					.array(
						zod.object({
							fromDate: zod.string().datetime().optional(),
							toDate: zod.string().datetime().optional(),
							isNow: zod.boolean().optional()
						})
					)
					.optional(),
				disruption: zod
					.object({
						category: zod
							.enum([
								'Undefined',
								'RealTime',
								'PlannedWork',
								'Information',
								'Event',
								'Crowding',
								'StatusAlert'
							])
							.optional(),
						type: zod.string().optional(),
						categoryDescription: zod.string().optional(),
						description: zod.string().optional(),
						summary: zod.string().optional(),
						additionalInfo: zod.string().optional(),
						created: zod.string().datetime().optional(),
						lastUpdate: zod.string().datetime().optional(),
						affectedRoutes: zod
							.array(
								zod.object({
									id: zod.string().optional(),
									lineId: zod.string().optional(),
									routeCode: zod.string().optional(),
									name: zod.string().optional(),
									lineString: zod.string().optional(),
									direction: zod.string().optional(),
									originationName: zod.string().optional(),
									destinationName: zod.string().optional(),
									via: zod
										.object({
											ordinal: zod.number().optional(),
											stopPoint: zod
												.object({
													naptanId: zod.string().optional(),
													platformName: zod.string().optional(),
													indicator: zod.string().optional(),
													stopLetter: zod.string().optional(),
													modes: zod.array(zod.string()).optional(),
													icsCode: zod.string().optional(),
													smsCode: zod.string().optional(),
													stopType: zod.string().optional(),
													stationNaptan: zod.string().optional(),
													accessibilitySummary: zod.string().optional(),
													hubNaptanCode: zod.string().optional(),
													lines: zod
														.array(
															zod.object({
																id: zod.string().optional(),
																name: zod.string().optional(),
																uri: zod.string().optional(),
																fullName: zod.string().optional(),
																type: zod.string().optional(),
																crowding: zod
																	.object({
																		passengerFlows: zod
																			.array(
																				zod.object({
																					timeSlice: zod.string().optional(),
																					value: zod.number().optional()
																				})
																			)
																			.optional(),
																		trainLoadings: zod
																			.array(
																				zod.object({
																					line: zod.string().optional(),
																					lineDirection: zod.string().optional(),
																					platformDirection: zod.string().optional(),
																					direction: zod.string().optional(),
																					naptanTo: zod.string().optional(),
																					timeSlice: zod.string().optional(),
																					value: zod.number().optional()
																				})
																			)
																			.optional()
																	})
																	.optional(),
																routeType: zod
																	.enum([
																		'Unknown',
																		'All',
																		'Cycle Superhighways',
																		'Quietways',
																		'Cycleways',
																		'Mini-Hollands',
																		'Central London Grid',
																		'Streetspace Route'
																	])
																	.optional(),
																status: zod
																	.enum([
																		'Unknown',
																		'All',
																		'Open',
																		'In Progress',
																		'Planned',
																		'Planned - Subject to feasibility and consultation.',
																		'Not Open'
																	])
																	.optional(),
																motType: zod.string().optional(),
																network: zod.string().optional()
															})
														)
														.optional(),
													lineGroup: zod
														.array(
															zod.object({
																naptanIdReference: zod.string().optional(),
																stationAtcoCode: zod.string().optional(),
																lineIdentifier: zod.array(zod.string()).optional()
															})
														)
														.optional(),
													lineModeGroups: zod
														.array(
															zod.object({
																modeName: zod.string().optional(),
																lineIdentifier: zod.array(zod.string()).optional()
															})
														)
														.optional(),
													fullName: zod.string().optional(),
													naptanMode: zod.string().optional(),
													status: zod.boolean().optional(),
													individualStopId: zod.string().optional(),
													id: zod.string().optional(),
													url: zod.string().optional(),
													commonName: zod.string().optional(),
													distance: zod.number().optional(),
													placeType: zod.string().optional(),
													additionalProperties: zod
														.array(
															zod.object({
																category: zod.string().optional(),
																key: zod.string().optional(),
																sourceSystemKey: zod.string().optional(),
																value: zod.string().optional(),
																modified: zod.string().datetime().optional()
															})
														)
														.optional(),
													children: zod
														.array(
															zod.object({
																id: zod.string().optional(),
																url: zod.string().optional(),
																commonName: zod.string().optional(),
																distance: zod.number().optional(),
																placeType: zod.string().optional(),
																additionalProperties: zod
																	.array(
																		zod.object({
																			category: zod.string().optional(),
																			key: zod.string().optional(),
																			sourceSystemKey: zod.string().optional(),
																			value: zod.string().optional(),
																			modified: zod.string().datetime().optional()
																		})
																	)
																	.optional(),
																children: zod.array(zod.any()).optional(),
																childrenUrls: zod.array(zod.string()).optional(),
																lat: zod.number().optional(),
																lon: zod.number().optional()
															})
														)
														.optional(),
													childrenUrls: zod.array(zod.string()).optional(),
													lat: zod.number().optional(),
													lon: zod.number().optional()
												})
												.optional()
										})
										.optional(),
									isEntireRouteSection: zod.boolean().optional(),
									validTo: zod.string().datetime().optional(),
									validFrom: zod.string().datetime().optional(),
									routeSectionNaptanEntrySequence: zod
										.array(
											zod.object({
												ordinal: zod.number().optional(),
												stopPoint: zod
													.object({
														naptanId: zod.string().optional(),
														platformName: zod.string().optional(),
														indicator: zod.string().optional(),
														stopLetter: zod.string().optional(),
														modes: zod.array(zod.string()).optional(),
														icsCode: zod.string().optional(),
														smsCode: zod.string().optional(),
														stopType: zod.string().optional(),
														stationNaptan: zod.string().optional(),
														accessibilitySummary: zod.string().optional(),
														hubNaptanCode: zod.string().optional(),
														lines: zod
															.array(
																zod.object({
																	id: zod.string().optional(),
																	name: zod.string().optional(),
																	uri: zod.string().optional(),
																	fullName: zod.string().optional(),
																	type: zod.string().optional(),
																	crowding: zod
																		.object({
																			passengerFlows: zod
																				.array(
																					zod.object({
																						timeSlice: zod.string().optional(),
																						value: zod.number().optional()
																					})
																				)
																				.optional(),
																			trainLoadings: zod
																				.array(
																					zod.object({
																						line: zod.string().optional(),
																						lineDirection: zod.string().optional(),
																						platformDirection: zod.string().optional(),
																						direction: zod.string().optional(),
																						naptanTo: zod.string().optional(),
																						timeSlice: zod.string().optional(),
																						value: zod.number().optional()
																					})
																				)
																				.optional()
																		})
																		.optional(),
																	routeType: zod
																		.enum([
																			'Unknown',
																			'All',
																			'Cycle Superhighways',
																			'Quietways',
																			'Cycleways',
																			'Mini-Hollands',
																			'Central London Grid',
																			'Streetspace Route'
																		])
																		.optional(),
																	status: zod
																		.enum([
																			'Unknown',
																			'All',
																			'Open',
																			'In Progress',
																			'Planned',
																			'Planned - Subject to feasibility and consultation.',
																			'Not Open'
																		])
																		.optional(),
																	motType: zod.string().optional(),
																	network: zod.string().optional()
																})
															)
															.optional(),
														lineGroup: zod
															.array(
																zod.object({
																	naptanIdReference: zod.string().optional(),
																	stationAtcoCode: zod.string().optional(),
																	lineIdentifier: zod.array(zod.string()).optional()
																})
															)
															.optional(),
														lineModeGroups: zod
															.array(
																zod.object({
																	modeName: zod.string().optional(),
																	lineIdentifier: zod.array(zod.string()).optional()
																})
															)
															.optional(),
														fullName: zod.string().optional(),
														naptanMode: zod.string().optional(),
														status: zod.boolean().optional(),
														individualStopId: zod.string().optional(),
														id: zod.string().optional(),
														url: zod.string().optional(),
														commonName: zod.string().optional(),
														distance: zod.number().optional(),
														placeType: zod.string().optional(),
														additionalProperties: zod
															.array(
																zod.object({
																	category: zod.string().optional(),
																	key: zod.string().optional(),
																	sourceSystemKey: zod.string().optional(),
																	value: zod.string().optional(),
																	modified: zod.string().datetime().optional()
																})
															)
															.optional(),
														children: zod
															.array(
																zod.object({
																	id: zod.string().optional(),
																	url: zod.string().optional(),
																	commonName: zod.string().optional(),
																	distance: zod.number().optional(),
																	placeType: zod.string().optional(),
																	additionalProperties: zod
																		.array(
																			zod.object({
																				category: zod.string().optional(),
																				key: zod.string().optional(),
																				sourceSystemKey: zod.string().optional(),
																				value: zod.string().optional(),
																				modified: zod.string().datetime().optional()
																			})
																		)
																		.optional(),
																	children: zod.array(zod.any()).optional(),
																	childrenUrls: zod.array(zod.string()).optional(),
																	lat: zod.number().optional(),
																	lon: zod.number().optional()
																})
															)
															.optional(),
														childrenUrls: zod.array(zod.string()).optional(),
														lat: zod.number().optional(),
														lon: zod.number().optional()
													})
													.optional()
											})
										)
										.optional()
								})
							)
							.optional(),
						affectedStops: zod
							.array(
								zod.object({
									naptanId: zod.string().optional(),
									platformName: zod.string().optional(),
									indicator: zod.string().optional(),
									stopLetter: zod.string().optional(),
									modes: zod.array(zod.string()).optional(),
									icsCode: zod.string().optional(),
									smsCode: zod.string().optional(),
									stopType: zod.string().optional(),
									stationNaptan: zod.string().optional(),
									accessibilitySummary: zod.string().optional(),
									hubNaptanCode: zod.string().optional(),
									lines: zod
										.array(
											zod.object({
												id: zod.string().optional(),
												name: zod.string().optional(),
												uri: zod.string().optional(),
												fullName: zod.string().optional(),
												type: zod.string().optional(),
												crowding: zod
													.object({
														passengerFlows: zod
															.array(
																zod.object({
																	timeSlice: zod.string().optional(),
																	value: zod.number().optional()
																})
															)
															.optional(),
														trainLoadings: zod
															.array(
																zod.object({
																	line: zod.string().optional(),
																	lineDirection: zod.string().optional(),
																	platformDirection: zod.string().optional(),
																	direction: zod.string().optional(),
																	naptanTo: zod.string().optional(),
																	timeSlice: zod.string().optional(),
																	value: zod.number().optional()
																})
															)
															.optional()
													})
													.optional(),
												routeType: zod
													.enum([
														'Unknown',
														'All',
														'Cycle Superhighways',
														'Quietways',
														'Cycleways',
														'Mini-Hollands',
														'Central London Grid',
														'Streetspace Route'
													])
													.optional(),
												status: zod
													.enum([
														'Unknown',
														'All',
														'Open',
														'In Progress',
														'Planned',
														'Planned - Subject to feasibility and consultation.',
														'Not Open'
													])
													.optional(),
												motType: zod.string().optional(),
												network: zod.string().optional()
											})
										)
										.optional(),
									lineGroup: zod
										.array(
											zod.object({
												naptanIdReference: zod.string().optional(),
												stationAtcoCode: zod.string().optional(),
												lineIdentifier: zod.array(zod.string()).optional()
											})
										)
										.optional(),
									lineModeGroups: zod
										.array(
											zod.object({
												modeName: zod.string().optional(),
												lineIdentifier: zod.array(zod.string()).optional()
											})
										)
										.optional(),
									fullName: zod.string().optional(),
									naptanMode: zod.string().optional(),
									status: zod.boolean().optional(),
									individualStopId: zod.string().optional(),
									id: zod.string().optional(),
									url: zod.string().optional(),
									commonName: zod.string().optional(),
									distance: zod.number().optional(),
									placeType: zod.string().optional(),
									additionalProperties: zod
										.array(
											zod.object({
												category: zod.string().optional(),
												key: zod.string().optional(),
												sourceSystemKey: zod.string().optional(),
												value: zod.string().optional(),
												modified: zod.string().datetime().optional()
											})
										)
										.optional(),
									children: zod
										.array(
											zod.object({
												id: zod.string().optional(),
												url: zod.string().optional(),
												commonName: zod.string().optional(),
												distance: zod.number().optional(),
												placeType: zod.string().optional(),
												additionalProperties: zod
													.array(
														zod.object({
															category: zod.string().optional(),
															key: zod.string().optional(),
															sourceSystemKey: zod.string().optional(),
															value: zod.string().optional(),
															modified: zod.string().datetime().optional()
														})
													)
													.optional(),
												children: zod.array(zod.any()).optional(),
												childrenUrls: zod.array(zod.string()).optional(),
												lat: zod.number().optional(),
												lon: zod.number().optional()
											})
										)
										.optional(),
									childrenUrls: zod.array(zod.string()).optional(),
									lat: zod.number().optional(),
									lon: zod.number().optional()
								})
							)
							.optional(),
						closureText: zod.string().optional()
					})
					.optional()
			})
		)
		.optional(),
	routeSections: zod
		.array(
			zod.object({
				routeCode: zod.string().optional(),
				name: zod.string().optional(),
				direction: zod.string().optional(),
				originationName: zod.string().optional(),
				destinationName: zod.string().optional(),
				originator: zod.string().optional(),
				destination: zod.string().optional(),
				serviceType: zod.string().optional(),
				validTo: zod.string().datetime().optional(),
				validFrom: zod.string().datetime().optional()
			})
		)
		.optional(),
	serviceTypes: zod
		.array(
			zod.object({
				name: zod.string().optional(),
				uri: zod.string().optional()
			})
		)
		.optional(),
	crowding: zod
		.object({
			passengerFlows: zod
				.array(
					zod.object({
						timeSlice: zod.string().optional(),
						value: zod.number().optional()
					})
				)
				.optional(),
			trainLoadings: zod
				.array(
					zod.object({
						line: zod.string().optional(),
						lineDirection: zod.string().optional(),
						platformDirection: zod.string().optional(),
						direction: zod.string().optional(),
						naptanTo: zod.string().optional(),
						timeSlice: zod.string().optional(),
						value: zod.number().optional()
					})
				)
				.optional()
		})
		.optional()
});
export const lineGetByModeResponse = zod.array(lineGetByModeResponseItem);

/**
 * @summary Get all valid routes for all lines, including the name and id of the originating and terminating stops for each route.
 */
export const lineRouteQueryParams = zod.object({
	serviceTypes: zod.array(zod.enum(['Regular', 'Night'])).optional()
});

export const lineRouteResponseItem = zod.object({
	id: zod.string().optional(),
	name: zod.string().optional(),
	modeName: zod.string().optional(),
	disruptions: zod
		.array(
			zod.object({
				category: zod
					.enum([
						'Undefined',
						'RealTime',
						'PlannedWork',
						'Information',
						'Event',
						'Crowding',
						'StatusAlert'
					])
					.optional(),
				type: zod.string().optional(),
				categoryDescription: zod.string().optional(),
				description: zod.string().optional(),
				summary: zod.string().optional(),
				additionalInfo: zod.string().optional(),
				created: zod.string().datetime().optional(),
				lastUpdate: zod.string().datetime().optional(),
				affectedRoutes: zod
					.array(
						zod.object({
							id: zod.string().optional(),
							lineId: zod.string().optional(),
							routeCode: zod.string().optional(),
							name: zod.string().optional(),
							lineString: zod.string().optional(),
							direction: zod.string().optional(),
							originationName: zod.string().optional(),
							destinationName: zod.string().optional(),
							via: zod
								.object({
									ordinal: zod.number().optional(),
									stopPoint: zod
										.object({
											naptanId: zod.string().optional(),
											platformName: zod.string().optional(),
											indicator: zod.string().optional(),
											stopLetter: zod.string().optional(),
											modes: zod.array(zod.string()).optional(),
											icsCode: zod.string().optional(),
											smsCode: zod.string().optional(),
											stopType: zod.string().optional(),
											stationNaptan: zod.string().optional(),
											accessibilitySummary: zod.string().optional(),
											hubNaptanCode: zod.string().optional(),
											lines: zod
												.array(
													zod.object({
														id: zod.string().optional(),
														name: zod.string().optional(),
														uri: zod.string().optional(),
														fullName: zod.string().optional(),
														type: zod.string().optional(),
														crowding: zod
															.object({
																passengerFlows: zod
																	.array(
																		zod.object({
																			timeSlice: zod.string().optional(),
																			value: zod.number().optional()
																		})
																	)
																	.optional(),
																trainLoadings: zod
																	.array(
																		zod.object({
																			line: zod.string().optional(),
																			lineDirection: zod.string().optional(),
																			platformDirection: zod.string().optional(),
																			direction: zod.string().optional(),
																			naptanTo: zod.string().optional(),
																			timeSlice: zod.string().optional(),
																			value: zod.number().optional()
																		})
																	)
																	.optional()
															})
															.optional(),
														routeType: zod
															.enum([
																'Unknown',
																'All',
																'Cycle Superhighways',
																'Quietways',
																'Cycleways',
																'Mini-Hollands',
																'Central London Grid',
																'Streetspace Route'
															])
															.optional(),
														status: zod
															.enum([
																'Unknown',
																'All',
																'Open',
																'In Progress',
																'Planned',
																'Planned - Subject to feasibility and consultation.',
																'Not Open'
															])
															.optional(),
														motType: zod.string().optional(),
														network: zod.string().optional()
													})
												)
												.optional(),
											lineGroup: zod
												.array(
													zod.object({
														naptanIdReference: zod.string().optional(),
														stationAtcoCode: zod.string().optional(),
														lineIdentifier: zod.array(zod.string()).optional()
													})
												)
												.optional(),
											lineModeGroups: zod
												.array(
													zod.object({
														modeName: zod.string().optional(),
														lineIdentifier: zod.array(zod.string()).optional()
													})
												)
												.optional(),
											fullName: zod.string().optional(),
											naptanMode: zod.string().optional(),
											status: zod.boolean().optional(),
											individualStopId: zod.string().optional(),
											id: zod.string().optional(),
											url: zod.string().optional(),
											commonName: zod.string().optional(),
											distance: zod.number().optional(),
											placeType: zod.string().optional(),
											additionalProperties: zod
												.array(
													zod.object({
														category: zod.string().optional(),
														key: zod.string().optional(),
														sourceSystemKey: zod.string().optional(),
														value: zod.string().optional(),
														modified: zod.string().datetime().optional()
													})
												)
												.optional(),
											children: zod
												.array(
													zod.object({
														id: zod.string().optional(),
														url: zod.string().optional(),
														commonName: zod.string().optional(),
														distance: zod.number().optional(),
														placeType: zod.string().optional(),
														additionalProperties: zod
															.array(
																zod.object({
																	category: zod.string().optional(),
																	key: zod.string().optional(),
																	sourceSystemKey: zod.string().optional(),
																	value: zod.string().optional(),
																	modified: zod.string().datetime().optional()
																})
															)
															.optional(),
														children: zod.array(zod.any()).optional(),
														childrenUrls: zod.array(zod.string()).optional(),
														lat: zod.number().optional(),
														lon: zod.number().optional()
													})
												)
												.optional(),
											childrenUrls: zod.array(zod.string()).optional(),
											lat: zod.number().optional(),
											lon: zod.number().optional()
										})
										.optional()
								})
								.optional(),
							isEntireRouteSection: zod.boolean().optional(),
							validTo: zod.string().datetime().optional(),
							validFrom: zod.string().datetime().optional(),
							routeSectionNaptanEntrySequence: zod
								.array(
									zod.object({
										ordinal: zod.number().optional(),
										stopPoint: zod
											.object({
												naptanId: zod.string().optional(),
												platformName: zod.string().optional(),
												indicator: zod.string().optional(),
												stopLetter: zod.string().optional(),
												modes: zod.array(zod.string()).optional(),
												icsCode: zod.string().optional(),
												smsCode: zod.string().optional(),
												stopType: zod.string().optional(),
												stationNaptan: zod.string().optional(),
												accessibilitySummary: zod.string().optional(),
												hubNaptanCode: zod.string().optional(),
												lines: zod
													.array(
														zod.object({
															id: zod.string().optional(),
															name: zod.string().optional(),
															uri: zod.string().optional(),
															fullName: zod.string().optional(),
															type: zod.string().optional(),
															crowding: zod
																.object({
																	passengerFlows: zod
																		.array(
																			zod.object({
																				timeSlice: zod.string().optional(),
																				value: zod.number().optional()
																			})
																		)
																		.optional(),
																	trainLoadings: zod
																		.array(
																			zod.object({
																				line: zod.string().optional(),
																				lineDirection: zod.string().optional(),
																				platformDirection: zod.string().optional(),
																				direction: zod.string().optional(),
																				naptanTo: zod.string().optional(),
																				timeSlice: zod.string().optional(),
																				value: zod.number().optional()
																			})
																		)
																		.optional()
																})
																.optional(),
															routeType: zod
																.enum([
																	'Unknown',
																	'All',
																	'Cycle Superhighways',
																	'Quietways',
																	'Cycleways',
																	'Mini-Hollands',
																	'Central London Grid',
																	'Streetspace Route'
																])
																.optional(),
															status: zod
																.enum([
																	'Unknown',
																	'All',
																	'Open',
																	'In Progress',
																	'Planned',
																	'Planned - Subject to feasibility and consultation.',
																	'Not Open'
																])
																.optional(),
															motType: zod.string().optional(),
															network: zod.string().optional()
														})
													)
													.optional(),
												lineGroup: zod
													.array(
														zod.object({
															naptanIdReference: zod.string().optional(),
															stationAtcoCode: zod.string().optional(),
															lineIdentifier: zod.array(zod.string()).optional()
														})
													)
													.optional(),
												lineModeGroups: zod
													.array(
														zod.object({
															modeName: zod.string().optional(),
															lineIdentifier: zod.array(zod.string()).optional()
														})
													)
													.optional(),
												fullName: zod.string().optional(),
												naptanMode: zod.string().optional(),
												status: zod.boolean().optional(),
												individualStopId: zod.string().optional(),
												id: zod.string().optional(),
												url: zod.string().optional(),
												commonName: zod.string().optional(),
												distance: zod.number().optional(),
												placeType: zod.string().optional(),
												additionalProperties: zod
													.array(
														zod.object({
															category: zod.string().optional(),
															key: zod.string().optional(),
															sourceSystemKey: zod.string().optional(),
															value: zod.string().optional(),
															modified: zod.string().datetime().optional()
														})
													)
													.optional(),
												children: zod
													.array(
														zod.object({
															id: zod.string().optional(),
															url: zod.string().optional(),
															commonName: zod.string().optional(),
															distance: zod.number().optional(),
															placeType: zod.string().optional(),
															additionalProperties: zod
																.array(
																	zod.object({
																		category: zod.string().optional(),
																		key: zod.string().optional(),
																		sourceSystemKey: zod.string().optional(),
																		value: zod.string().optional(),
																		modified: zod.string().datetime().optional()
																	})
																)
																.optional(),
															children: zod.array(zod.any()).optional(),
															childrenUrls: zod.array(zod.string()).optional(),
															lat: zod.number().optional(),
															lon: zod.number().optional()
														})
													)
													.optional(),
												childrenUrls: zod.array(zod.string()).optional(),
												lat: zod.number().optional(),
												lon: zod.number().optional()
											})
											.optional()
									})
								)
								.optional()
						})
					)
					.optional(),
				affectedStops: zod
					.array(
						zod.object({
							naptanId: zod.string().optional(),
							platformName: zod.string().optional(),
							indicator: zod.string().optional(),
							stopLetter: zod.string().optional(),
							modes: zod.array(zod.string()).optional(),
							icsCode: zod.string().optional(),
							smsCode: zod.string().optional(),
							stopType: zod.string().optional(),
							stationNaptan: zod.string().optional(),
							accessibilitySummary: zod.string().optional(),
							hubNaptanCode: zod.string().optional(),
							lines: zod
								.array(
									zod.object({
										id: zod.string().optional(),
										name: zod.string().optional(),
										uri: zod.string().optional(),
										fullName: zod.string().optional(),
										type: zod.string().optional(),
										crowding: zod
											.object({
												passengerFlows: zod
													.array(
														zod.object({
															timeSlice: zod.string().optional(),
															value: zod.number().optional()
														})
													)
													.optional(),
												trainLoadings: zod
													.array(
														zod.object({
															line: zod.string().optional(),
															lineDirection: zod.string().optional(),
															platformDirection: zod.string().optional(),
															direction: zod.string().optional(),
															naptanTo: zod.string().optional(),
															timeSlice: zod.string().optional(),
															value: zod.number().optional()
														})
													)
													.optional()
											})
											.optional(),
										routeType: zod
											.enum([
												'Unknown',
												'All',
												'Cycle Superhighways',
												'Quietways',
												'Cycleways',
												'Mini-Hollands',
												'Central London Grid',
												'Streetspace Route'
											])
											.optional(),
										status: zod
											.enum([
												'Unknown',
												'All',
												'Open',
												'In Progress',
												'Planned',
												'Planned - Subject to feasibility and consultation.',
												'Not Open'
											])
											.optional(),
										motType: zod.string().optional(),
										network: zod.string().optional()
									})
								)
								.optional(),
							lineGroup: zod
								.array(
									zod.object({
										naptanIdReference: zod.string().optional(),
										stationAtcoCode: zod.string().optional(),
										lineIdentifier: zod.array(zod.string()).optional()
									})
								)
								.optional(),
							lineModeGroups: zod
								.array(
									zod.object({
										modeName: zod.string().optional(),
										lineIdentifier: zod.array(zod.string()).optional()
									})
								)
								.optional(),
							fullName: zod.string().optional(),
							naptanMode: zod.string().optional(),
							status: zod.boolean().optional(),
							individualStopId: zod.string().optional(),
							id: zod.string().optional(),
							url: zod.string().optional(),
							commonName: zod.string().optional(),
							distance: zod.number().optional(),
							placeType: zod.string().optional(),
							additionalProperties: zod
								.array(
									zod.object({
										category: zod.string().optional(),
										key: zod.string().optional(),
										sourceSystemKey: zod.string().optional(),
										value: zod.string().optional(),
										modified: zod.string().datetime().optional()
									})
								)
								.optional(),
							children: zod
								.array(
									zod.object({
										id: zod.string().optional(),
										url: zod.string().optional(),
										commonName: zod.string().optional(),
										distance: zod.number().optional(),
										placeType: zod.string().optional(),
										additionalProperties: zod
											.array(
												zod.object({
													category: zod.string().optional(),
													key: zod.string().optional(),
													sourceSystemKey: zod.string().optional(),
													value: zod.string().optional(),
													modified: zod.string().datetime().optional()
												})
											)
											.optional(),
										children: zod.array(zod.any()).optional(),
										childrenUrls: zod.array(zod.string()).optional(),
										lat: zod.number().optional(),
										lon: zod.number().optional()
									})
								)
								.optional(),
							childrenUrls: zod.array(zod.string()).optional(),
							lat: zod.number().optional(),
							lon: zod.number().optional()
						})
					)
					.optional(),
				closureText: zod.string().optional()
			})
		)
		.optional(),
	created: zod.string().datetime().optional(),
	modified: zod.string().datetime().optional(),
	lineStatuses: zod
		.array(
			zod.object({
				id: zod.number().optional(),
				lineId: zod.string().optional(),
				statusSeverity: zod.number().optional(),
				statusSeverityDescription: zod.string().optional(),
				reason: zod.string().optional(),
				created: zod.string().datetime().optional(),
				modified: zod.string().datetime().optional(),
				validityPeriods: zod
					.array(
						zod.object({
							fromDate: zod.string().datetime().optional(),
							toDate: zod.string().datetime().optional(),
							isNow: zod.boolean().optional()
						})
					)
					.optional(),
				disruption: zod
					.object({
						category: zod
							.enum([
								'Undefined',
								'RealTime',
								'PlannedWork',
								'Information',
								'Event',
								'Crowding',
								'StatusAlert'
							])
							.optional(),
						type: zod.string().optional(),
						categoryDescription: zod.string().optional(),
						description: zod.string().optional(),
						summary: zod.string().optional(),
						additionalInfo: zod.string().optional(),
						created: zod.string().datetime().optional(),
						lastUpdate: zod.string().datetime().optional(),
						affectedRoutes: zod
							.array(
								zod.object({
									id: zod.string().optional(),
									lineId: zod.string().optional(),
									routeCode: zod.string().optional(),
									name: zod.string().optional(),
									lineString: zod.string().optional(),
									direction: zod.string().optional(),
									originationName: zod.string().optional(),
									destinationName: zod.string().optional(),
									via: zod
										.object({
											ordinal: zod.number().optional(),
											stopPoint: zod
												.object({
													naptanId: zod.string().optional(),
													platformName: zod.string().optional(),
													indicator: zod.string().optional(),
													stopLetter: zod.string().optional(),
													modes: zod.array(zod.string()).optional(),
													icsCode: zod.string().optional(),
													smsCode: zod.string().optional(),
													stopType: zod.string().optional(),
													stationNaptan: zod.string().optional(),
													accessibilitySummary: zod.string().optional(),
													hubNaptanCode: zod.string().optional(),
													lines: zod
														.array(
															zod.object({
																id: zod.string().optional(),
																name: zod.string().optional(),
																uri: zod.string().optional(),
																fullName: zod.string().optional(),
																type: zod.string().optional(),
																crowding: zod
																	.object({
																		passengerFlows: zod
																			.array(
																				zod.object({
																					timeSlice: zod.string().optional(),
																					value: zod.number().optional()
																				})
																			)
																			.optional(),
																		trainLoadings: zod
																			.array(
																				zod.object({
																					line: zod.string().optional(),
																					lineDirection: zod.string().optional(),
																					platformDirection: zod.string().optional(),
																					direction: zod.string().optional(),
																					naptanTo: zod.string().optional(),
																					timeSlice: zod.string().optional(),
																					value: zod.number().optional()
																				})
																			)
																			.optional()
																	})
																	.optional(),
																routeType: zod
																	.enum([
																		'Unknown',
																		'All',
																		'Cycle Superhighways',
																		'Quietways',
																		'Cycleways',
																		'Mini-Hollands',
																		'Central London Grid',
																		'Streetspace Route'
																	])
																	.optional(),
																status: zod
																	.enum([
																		'Unknown',
																		'All',
																		'Open',
																		'In Progress',
																		'Planned',
																		'Planned - Subject to feasibility and consultation.',
																		'Not Open'
																	])
																	.optional(),
																motType: zod.string().optional(),
																network: zod.string().optional()
															})
														)
														.optional(),
													lineGroup: zod
														.array(
															zod.object({
																naptanIdReference: zod.string().optional(),
																stationAtcoCode: zod.string().optional(),
																lineIdentifier: zod.array(zod.string()).optional()
															})
														)
														.optional(),
													lineModeGroups: zod
														.array(
															zod.object({
																modeName: zod.string().optional(),
																lineIdentifier: zod.array(zod.string()).optional()
															})
														)
														.optional(),
													fullName: zod.string().optional(),
													naptanMode: zod.string().optional(),
													status: zod.boolean().optional(),
													individualStopId: zod.string().optional(),
													id: zod.string().optional(),
													url: zod.string().optional(),
													commonName: zod.string().optional(),
													distance: zod.number().optional(),
													placeType: zod.string().optional(),
													additionalProperties: zod
														.array(
															zod.object({
																category: zod.string().optional(),
																key: zod.string().optional(),
																sourceSystemKey: zod.string().optional(),
																value: zod.string().optional(),
																modified: zod.string().datetime().optional()
															})
														)
														.optional(),
													children: zod
														.array(
															zod.object({
																id: zod.string().optional(),
																url: zod.string().optional(),
																commonName: zod.string().optional(),
																distance: zod.number().optional(),
																placeType: zod.string().optional(),
																additionalProperties: zod
																	.array(
																		zod.object({
																			category: zod.string().optional(),
																			key: zod.string().optional(),
																			sourceSystemKey: zod.string().optional(),
																			value: zod.string().optional(),
																			modified: zod.string().datetime().optional()
																		})
																	)
																	.optional(),
																children: zod.array(zod.any()).optional(),
																childrenUrls: zod.array(zod.string()).optional(),
																lat: zod.number().optional(),
																lon: zod.number().optional()
															})
														)
														.optional(),
													childrenUrls: zod.array(zod.string()).optional(),
													lat: zod.number().optional(),
													lon: zod.number().optional()
												})
												.optional()
										})
										.optional(),
									isEntireRouteSection: zod.boolean().optional(),
									validTo: zod.string().datetime().optional(),
									validFrom: zod.string().datetime().optional(),
									routeSectionNaptanEntrySequence: zod
										.array(
											zod.object({
												ordinal: zod.number().optional(),
												stopPoint: zod
													.object({
														naptanId: zod.string().optional(),
														platformName: zod.string().optional(),
														indicator: zod.string().optional(),
														stopLetter: zod.string().optional(),
														modes: zod.array(zod.string()).optional(),
														icsCode: zod.string().optional(),
														smsCode: zod.string().optional(),
														stopType: zod.string().optional(),
														stationNaptan: zod.string().optional(),
														accessibilitySummary: zod.string().optional(),
														hubNaptanCode: zod.string().optional(),
														lines: zod
															.array(
																zod.object({
																	id: zod.string().optional(),
																	name: zod.string().optional(),
																	uri: zod.string().optional(),
																	fullName: zod.string().optional(),
																	type: zod.string().optional(),
																	crowding: zod
																		.object({
																			passengerFlows: zod
																				.array(
																					zod.object({
																						timeSlice: zod.string().optional(),
																						value: zod.number().optional()
																					})
																				)
																				.optional(),
																			trainLoadings: zod
																				.array(
																					zod.object({
																						line: zod.string().optional(),
																						lineDirection: zod.string().optional(),
																						platformDirection: zod.string().optional(),
																						direction: zod.string().optional(),
																						naptanTo: zod.string().optional(),
																						timeSlice: zod.string().optional(),
																						value: zod.number().optional()
																					})
																				)
																				.optional()
																		})
																		.optional(),
																	routeType: zod
																		.enum([
																			'Unknown',
																			'All',
																			'Cycle Superhighways',
																			'Quietways',
																			'Cycleways',
																			'Mini-Hollands',
																			'Central London Grid',
																			'Streetspace Route'
																		])
																		.optional(),
																	status: zod
																		.enum([
																			'Unknown',
																			'All',
																			'Open',
																			'In Progress',
																			'Planned',
																			'Planned - Subject to feasibility and consultation.',
																			'Not Open'
																		])
																		.optional(),
																	motType: zod.string().optional(),
																	network: zod.string().optional()
																})
															)
															.optional(),
														lineGroup: zod
															.array(
																zod.object({
																	naptanIdReference: zod.string().optional(),
																	stationAtcoCode: zod.string().optional(),
																	lineIdentifier: zod.array(zod.string()).optional()
																})
															)
															.optional(),
														lineModeGroups: zod
															.array(
																zod.object({
																	modeName: zod.string().optional(),
																	lineIdentifier: zod.array(zod.string()).optional()
																})
															)
															.optional(),
														fullName: zod.string().optional(),
														naptanMode: zod.string().optional(),
														status: zod.boolean().optional(),
														individualStopId: zod.string().optional(),
														id: zod.string().optional(),
														url: zod.string().optional(),
														commonName: zod.string().optional(),
														distance: zod.number().optional(),
														placeType: zod.string().optional(),
														additionalProperties: zod
															.array(
																zod.object({
																	category: zod.string().optional(),
																	key: zod.string().optional(),
																	sourceSystemKey: zod.string().optional(),
																	value: zod.string().optional(),
																	modified: zod.string().datetime().optional()
																})
															)
															.optional(),
														children: zod
															.array(
																zod.object({
																	id: zod.string().optional(),
																	url: zod.string().optional(),
																	commonName: zod.string().optional(),
																	distance: zod.number().optional(),
																	placeType: zod.string().optional(),
																	additionalProperties: zod
																		.array(
																			zod.object({
																				category: zod.string().optional(),
																				key: zod.string().optional(),
																				sourceSystemKey: zod.string().optional(),
																				value: zod.string().optional(),
																				modified: zod.string().datetime().optional()
																			})
																		)
																		.optional(),
																	children: zod.array(zod.any()).optional(),
																	childrenUrls: zod.array(zod.string()).optional(),
																	lat: zod.number().optional(),
																	lon: zod.number().optional()
																})
															)
															.optional(),
														childrenUrls: zod.array(zod.string()).optional(),
														lat: zod.number().optional(),
														lon: zod.number().optional()
													})
													.optional()
											})
										)
										.optional()
								})
							)
							.optional(),
						affectedStops: zod
							.array(
								zod.object({
									naptanId: zod.string().optional(),
									platformName: zod.string().optional(),
									indicator: zod.string().optional(),
									stopLetter: zod.string().optional(),
									modes: zod.array(zod.string()).optional(),
									icsCode: zod.string().optional(),
									smsCode: zod.string().optional(),
									stopType: zod.string().optional(),
									stationNaptan: zod.string().optional(),
									accessibilitySummary: zod.string().optional(),
									hubNaptanCode: zod.string().optional(),
									lines: zod
										.array(
											zod.object({
												id: zod.string().optional(),
												name: zod.string().optional(),
												uri: zod.string().optional(),
												fullName: zod.string().optional(),
												type: zod.string().optional(),
												crowding: zod
													.object({
														passengerFlows: zod
															.array(
																zod.object({
																	timeSlice: zod.string().optional(),
																	value: zod.number().optional()
																})
															)
															.optional(),
														trainLoadings: zod
															.array(
																zod.object({
																	line: zod.string().optional(),
																	lineDirection: zod.string().optional(),
																	platformDirection: zod.string().optional(),
																	direction: zod.string().optional(),
																	naptanTo: zod.string().optional(),
																	timeSlice: zod.string().optional(),
																	value: zod.number().optional()
																})
															)
															.optional()
													})
													.optional(),
												routeType: zod
													.enum([
														'Unknown',
														'All',
														'Cycle Superhighways',
														'Quietways',
														'Cycleways',
														'Mini-Hollands',
														'Central London Grid',
														'Streetspace Route'
													])
													.optional(),
												status: zod
													.enum([
														'Unknown',
														'All',
														'Open',
														'In Progress',
														'Planned',
														'Planned - Subject to feasibility and consultation.',
														'Not Open'
													])
													.optional(),
												motType: zod.string().optional(),
												network: zod.string().optional()
											})
										)
										.optional(),
									lineGroup: zod
										.array(
											zod.object({
												naptanIdReference: zod.string().optional(),
												stationAtcoCode: zod.string().optional(),
												lineIdentifier: zod.array(zod.string()).optional()
											})
										)
										.optional(),
									lineModeGroups: zod
										.array(
											zod.object({
												modeName: zod.string().optional(),
												lineIdentifier: zod.array(zod.string()).optional()
											})
										)
										.optional(),
									fullName: zod.string().optional(),
									naptanMode: zod.string().optional(),
									status: zod.boolean().optional(),
									individualStopId: zod.string().optional(),
									id: zod.string().optional(),
									url: zod.string().optional(),
									commonName: zod.string().optional(),
									distance: zod.number().optional(),
									placeType: zod.string().optional(),
									additionalProperties: zod
										.array(
											zod.object({
												category: zod.string().optional(),
												key: zod.string().optional(),
												sourceSystemKey: zod.string().optional(),
												value: zod.string().optional(),
												modified: zod.string().datetime().optional()
											})
										)
										.optional(),
									children: zod
										.array(
											zod.object({
												id: zod.string().optional(),
												url: zod.string().optional(),
												commonName: zod.string().optional(),
												distance: zod.number().optional(),
												placeType: zod.string().optional(),
												additionalProperties: zod
													.array(
														zod.object({
															category: zod.string().optional(),
															key: zod.string().optional(),
															sourceSystemKey: zod.string().optional(),
															value: zod.string().optional(),
															modified: zod.string().datetime().optional()
														})
													)
													.optional(),
												children: zod.array(zod.any()).optional(),
												childrenUrls: zod.array(zod.string()).optional(),
												lat: zod.number().optional(),
												lon: zod.number().optional()
											})
										)
										.optional(),
									childrenUrls: zod.array(zod.string()).optional(),
									lat: zod.number().optional(),
									lon: zod.number().optional()
								})
							)
							.optional(),
						closureText: zod.string().optional()
					})
					.optional()
			})
		)
		.optional(),
	routeSections: zod
		.array(
			zod.object({
				routeCode: zod.string().optional(),
				name: zod.string().optional(),
				direction: zod.string().optional(),
				originationName: zod.string().optional(),
				destinationName: zod.string().optional(),
				originator: zod.string().optional(),
				destination: zod.string().optional(),
				serviceType: zod.string().optional(),
				validTo: zod.string().datetime().optional(),
				validFrom: zod.string().datetime().optional()
			})
		)
		.optional(),
	serviceTypes: zod
		.array(
			zod.object({
				name: zod.string().optional(),
				uri: zod.string().optional()
			})
		)
		.optional(),
	crowding: zod
		.object({
			passengerFlows: zod
				.array(
					zod.object({
						timeSlice: zod.string().optional(),
						value: zod.number().optional()
					})
				)
				.optional(),
			trainLoadings: zod
				.array(
					zod.object({
						line: zod.string().optional(),
						lineDirection: zod.string().optional(),
						platformDirection: zod.string().optional(),
						direction: zod.string().optional(),
						naptanTo: zod.string().optional(),
						timeSlice: zod.string().optional(),
						value: zod.number().optional()
					})
				)
				.optional()
		})
		.optional()
});
export const lineRouteResponse = zod.array(lineRouteResponseItem);

/**
 * @summary Get all valid routes for given line ids, including the name and id of the originating and terminating stops for each route.
 */
export const lineLineRoutesByIdsParams = zod.object({
	ids: zod.array(zod.string())
});

export const lineLineRoutesByIdsQueryParams = zod.object({
	serviceTypes: zod.array(zod.enum(['Regular', 'Night'])).optional()
});

export const lineLineRoutesByIdsResponseItem = zod.object({
	id: zod.string().optional(),
	name: zod.string().optional(),
	modeName: zod.string().optional(),
	disruptions: zod
		.array(
			zod.object({
				category: zod
					.enum([
						'Undefined',
						'RealTime',
						'PlannedWork',
						'Information',
						'Event',
						'Crowding',
						'StatusAlert'
					])
					.optional(),
				type: zod.string().optional(),
				categoryDescription: zod.string().optional(),
				description: zod.string().optional(),
				summary: zod.string().optional(),
				additionalInfo: zod.string().optional(),
				created: zod.string().datetime().optional(),
				lastUpdate: zod.string().datetime().optional(),
				affectedRoutes: zod
					.array(
						zod.object({
							id: zod.string().optional(),
							lineId: zod.string().optional(),
							routeCode: zod.string().optional(),
							name: zod.string().optional(),
							lineString: zod.string().optional(),
							direction: zod.string().optional(),
							originationName: zod.string().optional(),
							destinationName: zod.string().optional(),
							via: zod
								.object({
									ordinal: zod.number().optional(),
									stopPoint: zod
										.object({
											naptanId: zod.string().optional(),
											platformName: zod.string().optional(),
											indicator: zod.string().optional(),
											stopLetter: zod.string().optional(),
											modes: zod.array(zod.string()).optional(),
											icsCode: zod.string().optional(),
											smsCode: zod.string().optional(),
											stopType: zod.string().optional(),
											stationNaptan: zod.string().optional(),
											accessibilitySummary: zod.string().optional(),
											hubNaptanCode: zod.string().optional(),
											lines: zod
												.array(
													zod.object({
														id: zod.string().optional(),
														name: zod.string().optional(),
														uri: zod.string().optional(),
														fullName: zod.string().optional(),
														type: zod.string().optional(),
														crowding: zod
															.object({
																passengerFlows: zod
																	.array(
																		zod.object({
																			timeSlice: zod.string().optional(),
																			value: zod.number().optional()
																		})
																	)
																	.optional(),
																trainLoadings: zod
																	.array(
																		zod.object({
																			line: zod.string().optional(),
																			lineDirection: zod.string().optional(),
																			platformDirection: zod.string().optional(),
																			direction: zod.string().optional(),
																			naptanTo: zod.string().optional(),
																			timeSlice: zod.string().optional(),
																			value: zod.number().optional()
																		})
																	)
																	.optional()
															})
															.optional(),
														routeType: zod
															.enum([
																'Unknown',
																'All',
																'Cycle Superhighways',
																'Quietways',
																'Cycleways',
																'Mini-Hollands',
																'Central London Grid',
																'Streetspace Route'
															])
															.optional(),
														status: zod
															.enum([
																'Unknown',
																'All',
																'Open',
																'In Progress',
																'Planned',
																'Planned - Subject to feasibility and consultation.',
																'Not Open'
															])
															.optional(),
														motType: zod.string().optional(),
														network: zod.string().optional()
													})
												)
												.optional(),
											lineGroup: zod
												.array(
													zod.object({
														naptanIdReference: zod.string().optional(),
														stationAtcoCode: zod.string().optional(),
														lineIdentifier: zod.array(zod.string()).optional()
													})
												)
												.optional(),
											lineModeGroups: zod
												.array(
													zod.object({
														modeName: zod.string().optional(),
														lineIdentifier: zod.array(zod.string()).optional()
													})
												)
												.optional(),
											fullName: zod.string().optional(),
											naptanMode: zod.string().optional(),
											status: zod.boolean().optional(),
											individualStopId: zod.string().optional(),
											id: zod.string().optional(),
											url: zod.string().optional(),
											commonName: zod.string().optional(),
											distance: zod.number().optional(),
											placeType: zod.string().optional(),
											additionalProperties: zod
												.array(
													zod.object({
														category: zod.string().optional(),
														key: zod.string().optional(),
														sourceSystemKey: zod.string().optional(),
														value: zod.string().optional(),
														modified: zod.string().datetime().optional()
													})
												)
												.optional(),
											children: zod
												.array(
													zod.object({
														id: zod.string().optional(),
														url: zod.string().optional(),
														commonName: zod.string().optional(),
														distance: zod.number().optional(),
														placeType: zod.string().optional(),
														additionalProperties: zod
															.array(
																zod.object({
																	category: zod.string().optional(),
																	key: zod.string().optional(),
																	sourceSystemKey: zod.string().optional(),
																	value: zod.string().optional(),
																	modified: zod.string().datetime().optional()
																})
															)
															.optional(),
														children: zod.array(zod.any()).optional(),
														childrenUrls: zod.array(zod.string()).optional(),
														lat: zod.number().optional(),
														lon: zod.number().optional()
													})
												)
												.optional(),
											childrenUrls: zod.array(zod.string()).optional(),
											lat: zod.number().optional(),
											lon: zod.number().optional()
										})
										.optional()
								})
								.optional(),
							isEntireRouteSection: zod.boolean().optional(),
							validTo: zod.string().datetime().optional(),
							validFrom: zod.string().datetime().optional(),
							routeSectionNaptanEntrySequence: zod
								.array(
									zod.object({
										ordinal: zod.number().optional(),
										stopPoint: zod
											.object({
												naptanId: zod.string().optional(),
												platformName: zod.string().optional(),
												indicator: zod.string().optional(),
												stopLetter: zod.string().optional(),
												modes: zod.array(zod.string()).optional(),
												icsCode: zod.string().optional(),
												smsCode: zod.string().optional(),
												stopType: zod.string().optional(),
												stationNaptan: zod.string().optional(),
												accessibilitySummary: zod.string().optional(),
												hubNaptanCode: zod.string().optional(),
												lines: zod
													.array(
														zod.object({
															id: zod.string().optional(),
															name: zod.string().optional(),
															uri: zod.string().optional(),
															fullName: zod.string().optional(),
															type: zod.string().optional(),
															crowding: zod
																.object({
																	passengerFlows: zod
																		.array(
																			zod.object({
																				timeSlice: zod.string().optional(),
																				value: zod.number().optional()
																			})
																		)
																		.optional(),
																	trainLoadings: zod
																		.array(
																			zod.object({
																				line: zod.string().optional(),
																				lineDirection: zod.string().optional(),
																				platformDirection: zod.string().optional(),
																				direction: zod.string().optional(),
																				naptanTo: zod.string().optional(),
																				timeSlice: zod.string().optional(),
																				value: zod.number().optional()
																			})
																		)
																		.optional()
																})
																.optional(),
															routeType: zod
																.enum([
																	'Unknown',
																	'All',
																	'Cycle Superhighways',
																	'Quietways',
																	'Cycleways',
																	'Mini-Hollands',
																	'Central London Grid',
																	'Streetspace Route'
																])
																.optional(),
															status: zod
																.enum([
																	'Unknown',
																	'All',
																	'Open',
																	'In Progress',
																	'Planned',
																	'Planned - Subject to feasibility and consultation.',
																	'Not Open'
																])
																.optional(),
															motType: zod.string().optional(),
															network: zod.string().optional()
														})
													)
													.optional(),
												lineGroup: zod
													.array(
														zod.object({
															naptanIdReference: zod.string().optional(),
															stationAtcoCode: zod.string().optional(),
															lineIdentifier: zod.array(zod.string()).optional()
														})
													)
													.optional(),
												lineModeGroups: zod
													.array(
														zod.object({
															modeName: zod.string().optional(),
															lineIdentifier: zod.array(zod.string()).optional()
														})
													)
													.optional(),
												fullName: zod.string().optional(),
												naptanMode: zod.string().optional(),
												status: zod.boolean().optional(),
												individualStopId: zod.string().optional(),
												id: zod.string().optional(),
												url: zod.string().optional(),
												commonName: zod.string().optional(),
												distance: zod.number().optional(),
												placeType: zod.string().optional(),
												additionalProperties: zod
													.array(
														zod.object({
															category: zod.string().optional(),
															key: zod.string().optional(),
															sourceSystemKey: zod.string().optional(),
															value: zod.string().optional(),
															modified: zod.string().datetime().optional()
														})
													)
													.optional(),
												children: zod
													.array(
														zod.object({
															id: zod.string().optional(),
															url: zod.string().optional(),
															commonName: zod.string().optional(),
															distance: zod.number().optional(),
															placeType: zod.string().optional(),
															additionalProperties: zod
																.array(
																	zod.object({
																		category: zod.string().optional(),
																		key: zod.string().optional(),
																		sourceSystemKey: zod.string().optional(),
																		value: zod.string().optional(),
																		modified: zod.string().datetime().optional()
																	})
																)
																.optional(),
															children: zod.array(zod.any()).optional(),
															childrenUrls: zod.array(zod.string()).optional(),
															lat: zod.number().optional(),
															lon: zod.number().optional()
														})
													)
													.optional(),
												childrenUrls: zod.array(zod.string()).optional(),
												lat: zod.number().optional(),
												lon: zod.number().optional()
											})
											.optional()
									})
								)
								.optional()
						})
					)
					.optional(),
				affectedStops: zod
					.array(
						zod.object({
							naptanId: zod.string().optional(),
							platformName: zod.string().optional(),
							indicator: zod.string().optional(),
							stopLetter: zod.string().optional(),
							modes: zod.array(zod.string()).optional(),
							icsCode: zod.string().optional(),
							smsCode: zod.string().optional(),
							stopType: zod.string().optional(),
							stationNaptan: zod.string().optional(),
							accessibilitySummary: zod.string().optional(),
							hubNaptanCode: zod.string().optional(),
							lines: zod
								.array(
									zod.object({
										id: zod.string().optional(),
										name: zod.string().optional(),
										uri: zod.string().optional(),
										fullName: zod.string().optional(),
										type: zod.string().optional(),
										crowding: zod
											.object({
												passengerFlows: zod
													.array(
														zod.object({
															timeSlice: zod.string().optional(),
															value: zod.number().optional()
														})
													)
													.optional(),
												trainLoadings: zod
													.array(
														zod.object({
															line: zod.string().optional(),
															lineDirection: zod.string().optional(),
															platformDirection: zod.string().optional(),
															direction: zod.string().optional(),
															naptanTo: zod.string().optional(),
															timeSlice: zod.string().optional(),
															value: zod.number().optional()
														})
													)
													.optional()
											})
											.optional(),
										routeType: zod
											.enum([
												'Unknown',
												'All',
												'Cycle Superhighways',
												'Quietways',
												'Cycleways',
												'Mini-Hollands',
												'Central London Grid',
												'Streetspace Route'
											])
											.optional(),
										status: zod
											.enum([
												'Unknown',
												'All',
												'Open',
												'In Progress',
												'Planned',
												'Planned - Subject to feasibility and consultation.',
												'Not Open'
											])
											.optional(),
										motType: zod.string().optional(),
										network: zod.string().optional()
									})
								)
								.optional(),
							lineGroup: zod
								.array(
									zod.object({
										naptanIdReference: zod.string().optional(),
										stationAtcoCode: zod.string().optional(),
										lineIdentifier: zod.array(zod.string()).optional()
									})
								)
								.optional(),
							lineModeGroups: zod
								.array(
									zod.object({
										modeName: zod.string().optional(),
										lineIdentifier: zod.array(zod.string()).optional()
									})
								)
								.optional(),
							fullName: zod.string().optional(),
							naptanMode: zod.string().optional(),
							status: zod.boolean().optional(),
							individualStopId: zod.string().optional(),
							id: zod.string().optional(),
							url: zod.string().optional(),
							commonName: zod.string().optional(),
							distance: zod.number().optional(),
							placeType: zod.string().optional(),
							additionalProperties: zod
								.array(
									zod.object({
										category: zod.string().optional(),
										key: zod.string().optional(),
										sourceSystemKey: zod.string().optional(),
										value: zod.string().optional(),
										modified: zod.string().datetime().optional()
									})
								)
								.optional(),
							children: zod
								.array(
									zod.object({
										id: zod.string().optional(),
										url: zod.string().optional(),
										commonName: zod.string().optional(),
										distance: zod.number().optional(),
										placeType: zod.string().optional(),
										additionalProperties: zod
											.array(
												zod.object({
													category: zod.string().optional(),
													key: zod.string().optional(),
													sourceSystemKey: zod.string().optional(),
													value: zod.string().optional(),
													modified: zod.string().datetime().optional()
												})
											)
											.optional(),
										children: zod.array(zod.any()).optional(),
										childrenUrls: zod.array(zod.string()).optional(),
										lat: zod.number().optional(),
										lon: zod.number().optional()
									})
								)
								.optional(),
							childrenUrls: zod.array(zod.string()).optional(),
							lat: zod.number().optional(),
							lon: zod.number().optional()
						})
					)
					.optional(),
				closureText: zod.string().optional()
			})
		)
		.optional(),
	created: zod.string().datetime().optional(),
	modified: zod.string().datetime().optional(),
	lineStatuses: zod
		.array(
			zod.object({
				id: zod.number().optional(),
				lineId: zod.string().optional(),
				statusSeverity: zod.number().optional(),
				statusSeverityDescription: zod.string().optional(),
				reason: zod.string().optional(),
				created: zod.string().datetime().optional(),
				modified: zod.string().datetime().optional(),
				validityPeriods: zod
					.array(
						zod.object({
							fromDate: zod.string().datetime().optional(),
							toDate: zod.string().datetime().optional(),
							isNow: zod.boolean().optional()
						})
					)
					.optional(),
				disruption: zod
					.object({
						category: zod
							.enum([
								'Undefined',
								'RealTime',
								'PlannedWork',
								'Information',
								'Event',
								'Crowding',
								'StatusAlert'
							])
							.optional(),
						type: zod.string().optional(),
						categoryDescription: zod.string().optional(),
						description: zod.string().optional(),
						summary: zod.string().optional(),
						additionalInfo: zod.string().optional(),
						created: zod.string().datetime().optional(),
						lastUpdate: zod.string().datetime().optional(),
						affectedRoutes: zod
							.array(
								zod.object({
									id: zod.string().optional(),
									lineId: zod.string().optional(),
									routeCode: zod.string().optional(),
									name: zod.string().optional(),
									lineString: zod.string().optional(),
									direction: zod.string().optional(),
									originationName: zod.string().optional(),
									destinationName: zod.string().optional(),
									via: zod
										.object({
											ordinal: zod.number().optional(),
											stopPoint: zod
												.object({
													naptanId: zod.string().optional(),
													platformName: zod.string().optional(),
													indicator: zod.string().optional(),
													stopLetter: zod.string().optional(),
													modes: zod.array(zod.string()).optional(),
													icsCode: zod.string().optional(),
													smsCode: zod.string().optional(),
													stopType: zod.string().optional(),
													stationNaptan: zod.string().optional(),
													accessibilitySummary: zod.string().optional(),
													hubNaptanCode: zod.string().optional(),
													lines: zod
														.array(
															zod.object({
																id: zod.string().optional(),
																name: zod.string().optional(),
																uri: zod.string().optional(),
																fullName: zod.string().optional(),
																type: zod.string().optional(),
																crowding: zod
																	.object({
																		passengerFlows: zod
																			.array(
																				zod.object({
																					timeSlice: zod.string().optional(),
																					value: zod.number().optional()
																				})
																			)
																			.optional(),
																		trainLoadings: zod
																			.array(
																				zod.object({
																					line: zod.string().optional(),
																					lineDirection: zod.string().optional(),
																					platformDirection: zod.string().optional(),
																					direction: zod.string().optional(),
																					naptanTo: zod.string().optional(),
																					timeSlice: zod.string().optional(),
																					value: zod.number().optional()
																				})
																			)
																			.optional()
																	})
																	.optional(),
																routeType: zod
																	.enum([
																		'Unknown',
																		'All',
																		'Cycle Superhighways',
																		'Quietways',
																		'Cycleways',
																		'Mini-Hollands',
																		'Central London Grid',
																		'Streetspace Route'
																	])
																	.optional(),
																status: zod
																	.enum([
																		'Unknown',
																		'All',
																		'Open',
																		'In Progress',
																		'Planned',
																		'Planned - Subject to feasibility and consultation.',
																		'Not Open'
																	])
																	.optional(),
																motType: zod.string().optional(),
																network: zod.string().optional()
															})
														)
														.optional(),
													lineGroup: zod
														.array(
															zod.object({
																naptanIdReference: zod.string().optional(),
																stationAtcoCode: zod.string().optional(),
																lineIdentifier: zod.array(zod.string()).optional()
															})
														)
														.optional(),
													lineModeGroups: zod
														.array(
															zod.object({
																modeName: zod.string().optional(),
																lineIdentifier: zod.array(zod.string()).optional()
															})
														)
														.optional(),
													fullName: zod.string().optional(),
													naptanMode: zod.string().optional(),
													status: zod.boolean().optional(),
													individualStopId: zod.string().optional(),
													id: zod.string().optional(),
													url: zod.string().optional(),
													commonName: zod.string().optional(),
													distance: zod.number().optional(),
													placeType: zod.string().optional(),
													additionalProperties: zod
														.array(
															zod.object({
																category: zod.string().optional(),
																key: zod.string().optional(),
																sourceSystemKey: zod.string().optional(),
																value: zod.string().optional(),
																modified: zod.string().datetime().optional()
															})
														)
														.optional(),
													children: zod
														.array(
															zod.object({
																id: zod.string().optional(),
																url: zod.string().optional(),
																commonName: zod.string().optional(),
																distance: zod.number().optional(),
																placeType: zod.string().optional(),
																additionalProperties: zod
																	.array(
																		zod.object({
																			category: zod.string().optional(),
																			key: zod.string().optional(),
																			sourceSystemKey: zod.string().optional(),
																			value: zod.string().optional(),
																			modified: zod.string().datetime().optional()
																		})
																	)
																	.optional(),
																children: zod.array(zod.any()).optional(),
																childrenUrls: zod.array(zod.string()).optional(),
																lat: zod.number().optional(),
																lon: zod.number().optional()
															})
														)
														.optional(),
													childrenUrls: zod.array(zod.string()).optional(),
													lat: zod.number().optional(),
													lon: zod.number().optional()
												})
												.optional()
										})
										.optional(),
									isEntireRouteSection: zod.boolean().optional(),
									validTo: zod.string().datetime().optional(),
									validFrom: zod.string().datetime().optional(),
									routeSectionNaptanEntrySequence: zod
										.array(
											zod.object({
												ordinal: zod.number().optional(),
												stopPoint: zod
													.object({
														naptanId: zod.string().optional(),
														platformName: zod.string().optional(),
														indicator: zod.string().optional(),
														stopLetter: zod.string().optional(),
														modes: zod.array(zod.string()).optional(),
														icsCode: zod.string().optional(),
														smsCode: zod.string().optional(),
														stopType: zod.string().optional(),
														stationNaptan: zod.string().optional(),
														accessibilitySummary: zod.string().optional(),
														hubNaptanCode: zod.string().optional(),
														lines: zod
															.array(
																zod.object({
																	id: zod.string().optional(),
																	name: zod.string().optional(),
																	uri: zod.string().optional(),
																	fullName: zod.string().optional(),
																	type: zod.string().optional(),
																	crowding: zod
																		.object({
																			passengerFlows: zod
																				.array(
																					zod.object({
																						timeSlice: zod.string().optional(),
																						value: zod.number().optional()
																					})
																				)
																				.optional(),
																			trainLoadings: zod
																				.array(
																					zod.object({
																						line: zod.string().optional(),
																						lineDirection: zod.string().optional(),
																						platformDirection: zod.string().optional(),
																						direction: zod.string().optional(),
																						naptanTo: zod.string().optional(),
																						timeSlice: zod.string().optional(),
																						value: zod.number().optional()
																					})
																				)
																				.optional()
																		})
																		.optional(),
																	routeType: zod
																		.enum([
																			'Unknown',
																			'All',
																			'Cycle Superhighways',
																			'Quietways',
																			'Cycleways',
																			'Mini-Hollands',
																			'Central London Grid',
																			'Streetspace Route'
																		])
																		.optional(),
																	status: zod
																		.enum([
																			'Unknown',
																			'All',
																			'Open',
																			'In Progress',
																			'Planned',
																			'Planned - Subject to feasibility and consultation.',
																			'Not Open'
																		])
																		.optional(),
																	motType: zod.string().optional(),
																	network: zod.string().optional()
																})
															)
															.optional(),
														lineGroup: zod
															.array(
																zod.object({
																	naptanIdReference: zod.string().optional(),
																	stationAtcoCode: zod.string().optional(),
																	lineIdentifier: zod.array(zod.string()).optional()
																})
															)
															.optional(),
														lineModeGroups: zod
															.array(
																zod.object({
																	modeName: zod.string().optional(),
																	lineIdentifier: zod.array(zod.string()).optional()
																})
															)
															.optional(),
														fullName: zod.string().optional(),
														naptanMode: zod.string().optional(),
														status: zod.boolean().optional(),
														individualStopId: zod.string().optional(),
														id: zod.string().optional(),
														url: zod.string().optional(),
														commonName: zod.string().optional(),
														distance: zod.number().optional(),
														placeType: zod.string().optional(),
														additionalProperties: zod
															.array(
																zod.object({
																	category: zod.string().optional(),
																	key: zod.string().optional(),
																	sourceSystemKey: zod.string().optional(),
																	value: zod.string().optional(),
																	modified: zod.string().datetime().optional()
																})
															)
															.optional(),
														children: zod
															.array(
																zod.object({
																	id: zod.string().optional(),
																	url: zod.string().optional(),
																	commonName: zod.string().optional(),
																	distance: zod.number().optional(),
																	placeType: zod.string().optional(),
																	additionalProperties: zod
																		.array(
																			zod.object({
																				category: zod.string().optional(),
																				key: zod.string().optional(),
																				sourceSystemKey: zod.string().optional(),
																				value: zod.string().optional(),
																				modified: zod.string().datetime().optional()
																			})
																		)
																		.optional(),
																	children: zod.array(zod.any()).optional(),
																	childrenUrls: zod.array(zod.string()).optional(),
																	lat: zod.number().optional(),
																	lon: zod.number().optional()
																})
															)
															.optional(),
														childrenUrls: zod.array(zod.string()).optional(),
														lat: zod.number().optional(),
														lon: zod.number().optional()
													})
													.optional()
											})
										)
										.optional()
								})
							)
							.optional(),
						affectedStops: zod
							.array(
								zod.object({
									naptanId: zod.string().optional(),
									platformName: zod.string().optional(),
									indicator: zod.string().optional(),
									stopLetter: zod.string().optional(),
									modes: zod.array(zod.string()).optional(),
									icsCode: zod.string().optional(),
									smsCode: zod.string().optional(),
									stopType: zod.string().optional(),
									stationNaptan: zod.string().optional(),
									accessibilitySummary: zod.string().optional(),
									hubNaptanCode: zod.string().optional(),
									lines: zod
										.array(
											zod.object({
												id: zod.string().optional(),
												name: zod.string().optional(),
												uri: zod.string().optional(),
												fullName: zod.string().optional(),
												type: zod.string().optional(),
												crowding: zod
													.object({
														passengerFlows: zod
															.array(
																zod.object({
																	timeSlice: zod.string().optional(),
																	value: zod.number().optional()
																})
															)
															.optional(),
														trainLoadings: zod
															.array(
																zod.object({
																	line: zod.string().optional(),
																	lineDirection: zod.string().optional(),
																	platformDirection: zod.string().optional(),
																	direction: zod.string().optional(),
																	naptanTo: zod.string().optional(),
																	timeSlice: zod.string().optional(),
																	value: zod.number().optional()
																})
															)
															.optional()
													})
													.optional(),
												routeType: zod
													.enum([
														'Unknown',
														'All',
														'Cycle Superhighways',
														'Quietways',
														'Cycleways',
														'Mini-Hollands',
														'Central London Grid',
														'Streetspace Route'
													])
													.optional(),
												status: zod
													.enum([
														'Unknown',
														'All',
														'Open',
														'In Progress',
														'Planned',
														'Planned - Subject to feasibility and consultation.',
														'Not Open'
													])
													.optional(),
												motType: zod.string().optional(),
												network: zod.string().optional()
											})
										)
										.optional(),
									lineGroup: zod
										.array(
											zod.object({
												naptanIdReference: zod.string().optional(),
												stationAtcoCode: zod.string().optional(),
												lineIdentifier: zod.array(zod.string()).optional()
											})
										)
										.optional(),
									lineModeGroups: zod
										.array(
											zod.object({
												modeName: zod.string().optional(),
												lineIdentifier: zod.array(zod.string()).optional()
											})
										)
										.optional(),
									fullName: zod.string().optional(),
									naptanMode: zod.string().optional(),
									status: zod.boolean().optional(),
									individualStopId: zod.string().optional(),
									id: zod.string().optional(),
									url: zod.string().optional(),
									commonName: zod.string().optional(),
									distance: zod.number().optional(),
									placeType: zod.string().optional(),
									additionalProperties: zod
										.array(
											zod.object({
												category: zod.string().optional(),
												key: zod.string().optional(),
												sourceSystemKey: zod.string().optional(),
												value: zod.string().optional(),
												modified: zod.string().datetime().optional()
											})
										)
										.optional(),
									children: zod
										.array(
											zod.object({
												id: zod.string().optional(),
												url: zod.string().optional(),
												commonName: zod.string().optional(),
												distance: zod.number().optional(),
												placeType: zod.string().optional(),
												additionalProperties: zod
													.array(
														zod.object({
															category: zod.string().optional(),
															key: zod.string().optional(),
															sourceSystemKey: zod.string().optional(),
															value: zod.string().optional(),
															modified: zod.string().datetime().optional()
														})
													)
													.optional(),
												children: zod.array(zod.any()).optional(),
												childrenUrls: zod.array(zod.string()).optional(),
												lat: zod.number().optional(),
												lon: zod.number().optional()
											})
										)
										.optional(),
									childrenUrls: zod.array(zod.string()).optional(),
									lat: zod.number().optional(),
									lon: zod.number().optional()
								})
							)
							.optional(),
						closureText: zod.string().optional()
					})
					.optional()
			})
		)
		.optional(),
	routeSections: zod
		.array(
			zod.object({
				routeCode: zod.string().optional(),
				name: zod.string().optional(),
				direction: zod.string().optional(),
				originationName: zod.string().optional(),
				destinationName: zod.string().optional(),
				originator: zod.string().optional(),
				destination: zod.string().optional(),
				serviceType: zod.string().optional(),
				validTo: zod.string().datetime().optional(),
				validFrom: zod.string().datetime().optional()
			})
		)
		.optional(),
	serviceTypes: zod
		.array(
			zod.object({
				name: zod.string().optional(),
				uri: zod.string().optional()
			})
		)
		.optional(),
	crowding: zod
		.object({
			passengerFlows: zod
				.array(
					zod.object({
						timeSlice: zod.string().optional(),
						value: zod.number().optional()
					})
				)
				.optional(),
			trainLoadings: zod
				.array(
					zod.object({
						line: zod.string().optional(),
						lineDirection: zod.string().optional(),
						platformDirection: zod.string().optional(),
						direction: zod.string().optional(),
						naptanTo: zod.string().optional(),
						timeSlice: zod.string().optional(),
						value: zod.number().optional()
					})
				)
				.optional()
		})
		.optional()
});
export const lineLineRoutesByIdsResponse = zod.array(lineLineRoutesByIdsResponseItem);

/**
 * @summary Gets all lines and their valid routes for given modes, including the name and id of the originating and terminating stops for each route
 */
export const lineRouteByModeParams = zod.object({
	modes: zod.array(zod.string())
});

export const lineRouteByModeQueryParams = zod.object({
	serviceTypes: zod.array(zod.enum(['Regular', 'Night'])).optional()
});

export const lineRouteByModeResponseItem = zod.object({
	id: zod.string().optional(),
	name: zod.string().optional(),
	modeName: zod.string().optional(),
	disruptions: zod
		.array(
			zod.object({
				category: zod
					.enum([
						'Undefined',
						'RealTime',
						'PlannedWork',
						'Information',
						'Event',
						'Crowding',
						'StatusAlert'
					])
					.optional(),
				type: zod.string().optional(),
				categoryDescription: zod.string().optional(),
				description: zod.string().optional(),
				summary: zod.string().optional(),
				additionalInfo: zod.string().optional(),
				created: zod.string().datetime().optional(),
				lastUpdate: zod.string().datetime().optional(),
				affectedRoutes: zod
					.array(
						zod.object({
							id: zod.string().optional(),
							lineId: zod.string().optional(),
							routeCode: zod.string().optional(),
							name: zod.string().optional(),
							lineString: zod.string().optional(),
							direction: zod.string().optional(),
							originationName: zod.string().optional(),
							destinationName: zod.string().optional(),
							via: zod
								.object({
									ordinal: zod.number().optional(),
									stopPoint: zod
										.object({
											naptanId: zod.string().optional(),
											platformName: zod.string().optional(),
											indicator: zod.string().optional(),
											stopLetter: zod.string().optional(),
											modes: zod.array(zod.string()).optional(),
											icsCode: zod.string().optional(),
											smsCode: zod.string().optional(),
											stopType: zod.string().optional(),
											stationNaptan: zod.string().optional(),
											accessibilitySummary: zod.string().optional(),
											hubNaptanCode: zod.string().optional(),
											lines: zod
												.array(
													zod.object({
														id: zod.string().optional(),
														name: zod.string().optional(),
														uri: zod.string().optional(),
														fullName: zod.string().optional(),
														type: zod.string().optional(),
														crowding: zod
															.object({
																passengerFlows: zod
																	.array(
																		zod.object({
																			timeSlice: zod.string().optional(),
																			value: zod.number().optional()
																		})
																	)
																	.optional(),
																trainLoadings: zod
																	.array(
																		zod.object({
																			line: zod.string().optional(),
																			lineDirection: zod.string().optional(),
																			platformDirection: zod.string().optional(),
																			direction: zod.string().optional(),
																			naptanTo: zod.string().optional(),
																			timeSlice: zod.string().optional(),
																			value: zod.number().optional()
																		})
																	)
																	.optional()
															})
															.optional(),
														routeType: zod
															.enum([
																'Unknown',
																'All',
																'Cycle Superhighways',
																'Quietways',
																'Cycleways',
																'Mini-Hollands',
																'Central London Grid',
																'Streetspace Route'
															])
															.optional(),
														status: zod
															.enum([
																'Unknown',
																'All',
																'Open',
																'In Progress',
																'Planned',
																'Planned - Subject to feasibility and consultation.',
																'Not Open'
															])
															.optional(),
														motType: zod.string().optional(),
														network: zod.string().optional()
													})
												)
												.optional(),
											lineGroup: zod
												.array(
													zod.object({
														naptanIdReference: zod.string().optional(),
														stationAtcoCode: zod.string().optional(),
														lineIdentifier: zod.array(zod.string()).optional()
													})
												)
												.optional(),
											lineModeGroups: zod
												.array(
													zod.object({
														modeName: zod.string().optional(),
														lineIdentifier: zod.array(zod.string()).optional()
													})
												)
												.optional(),
											fullName: zod.string().optional(),
											naptanMode: zod.string().optional(),
											status: zod.boolean().optional(),
											individualStopId: zod.string().optional(),
											id: zod.string().optional(),
											url: zod.string().optional(),
											commonName: zod.string().optional(),
											distance: zod.number().optional(),
											placeType: zod.string().optional(),
											additionalProperties: zod
												.array(
													zod.object({
														category: zod.string().optional(),
														key: zod.string().optional(),
														sourceSystemKey: zod.string().optional(),
														value: zod.string().optional(),
														modified: zod.string().datetime().optional()
													})
												)
												.optional(),
											children: zod
												.array(
													zod.object({
														id: zod.string().optional(),
														url: zod.string().optional(),
														commonName: zod.string().optional(),
														distance: zod.number().optional(),
														placeType: zod.string().optional(),
														additionalProperties: zod
															.array(
																zod.object({
																	category: zod.string().optional(),
																	key: zod.string().optional(),
																	sourceSystemKey: zod.string().optional(),
																	value: zod.string().optional(),
																	modified: zod.string().datetime().optional()
																})
															)
															.optional(),
														children: zod.array(zod.any()).optional(),
														childrenUrls: zod.array(zod.string()).optional(),
														lat: zod.number().optional(),
														lon: zod.number().optional()
													})
												)
												.optional(),
											childrenUrls: zod.array(zod.string()).optional(),
											lat: zod.number().optional(),
											lon: zod.number().optional()
										})
										.optional()
								})
								.optional(),
							isEntireRouteSection: zod.boolean().optional(),
							validTo: zod.string().datetime().optional(),
							validFrom: zod.string().datetime().optional(),
							routeSectionNaptanEntrySequence: zod
								.array(
									zod.object({
										ordinal: zod.number().optional(),
										stopPoint: zod
											.object({
												naptanId: zod.string().optional(),
												platformName: zod.string().optional(),
												indicator: zod.string().optional(),
												stopLetter: zod.string().optional(),
												modes: zod.array(zod.string()).optional(),
												icsCode: zod.string().optional(),
												smsCode: zod.string().optional(),
												stopType: zod.string().optional(),
												stationNaptan: zod.string().optional(),
												accessibilitySummary: zod.string().optional(),
												hubNaptanCode: zod.string().optional(),
												lines: zod
													.array(
														zod.object({
															id: zod.string().optional(),
															name: zod.string().optional(),
															uri: zod.string().optional(),
															fullName: zod.string().optional(),
															type: zod.string().optional(),
															crowding: zod
																.object({
																	passengerFlows: zod
																		.array(
																			zod.object({
																				timeSlice: zod.string().optional(),
																				value: zod.number().optional()
																			})
																		)
																		.optional(),
																	trainLoadings: zod
																		.array(
																			zod.object({
																				line: zod.string().optional(),
																				lineDirection: zod.string().optional(),
																				platformDirection: zod.string().optional(),
																				direction: zod.string().optional(),
																				naptanTo: zod.string().optional(),
																				timeSlice: zod.string().optional(),
																				value: zod.number().optional()
																			})
																		)
																		.optional()
																})
																.optional(),
															routeType: zod
																.enum([
																	'Unknown',
																	'All',
																	'Cycle Superhighways',
																	'Quietways',
																	'Cycleways',
																	'Mini-Hollands',
																	'Central London Grid',
																	'Streetspace Route'
																])
																.optional(),
															status: zod
																.enum([
																	'Unknown',
																	'All',
																	'Open',
																	'In Progress',
																	'Planned',
																	'Planned - Subject to feasibility and consultation.',
																	'Not Open'
																])
																.optional(),
															motType: zod.string().optional(),
															network: zod.string().optional()
														})
													)
													.optional(),
												lineGroup: zod
													.array(
														zod.object({
															naptanIdReference: zod.string().optional(),
															stationAtcoCode: zod.string().optional(),
															lineIdentifier: zod.array(zod.string()).optional()
														})
													)
													.optional(),
												lineModeGroups: zod
													.array(
														zod.object({
															modeName: zod.string().optional(),
															lineIdentifier: zod.array(zod.string()).optional()
														})
													)
													.optional(),
												fullName: zod.string().optional(),
												naptanMode: zod.string().optional(),
												status: zod.boolean().optional(),
												individualStopId: zod.string().optional(),
												id: zod.string().optional(),
												url: zod.string().optional(),
												commonName: zod.string().optional(),
												distance: zod.number().optional(),
												placeType: zod.string().optional(),
												additionalProperties: zod
													.array(
														zod.object({
															category: zod.string().optional(),
															key: zod.string().optional(),
															sourceSystemKey: zod.string().optional(),
															value: zod.string().optional(),
															modified: zod.string().datetime().optional()
														})
													)
													.optional(),
												children: zod
													.array(
														zod.object({
															id: zod.string().optional(),
															url: zod.string().optional(),
															commonName: zod.string().optional(),
															distance: zod.number().optional(),
															placeType: zod.string().optional(),
															additionalProperties: zod
																.array(
																	zod.object({
																		category: zod.string().optional(),
																		key: zod.string().optional(),
																		sourceSystemKey: zod.string().optional(),
																		value: zod.string().optional(),
																		modified: zod.string().datetime().optional()
																	})
																)
																.optional(),
															children: zod.array(zod.any()).optional(),
															childrenUrls: zod.array(zod.string()).optional(),
															lat: zod.number().optional(),
															lon: zod.number().optional()
														})
													)
													.optional(),
												childrenUrls: zod.array(zod.string()).optional(),
												lat: zod.number().optional(),
												lon: zod.number().optional()
											})
											.optional()
									})
								)
								.optional()
						})
					)
					.optional(),
				affectedStops: zod
					.array(
						zod.object({
							naptanId: zod.string().optional(),
							platformName: zod.string().optional(),
							indicator: zod.string().optional(),
							stopLetter: zod.string().optional(),
							modes: zod.array(zod.string()).optional(),
							icsCode: zod.string().optional(),
							smsCode: zod.string().optional(),
							stopType: zod.string().optional(),
							stationNaptan: zod.string().optional(),
							accessibilitySummary: zod.string().optional(),
							hubNaptanCode: zod.string().optional(),
							lines: zod
								.array(
									zod.object({
										id: zod.string().optional(),
										name: zod.string().optional(),
										uri: zod.string().optional(),
										fullName: zod.string().optional(),
										type: zod.string().optional(),
										crowding: zod
											.object({
												passengerFlows: zod
													.array(
														zod.object({
															timeSlice: zod.string().optional(),
															value: zod.number().optional()
														})
													)
													.optional(),
												trainLoadings: zod
													.array(
														zod.object({
															line: zod.string().optional(),
															lineDirection: zod.string().optional(),
															platformDirection: zod.string().optional(),
															direction: zod.string().optional(),
															naptanTo: zod.string().optional(),
															timeSlice: zod.string().optional(),
															value: zod.number().optional()
														})
													)
													.optional()
											})
											.optional(),
										routeType: zod
											.enum([
												'Unknown',
												'All',
												'Cycle Superhighways',
												'Quietways',
												'Cycleways',
												'Mini-Hollands',
												'Central London Grid',
												'Streetspace Route'
											])
											.optional(),
										status: zod
											.enum([
												'Unknown',
												'All',
												'Open',
												'In Progress',
												'Planned',
												'Planned - Subject to feasibility and consultation.',
												'Not Open'
											])
											.optional(),
										motType: zod.string().optional(),
										network: zod.string().optional()
									})
								)
								.optional(),
							lineGroup: zod
								.array(
									zod.object({
										naptanIdReference: zod.string().optional(),
										stationAtcoCode: zod.string().optional(),
										lineIdentifier: zod.array(zod.string()).optional()
									})
								)
								.optional(),
							lineModeGroups: zod
								.array(
									zod.object({
										modeName: zod.string().optional(),
										lineIdentifier: zod.array(zod.string()).optional()
									})
								)
								.optional(),
							fullName: zod.string().optional(),
							naptanMode: zod.string().optional(),
							status: zod.boolean().optional(),
							individualStopId: zod.string().optional(),
							id: zod.string().optional(),
							url: zod.string().optional(),
							commonName: zod.string().optional(),
							distance: zod.number().optional(),
							placeType: zod.string().optional(),
							additionalProperties: zod
								.array(
									zod.object({
										category: zod.string().optional(),
										key: zod.string().optional(),
										sourceSystemKey: zod.string().optional(),
										value: zod.string().optional(),
										modified: zod.string().datetime().optional()
									})
								)
								.optional(),
							children: zod
								.array(
									zod.object({
										id: zod.string().optional(),
										url: zod.string().optional(),
										commonName: zod.string().optional(),
										distance: zod.number().optional(),
										placeType: zod.string().optional(),
										additionalProperties: zod
											.array(
												zod.object({
													category: zod.string().optional(),
													key: zod.string().optional(),
													sourceSystemKey: zod.string().optional(),
													value: zod.string().optional(),
													modified: zod.string().datetime().optional()
												})
											)
											.optional(),
										children: zod.array(zod.any()).optional(),
										childrenUrls: zod.array(zod.string()).optional(),
										lat: zod.number().optional(),
										lon: zod.number().optional()
									})
								)
								.optional(),
							childrenUrls: zod.array(zod.string()).optional(),
							lat: zod.number().optional(),
							lon: zod.number().optional()
						})
					)
					.optional(),
				closureText: zod.string().optional()
			})
		)
		.optional(),
	created: zod.string().datetime().optional(),
	modified: zod.string().datetime().optional(),
	lineStatuses: zod
		.array(
			zod.object({
				id: zod.number().optional(),
				lineId: zod.string().optional(),
				statusSeverity: zod.number().optional(),
				statusSeverityDescription: zod.string().optional(),
				reason: zod.string().optional(),
				created: zod.string().datetime().optional(),
				modified: zod.string().datetime().optional(),
				validityPeriods: zod
					.array(
						zod.object({
							fromDate: zod.string().datetime().optional(),
							toDate: zod.string().datetime().optional(),
							isNow: zod.boolean().optional()
						})
					)
					.optional(),
				disruption: zod
					.object({
						category: zod
							.enum([
								'Undefined',
								'RealTime',
								'PlannedWork',
								'Information',
								'Event',
								'Crowding',
								'StatusAlert'
							])
							.optional(),
						type: zod.string().optional(),
						categoryDescription: zod.string().optional(),
						description: zod.string().optional(),
						summary: zod.string().optional(),
						additionalInfo: zod.string().optional(),
						created: zod.string().datetime().optional(),
						lastUpdate: zod.string().datetime().optional(),
						affectedRoutes: zod
							.array(
								zod.object({
									id: zod.string().optional(),
									lineId: zod.string().optional(),
									routeCode: zod.string().optional(),
									name: zod.string().optional(),
									lineString: zod.string().optional(),
									direction: zod.string().optional(),
									originationName: zod.string().optional(),
									destinationName: zod.string().optional(),
									via: zod
										.object({
											ordinal: zod.number().optional(),
											stopPoint: zod
												.object({
													naptanId: zod.string().optional(),
													platformName: zod.string().optional(),
													indicator: zod.string().optional(),
													stopLetter: zod.string().optional(),
													modes: zod.array(zod.string()).optional(),
													icsCode: zod.string().optional(),
													smsCode: zod.string().optional(),
													stopType: zod.string().optional(),
													stationNaptan: zod.string().optional(),
													accessibilitySummary: zod.string().optional(),
													hubNaptanCode: zod.string().optional(),
													lines: zod
														.array(
															zod.object({
																id: zod.string().optional(),
																name: zod.string().optional(),
																uri: zod.string().optional(),
																fullName: zod.string().optional(),
																type: zod.string().optional(),
																crowding: zod
																	.object({
																		passengerFlows: zod
																			.array(
																				zod.object({
																					timeSlice: zod.string().optional(),
																					value: zod.number().optional()
																				})
																			)
																			.optional(),
																		trainLoadings: zod
																			.array(
																				zod.object({
																					line: zod.string().optional(),
																					lineDirection: zod.string().optional(),
																					platformDirection: zod.string().optional(),
																					direction: zod.string().optional(),
																					naptanTo: zod.string().optional(),
																					timeSlice: zod.string().optional(),
																					value: zod.number().optional()
																				})
																			)
																			.optional()
																	})
																	.optional(),
																routeType: zod
																	.enum([
																		'Unknown',
																		'All',
																		'Cycle Superhighways',
																		'Quietways',
																		'Cycleways',
																		'Mini-Hollands',
																		'Central London Grid',
																		'Streetspace Route'
																	])
																	.optional(),
																status: zod
																	.enum([
																		'Unknown',
																		'All',
																		'Open',
																		'In Progress',
																		'Planned',
																		'Planned - Subject to feasibility and consultation.',
																		'Not Open'
																	])
																	.optional(),
																motType: zod.string().optional(),
																network: zod.string().optional()
															})
														)
														.optional(),
													lineGroup: zod
														.array(
															zod.object({
																naptanIdReference: zod.string().optional(),
																stationAtcoCode: zod.string().optional(),
																lineIdentifier: zod.array(zod.string()).optional()
															})
														)
														.optional(),
													lineModeGroups: zod
														.array(
															zod.object({
																modeName: zod.string().optional(),
																lineIdentifier: zod.array(zod.string()).optional()
															})
														)
														.optional(),
													fullName: zod.string().optional(),
													naptanMode: zod.string().optional(),
													status: zod.boolean().optional(),
													individualStopId: zod.string().optional(),
													id: zod.string().optional(),
													url: zod.string().optional(),
													commonName: zod.string().optional(),
													distance: zod.number().optional(),
													placeType: zod.string().optional(),
													additionalProperties: zod
														.array(
															zod.object({
																category: zod.string().optional(),
																key: zod.string().optional(),
																sourceSystemKey: zod.string().optional(),
																value: zod.string().optional(),
																modified: zod.string().datetime().optional()
															})
														)
														.optional(),
													children: zod
														.array(
															zod.object({
																id: zod.string().optional(),
																url: zod.string().optional(),
																commonName: zod.string().optional(),
																distance: zod.number().optional(),
																placeType: zod.string().optional(),
																additionalProperties: zod
																	.array(
																		zod.object({
																			category: zod.string().optional(),
																			key: zod.string().optional(),
																			sourceSystemKey: zod.string().optional(),
																			value: zod.string().optional(),
																			modified: zod.string().datetime().optional()
																		})
																	)
																	.optional(),
																children: zod.array(zod.any()).optional(),
																childrenUrls: zod.array(zod.string()).optional(),
																lat: zod.number().optional(),
																lon: zod.number().optional()
															})
														)
														.optional(),
													childrenUrls: zod.array(zod.string()).optional(),
													lat: zod.number().optional(),
													lon: zod.number().optional()
												})
												.optional()
										})
										.optional(),
									isEntireRouteSection: zod.boolean().optional(),
									validTo: zod.string().datetime().optional(),
									validFrom: zod.string().datetime().optional(),
									routeSectionNaptanEntrySequence: zod
										.array(
											zod.object({
												ordinal: zod.number().optional(),
												stopPoint: zod
													.object({
														naptanId: zod.string().optional(),
														platformName: zod.string().optional(),
														indicator: zod.string().optional(),
														stopLetter: zod.string().optional(),
														modes: zod.array(zod.string()).optional(),
														icsCode: zod.string().optional(),
														smsCode: zod.string().optional(),
														stopType: zod.string().optional(),
														stationNaptan: zod.string().optional(),
														accessibilitySummary: zod.string().optional(),
														hubNaptanCode: zod.string().optional(),
														lines: zod
															.array(
																zod.object({
																	id: zod.string().optional(),
																	name: zod.string().optional(),
																	uri: zod.string().optional(),
																	fullName: zod.string().optional(),
																	type: zod.string().optional(),
																	crowding: zod
																		.object({
																			passengerFlows: zod
																				.array(
																					zod.object({
																						timeSlice: zod.string().optional(),
																						value: zod.number().optional()
																					})
																				)
																				.optional(),
																			trainLoadings: zod
																				.array(
																					zod.object({
																						line: zod.string().optional(),
																						lineDirection: zod.string().optional(),
																						platformDirection: zod.string().optional(),
																						direction: zod.string().optional(),
																						naptanTo: zod.string().optional(),
																						timeSlice: zod.string().optional(),
																						value: zod.number().optional()
																					})
																				)
																				.optional()
																		})
																		.optional(),
																	routeType: zod
																		.enum([
																			'Unknown',
																			'All',
																			'Cycle Superhighways',
																			'Quietways',
																			'Cycleways',
																			'Mini-Hollands',
																			'Central London Grid',
																			'Streetspace Route'
																		])
																		.optional(),
																	status: zod
																		.enum([
																			'Unknown',
																			'All',
																			'Open',
																			'In Progress',
																			'Planned',
																			'Planned - Subject to feasibility and consultation.',
																			'Not Open'
																		])
																		.optional(),
																	motType: zod.string().optional(),
																	network: zod.string().optional()
																})
															)
															.optional(),
														lineGroup: zod
															.array(
																zod.object({
																	naptanIdReference: zod.string().optional(),
																	stationAtcoCode: zod.string().optional(),
																	lineIdentifier: zod.array(zod.string()).optional()
																})
															)
															.optional(),
														lineModeGroups: zod
															.array(
																zod.object({
																	modeName: zod.string().optional(),
																	lineIdentifier: zod.array(zod.string()).optional()
																})
															)
															.optional(),
														fullName: zod.string().optional(),
														naptanMode: zod.string().optional(),
														status: zod.boolean().optional(),
														individualStopId: zod.string().optional(),
														id: zod.string().optional(),
														url: zod.string().optional(),
														commonName: zod.string().optional(),
														distance: zod.number().optional(),
														placeType: zod.string().optional(),
														additionalProperties: zod
															.array(
																zod.object({
																	category: zod.string().optional(),
																	key: zod.string().optional(),
																	sourceSystemKey: zod.string().optional(),
																	value: zod.string().optional(),
																	modified: zod.string().datetime().optional()
																})
															)
															.optional(),
														children: zod
															.array(
																zod.object({
																	id: zod.string().optional(),
																	url: zod.string().optional(),
																	commonName: zod.string().optional(),
																	distance: zod.number().optional(),
																	placeType: zod.string().optional(),
																	additionalProperties: zod
																		.array(
																			zod.object({
																				category: zod.string().optional(),
																				key: zod.string().optional(),
																				sourceSystemKey: zod.string().optional(),
																				value: zod.string().optional(),
																				modified: zod.string().datetime().optional()
																			})
																		)
																		.optional(),
																	children: zod.array(zod.any()).optional(),
																	childrenUrls: zod.array(zod.string()).optional(),
																	lat: zod.number().optional(),
																	lon: zod.number().optional()
																})
															)
															.optional(),
														childrenUrls: zod.array(zod.string()).optional(),
														lat: zod.number().optional(),
														lon: zod.number().optional()
													})
													.optional()
											})
										)
										.optional()
								})
							)
							.optional(),
						affectedStops: zod
							.array(
								zod.object({
									naptanId: zod.string().optional(),
									platformName: zod.string().optional(),
									indicator: zod.string().optional(),
									stopLetter: zod.string().optional(),
									modes: zod.array(zod.string()).optional(),
									icsCode: zod.string().optional(),
									smsCode: zod.string().optional(),
									stopType: zod.string().optional(),
									stationNaptan: zod.string().optional(),
									accessibilitySummary: zod.string().optional(),
									hubNaptanCode: zod.string().optional(),
									lines: zod
										.array(
											zod.object({
												id: zod.string().optional(),
												name: zod.string().optional(),
												uri: zod.string().optional(),
												fullName: zod.string().optional(),
												type: zod.string().optional(),
												crowding: zod
													.object({
														passengerFlows: zod
															.array(
																zod.object({
																	timeSlice: zod.string().optional(),
																	value: zod.number().optional()
																})
															)
															.optional(),
														trainLoadings: zod
															.array(
																zod.object({
																	line: zod.string().optional(),
																	lineDirection: zod.string().optional(),
																	platformDirection: zod.string().optional(),
																	direction: zod.string().optional(),
																	naptanTo: zod.string().optional(),
																	timeSlice: zod.string().optional(),
																	value: zod.number().optional()
																})
															)
															.optional()
													})
													.optional(),
												routeType: zod
													.enum([
														'Unknown',
														'All',
														'Cycle Superhighways',
														'Quietways',
														'Cycleways',
														'Mini-Hollands',
														'Central London Grid',
														'Streetspace Route'
													])
													.optional(),
												status: zod
													.enum([
														'Unknown',
														'All',
														'Open',
														'In Progress',
														'Planned',
														'Planned - Subject to feasibility and consultation.',
														'Not Open'
													])
													.optional(),
												motType: zod.string().optional(),
												network: zod.string().optional()
											})
										)
										.optional(),
									lineGroup: zod
										.array(
											zod.object({
												naptanIdReference: zod.string().optional(),
												stationAtcoCode: zod.string().optional(),
												lineIdentifier: zod.array(zod.string()).optional()
											})
										)
										.optional(),
									lineModeGroups: zod
										.array(
											zod.object({
												modeName: zod.string().optional(),
												lineIdentifier: zod.array(zod.string()).optional()
											})
										)
										.optional(),
									fullName: zod.string().optional(),
									naptanMode: zod.string().optional(),
									status: zod.boolean().optional(),
									individualStopId: zod.string().optional(),
									id: zod.string().optional(),
									url: zod.string().optional(),
									commonName: zod.string().optional(),
									distance: zod.number().optional(),
									placeType: zod.string().optional(),
									additionalProperties: zod
										.array(
											zod.object({
												category: zod.string().optional(),
												key: zod.string().optional(),
												sourceSystemKey: zod.string().optional(),
												value: zod.string().optional(),
												modified: zod.string().datetime().optional()
											})
										)
										.optional(),
									children: zod
										.array(
											zod.object({
												id: zod.string().optional(),
												url: zod.string().optional(),
												commonName: zod.string().optional(),
												distance: zod.number().optional(),
												placeType: zod.string().optional(),
												additionalProperties: zod
													.array(
														zod.object({
															category: zod.string().optional(),
															key: zod.string().optional(),
															sourceSystemKey: zod.string().optional(),
															value: zod.string().optional(),
															modified: zod.string().datetime().optional()
														})
													)
													.optional(),
												children: zod.array(zod.any()).optional(),
												childrenUrls: zod.array(zod.string()).optional(),
												lat: zod.number().optional(),
												lon: zod.number().optional()
											})
										)
										.optional(),
									childrenUrls: zod.array(zod.string()).optional(),
									lat: zod.number().optional(),
									lon: zod.number().optional()
								})
							)
							.optional(),
						closureText: zod.string().optional()
					})
					.optional()
			})
		)
		.optional(),
	routeSections: zod
		.array(
			zod.object({
				routeCode: zod.string().optional(),
				name: zod.string().optional(),
				direction: zod.string().optional(),
				originationName: zod.string().optional(),
				destinationName: zod.string().optional(),
				originator: zod.string().optional(),
				destination: zod.string().optional(),
				serviceType: zod.string().optional(),
				validTo: zod.string().datetime().optional(),
				validFrom: zod.string().datetime().optional()
			})
		)
		.optional(),
	serviceTypes: zod
		.array(
			zod.object({
				name: zod.string().optional(),
				uri: zod.string().optional()
			})
		)
		.optional(),
	crowding: zod
		.object({
			passengerFlows: zod
				.array(
					zod.object({
						timeSlice: zod.string().optional(),
						value: zod.number().optional()
					})
				)
				.optional(),
			trainLoadings: zod
				.array(
					zod.object({
						line: zod.string().optional(),
						lineDirection: zod.string().optional(),
						platformDirection: zod.string().optional(),
						direction: zod.string().optional(),
						naptanTo: zod.string().optional(),
						timeSlice: zod.string().optional(),
						value: zod.number().optional()
					})
				)
				.optional()
		})
		.optional()
});
export const lineRouteByModeResponse = zod.array(lineRouteByModeResponseItem);

/**
 * @summary Gets all valid routes for given line id, including the sequence of stops on each route.
 */
export const lineRouteSequenceParams = zod.object({
	id: zod.string(),
	direction: zod.enum(['inbound', 'outbound', 'all'])
});

export const lineRouteSequenceQueryParams = zod.object({
	serviceTypes: zod.array(zod.enum(['Regular', 'Night'])).optional(),
	excludeCrowding: zod.boolean().optional()
});

export const lineRouteSequenceResponse = zod.object({
	lineId: zod.string().optional(),
	lineName: zod.string().optional(),
	direction: zod.string().optional(),
	isOutboundOnly: zod.boolean().optional(),
	mode: zod.string().optional(),
	lineStrings: zod.array(zod.string()).optional(),
	stations: zod
		.array(
			zod.object({
				routeId: zod.number().optional(),
				parentId: zod.string().optional(),
				stationId: zod.string().optional(),
				icsId: zod.string().optional(),
				topMostParentId: zod.string().optional(),
				direction: zod.string().optional(),
				towards: zod.string().optional(),
				modes: zod.array(zod.string()).optional(),
				stopType: zod.string().optional(),
				stopLetter: zod.string().optional(),
				zone: zod.string().optional(),
				accessibilitySummary: zod.string().optional(),
				hasDisruption: zod.boolean().optional(),
				lines: zod
					.array(
						zod.object({
							id: zod.string().optional(),
							name: zod.string().optional(),
							uri: zod.string().optional(),
							fullName: zod.string().optional(),
							type: zod.string().optional(),
							crowding: zod
								.object({
									passengerFlows: zod
										.array(
											zod.object({
												timeSlice: zod.string().optional(),
												value: zod.number().optional()
											})
										)
										.optional(),
									trainLoadings: zod
										.array(
											zod.object({
												line: zod.string().optional(),
												lineDirection: zod.string().optional(),
												platformDirection: zod.string().optional(),
												direction: zod.string().optional(),
												naptanTo: zod.string().optional(),
												timeSlice: zod.string().optional(),
												value: zod.number().optional()
											})
										)
										.optional()
								})
								.optional(),
							routeType: zod
								.enum([
									'Unknown',
									'All',
									'Cycle Superhighways',
									'Quietways',
									'Cycleways',
									'Mini-Hollands',
									'Central London Grid',
									'Streetspace Route'
								])
								.optional(),
							status: zod
								.enum([
									'Unknown',
									'All',
									'Open',
									'In Progress',
									'Planned',
									'Planned - Subject to feasibility and consultation.',
									'Not Open'
								])
								.optional(),
							motType: zod.string().optional(),
							network: zod.string().optional()
						})
					)
					.optional(),
				status: zod.boolean().optional(),
				id: zod.string().optional(),
				url: zod.string().optional(),
				name: zod.string().optional(),
				lat: zod.number().optional(),
				lon: zod.number().optional()
			})
		)
		.optional(),
	stopPointSequences: zod
		.array(
			zod.object({
				lineId: zod.string().optional(),
				lineName: zod.string().optional(),
				direction: zod.string().optional(),
				branchId: zod.number().optional(),
				nextBranchIds: zod.array(zod.number()).optional(),
				prevBranchIds: zod.array(zod.number()).optional(),
				stopPoint: zod
					.array(
						zod.object({
							routeId: zod.number().optional(),
							parentId: zod.string().optional(),
							stationId: zod.string().optional(),
							icsId: zod.string().optional(),
							topMostParentId: zod.string().optional(),
							direction: zod.string().optional(),
							towards: zod.string().optional(),
							modes: zod.array(zod.string()).optional(),
							stopType: zod.string().optional(),
							stopLetter: zod.string().optional(),
							zone: zod.string().optional(),
							accessibilitySummary: zod.string().optional(),
							hasDisruption: zod.boolean().optional(),
							lines: zod
								.array(
									zod.object({
										id: zod.string().optional(),
										name: zod.string().optional(),
										uri: zod.string().optional(),
										fullName: zod.string().optional(),
										type: zod.string().optional(),
										crowding: zod
											.object({
												passengerFlows: zod
													.array(
														zod.object({
															timeSlice: zod.string().optional(),
															value: zod.number().optional()
														})
													)
													.optional(),
												trainLoadings: zod
													.array(
														zod.object({
															line: zod.string().optional(),
															lineDirection: zod.string().optional(),
															platformDirection: zod.string().optional(),
															direction: zod.string().optional(),
															naptanTo: zod.string().optional(),
															timeSlice: zod.string().optional(),
															value: zod.number().optional()
														})
													)
													.optional()
											})
											.optional(),
										routeType: zod
											.enum([
												'Unknown',
												'All',
												'Cycle Superhighways',
												'Quietways',
												'Cycleways',
												'Mini-Hollands',
												'Central London Grid',
												'Streetspace Route'
											])
											.optional(),
										status: zod
											.enum([
												'Unknown',
												'All',
												'Open',
												'In Progress',
												'Planned',
												'Planned - Subject to feasibility and consultation.',
												'Not Open'
											])
											.optional(),
										motType: zod.string().optional(),
										network: zod.string().optional()
									})
								)
								.optional(),
							status: zod.boolean().optional(),
							id: zod.string().optional(),
							url: zod.string().optional(),
							name: zod.string().optional(),
							lat: zod.number().optional(),
							lon: zod.number().optional()
						})
					)
					.optional(),
				serviceType: zod.enum(['Regular', 'Night']).optional()
			})
		)
		.optional(),
	orderedLineRoutes: zod
		.array(
			zod.object({
				name: zod.string().optional(),
				naptanIds: zod.array(zod.string()).optional(),
				serviceType: zod.string().optional()
			})
		)
		.optional()
});

/**
 * @summary Gets the line status for given line ids during the provided dates e.g Minor Delays
 */
export const lineStatusParams = zod.object({
	ids: zod.array(zod.string()),
	startDate: zod.string(),
	endDate: zod.string()
});

export const lineStatusQueryParams = zod.object({
	detail: zod.boolean().optional(),
	'dateRange.startDate': zod.string().datetime().optional(),
	'dateRange.endDate': zod.string().datetime().optional()
});

export const lineStatusResponseItem = zod.object({
	id: zod.string().optional(),
	name: zod.string().optional(),
	modeName: zod.string().optional(),
	disruptions: zod
		.array(
			zod.object({
				category: zod
					.enum([
						'Undefined',
						'RealTime',
						'PlannedWork',
						'Information',
						'Event',
						'Crowding',
						'StatusAlert'
					])
					.optional(),
				type: zod.string().optional(),
				categoryDescription: zod.string().optional(),
				description: zod.string().optional(),
				summary: zod.string().optional(),
				additionalInfo: zod.string().optional(),
				created: zod.string().datetime().optional(),
				lastUpdate: zod.string().datetime().optional(),
				affectedRoutes: zod
					.array(
						zod.object({
							id: zod.string().optional(),
							lineId: zod.string().optional(),
							routeCode: zod.string().optional(),
							name: zod.string().optional(),
							lineString: zod.string().optional(),
							direction: zod.string().optional(),
							originationName: zod.string().optional(),
							destinationName: zod.string().optional(),
							via: zod
								.object({
									ordinal: zod.number().optional(),
									stopPoint: zod
										.object({
											naptanId: zod.string().optional(),
											platformName: zod.string().optional(),
											indicator: zod.string().optional(),
											stopLetter: zod.string().optional(),
											modes: zod.array(zod.string()).optional(),
											icsCode: zod.string().optional(),
											smsCode: zod.string().optional(),
											stopType: zod.string().optional(),
											stationNaptan: zod.string().optional(),
											accessibilitySummary: zod.string().optional(),
											hubNaptanCode: zod.string().optional(),
											lines: zod
												.array(
													zod.object({
														id: zod.string().optional(),
														name: zod.string().optional(),
														uri: zod.string().optional(),
														fullName: zod.string().optional(),
														type: zod.string().optional(),
														crowding: zod
															.object({
																passengerFlows: zod
																	.array(
																		zod.object({
																			timeSlice: zod.string().optional(),
																			value: zod.number().optional()
																		})
																	)
																	.optional(),
																trainLoadings: zod
																	.array(
																		zod.object({
																			line: zod.string().optional(),
																			lineDirection: zod.string().optional(),
																			platformDirection: zod.string().optional(),
																			direction: zod.string().optional(),
																			naptanTo: zod.string().optional(),
																			timeSlice: zod.string().optional(),
																			value: zod.number().optional()
																		})
																	)
																	.optional()
															})
															.optional(),
														routeType: zod
															.enum([
																'Unknown',
																'All',
																'Cycle Superhighways',
																'Quietways',
																'Cycleways',
																'Mini-Hollands',
																'Central London Grid',
																'Streetspace Route'
															])
															.optional(),
														status: zod
															.enum([
																'Unknown',
																'All',
																'Open',
																'In Progress',
																'Planned',
																'Planned - Subject to feasibility and consultation.',
																'Not Open'
															])
															.optional(),
														motType: zod.string().optional(),
														network: zod.string().optional()
													})
												)
												.optional(),
											lineGroup: zod
												.array(
													zod.object({
														naptanIdReference: zod.string().optional(),
														stationAtcoCode: zod.string().optional(),
														lineIdentifier: zod.array(zod.string()).optional()
													})
												)
												.optional(),
											lineModeGroups: zod
												.array(
													zod.object({
														modeName: zod.string().optional(),
														lineIdentifier: zod.array(zod.string()).optional()
													})
												)
												.optional(),
											fullName: zod.string().optional(),
											naptanMode: zod.string().optional(),
											status: zod.boolean().optional(),
											individualStopId: zod.string().optional(),
											id: zod.string().optional(),
											url: zod.string().optional(),
											commonName: zod.string().optional(),
											distance: zod.number().optional(),
											placeType: zod.string().optional(),
											additionalProperties: zod
												.array(
													zod.object({
														category: zod.string().optional(),
														key: zod.string().optional(),
														sourceSystemKey: zod.string().optional(),
														value: zod.string().optional(),
														modified: zod.string().datetime().optional()
													})
												)
												.optional(),
											children: zod
												.array(
													zod.object({
														id: zod.string().optional(),
														url: zod.string().optional(),
														commonName: zod.string().optional(),
														distance: zod.number().optional(),
														placeType: zod.string().optional(),
														additionalProperties: zod
															.array(
																zod.object({
																	category: zod.string().optional(),
																	key: zod.string().optional(),
																	sourceSystemKey: zod.string().optional(),
																	value: zod.string().optional(),
																	modified: zod.string().datetime().optional()
																})
															)
															.optional(),
														children: zod.array(zod.any()).optional(),
														childrenUrls: zod.array(zod.string()).optional(),
														lat: zod.number().optional(),
														lon: zod.number().optional()
													})
												)
												.optional(),
											childrenUrls: zod.array(zod.string()).optional(),
											lat: zod.number().optional(),
											lon: zod.number().optional()
										})
										.optional()
								})
								.optional(),
							isEntireRouteSection: zod.boolean().optional(),
							validTo: zod.string().datetime().optional(),
							validFrom: zod.string().datetime().optional(),
							routeSectionNaptanEntrySequence: zod
								.array(
									zod.object({
										ordinal: zod.number().optional(),
										stopPoint: zod
											.object({
												naptanId: zod.string().optional(),
												platformName: zod.string().optional(),
												indicator: zod.string().optional(),
												stopLetter: zod.string().optional(),
												modes: zod.array(zod.string()).optional(),
												icsCode: zod.string().optional(),
												smsCode: zod.string().optional(),
												stopType: zod.string().optional(),
												stationNaptan: zod.string().optional(),
												accessibilitySummary: zod.string().optional(),
												hubNaptanCode: zod.string().optional(),
												lines: zod
													.array(
														zod.object({
															id: zod.string().optional(),
															name: zod.string().optional(),
															uri: zod.string().optional(),
															fullName: zod.string().optional(),
															type: zod.string().optional(),
															crowding: zod
																.object({
																	passengerFlows: zod
																		.array(
																			zod.object({
																				timeSlice: zod.string().optional(),
																				value: zod.number().optional()
																			})
																		)
																		.optional(),
																	trainLoadings: zod
																		.array(
																			zod.object({
																				line: zod.string().optional(),
																				lineDirection: zod.string().optional(),
																				platformDirection: zod.string().optional(),
																				direction: zod.string().optional(),
																				naptanTo: zod.string().optional(),
																				timeSlice: zod.string().optional(),
																				value: zod.number().optional()
																			})
																		)
																		.optional()
																})
																.optional(),
															routeType: zod
																.enum([
																	'Unknown',
																	'All',
																	'Cycle Superhighways',
																	'Quietways',
																	'Cycleways',
																	'Mini-Hollands',
																	'Central London Grid',
																	'Streetspace Route'
																])
																.optional(),
															status: zod
																.enum([
																	'Unknown',
																	'All',
																	'Open',
																	'In Progress',
																	'Planned',
																	'Planned - Subject to feasibility and consultation.',
																	'Not Open'
																])
																.optional(),
															motType: zod.string().optional(),
															network: zod.string().optional()
														})
													)
													.optional(),
												lineGroup: zod
													.array(
														zod.object({
															naptanIdReference: zod.string().optional(),
															stationAtcoCode: zod.string().optional(),
															lineIdentifier: zod.array(zod.string()).optional()
														})
													)
													.optional(),
												lineModeGroups: zod
													.array(
														zod.object({
															modeName: zod.string().optional(),
															lineIdentifier: zod.array(zod.string()).optional()
														})
													)
													.optional(),
												fullName: zod.string().optional(),
												naptanMode: zod.string().optional(),
												status: zod.boolean().optional(),
												individualStopId: zod.string().optional(),
												id: zod.string().optional(),
												url: zod.string().optional(),
												commonName: zod.string().optional(),
												distance: zod.number().optional(),
												placeType: zod.string().optional(),
												additionalProperties: zod
													.array(
														zod.object({
															category: zod.string().optional(),
															key: zod.string().optional(),
															sourceSystemKey: zod.string().optional(),
															value: zod.string().optional(),
															modified: zod.string().datetime().optional()
														})
													)
													.optional(),
												children: zod
													.array(
														zod.object({
															id: zod.string().optional(),
															url: zod.string().optional(),
															commonName: zod.string().optional(),
															distance: zod.number().optional(),
															placeType: zod.string().optional(),
															additionalProperties: zod
																.array(
																	zod.object({
																		category: zod.string().optional(),
																		key: zod.string().optional(),
																		sourceSystemKey: zod.string().optional(),
																		value: zod.string().optional(),
																		modified: zod.string().datetime().optional()
																	})
																)
																.optional(),
															children: zod.array(zod.any()).optional(),
															childrenUrls: zod.array(zod.string()).optional(),
															lat: zod.number().optional(),
															lon: zod.number().optional()
														})
													)
													.optional(),
												childrenUrls: zod.array(zod.string()).optional(),
												lat: zod.number().optional(),
												lon: zod.number().optional()
											})
											.optional()
									})
								)
								.optional()
						})
					)
					.optional(),
				affectedStops: zod
					.array(
						zod.object({
							naptanId: zod.string().optional(),
							platformName: zod.string().optional(),
							indicator: zod.string().optional(),
							stopLetter: zod.string().optional(),
							modes: zod.array(zod.string()).optional(),
							icsCode: zod.string().optional(),
							smsCode: zod.string().optional(),
							stopType: zod.string().optional(),
							stationNaptan: zod.string().optional(),
							accessibilitySummary: zod.string().optional(),
							hubNaptanCode: zod.string().optional(),
							lines: zod
								.array(
									zod.object({
										id: zod.string().optional(),
										name: zod.string().optional(),
										uri: zod.string().optional(),
										fullName: zod.string().optional(),
										type: zod.string().optional(),
										crowding: zod
											.object({
												passengerFlows: zod
													.array(
														zod.object({
															timeSlice: zod.string().optional(),
															value: zod.number().optional()
														})
													)
													.optional(),
												trainLoadings: zod
													.array(
														zod.object({
															line: zod.string().optional(),
															lineDirection: zod.string().optional(),
															platformDirection: zod.string().optional(),
															direction: zod.string().optional(),
															naptanTo: zod.string().optional(),
															timeSlice: zod.string().optional(),
															value: zod.number().optional()
														})
													)
													.optional()
											})
											.optional(),
										routeType: zod
											.enum([
												'Unknown',
												'All',
												'Cycle Superhighways',
												'Quietways',
												'Cycleways',
												'Mini-Hollands',
												'Central London Grid',
												'Streetspace Route'
											])
											.optional(),
										status: zod
											.enum([
												'Unknown',
												'All',
												'Open',
												'In Progress',
												'Planned',
												'Planned - Subject to feasibility and consultation.',
												'Not Open'
											])
											.optional(),
										motType: zod.string().optional(),
										network: zod.string().optional()
									})
								)
								.optional(),
							lineGroup: zod
								.array(
									zod.object({
										naptanIdReference: zod.string().optional(),
										stationAtcoCode: zod.string().optional(),
										lineIdentifier: zod.array(zod.string()).optional()
									})
								)
								.optional(),
							lineModeGroups: zod
								.array(
									zod.object({
										modeName: zod.string().optional(),
										lineIdentifier: zod.array(zod.string()).optional()
									})
								)
								.optional(),
							fullName: zod.string().optional(),
							naptanMode: zod.string().optional(),
							status: zod.boolean().optional(),
							individualStopId: zod.string().optional(),
							id: zod.string().optional(),
							url: zod.string().optional(),
							commonName: zod.string().optional(),
							distance: zod.number().optional(),
							placeType: zod.string().optional(),
							additionalProperties: zod
								.array(
									zod.object({
										category: zod.string().optional(),
										key: zod.string().optional(),
										sourceSystemKey: zod.string().optional(),
										value: zod.string().optional(),
										modified: zod.string().datetime().optional()
									})
								)
								.optional(),
							children: zod
								.array(
									zod.object({
										id: zod.string().optional(),
										url: zod.string().optional(),
										commonName: zod.string().optional(),
										distance: zod.number().optional(),
										placeType: zod.string().optional(),
										additionalProperties: zod
											.array(
												zod.object({
													category: zod.string().optional(),
													key: zod.string().optional(),
													sourceSystemKey: zod.string().optional(),
													value: zod.string().optional(),
													modified: zod.string().datetime().optional()
												})
											)
											.optional(),
										children: zod.array(zod.any()).optional(),
										childrenUrls: zod.array(zod.string()).optional(),
										lat: zod.number().optional(),
										lon: zod.number().optional()
									})
								)
								.optional(),
							childrenUrls: zod.array(zod.string()).optional(),
							lat: zod.number().optional(),
							lon: zod.number().optional()
						})
					)
					.optional(),
				closureText: zod.string().optional()
			})
		)
		.optional(),
	created: zod.string().datetime().optional(),
	modified: zod.string().datetime().optional(),
	lineStatuses: zod
		.array(
			zod.object({
				id: zod.number().optional(),
				lineId: zod.string().optional(),
				statusSeverity: zod.number().optional(),
				statusSeverityDescription: zod.string().optional(),
				reason: zod.string().optional(),
				created: zod.string().datetime().optional(),
				modified: zod.string().datetime().optional(),
				validityPeriods: zod
					.array(
						zod.object({
							fromDate: zod.string().datetime().optional(),
							toDate: zod.string().datetime().optional(),
							isNow: zod.boolean().optional()
						})
					)
					.optional(),
				disruption: zod
					.object({
						category: zod
							.enum([
								'Undefined',
								'RealTime',
								'PlannedWork',
								'Information',
								'Event',
								'Crowding',
								'StatusAlert'
							])
							.optional(),
						type: zod.string().optional(),
						categoryDescription: zod.string().optional(),
						description: zod.string().optional(),
						summary: zod.string().optional(),
						additionalInfo: zod.string().optional(),
						created: zod.string().datetime().optional(),
						lastUpdate: zod.string().datetime().optional(),
						affectedRoutes: zod
							.array(
								zod.object({
									id: zod.string().optional(),
									lineId: zod.string().optional(),
									routeCode: zod.string().optional(),
									name: zod.string().optional(),
									lineString: zod.string().optional(),
									direction: zod.string().optional(),
									originationName: zod.string().optional(),
									destinationName: zod.string().optional(),
									via: zod
										.object({
											ordinal: zod.number().optional(),
											stopPoint: zod
												.object({
													naptanId: zod.string().optional(),
													platformName: zod.string().optional(),
													indicator: zod.string().optional(),
													stopLetter: zod.string().optional(),
													modes: zod.array(zod.string()).optional(),
													icsCode: zod.string().optional(),
													smsCode: zod.string().optional(),
													stopType: zod.string().optional(),
													stationNaptan: zod.string().optional(),
													accessibilitySummary: zod.string().optional(),
													hubNaptanCode: zod.string().optional(),
													lines: zod
														.array(
															zod.object({
																id: zod.string().optional(),
																name: zod.string().optional(),
																uri: zod.string().optional(),
																fullName: zod.string().optional(),
																type: zod.string().optional(),
																crowding: zod
																	.object({
																		passengerFlows: zod
																			.array(
																				zod.object({
																					timeSlice: zod.string().optional(),
																					value: zod.number().optional()
																				})
																			)
																			.optional(),
																		trainLoadings: zod
																			.array(
																				zod.object({
																					line: zod.string().optional(),
																					lineDirection: zod.string().optional(),
																					platformDirection: zod.string().optional(),
																					direction: zod.string().optional(),
																					naptanTo: zod.string().optional(),
																					timeSlice: zod.string().optional(),
																					value: zod.number().optional()
																				})
																			)
																			.optional()
																	})
																	.optional(),
																routeType: zod
																	.enum([
																		'Unknown',
																		'All',
																		'Cycle Superhighways',
																		'Quietways',
																		'Cycleways',
																		'Mini-Hollands',
																		'Central London Grid',
																		'Streetspace Route'
																	])
																	.optional(),
																status: zod
																	.enum([
																		'Unknown',
																		'All',
																		'Open',
																		'In Progress',
																		'Planned',
																		'Planned - Subject to feasibility and consultation.',
																		'Not Open'
																	])
																	.optional(),
																motType: zod.string().optional(),
																network: zod.string().optional()
															})
														)
														.optional(),
													lineGroup: zod
														.array(
															zod.object({
																naptanIdReference: zod.string().optional(),
																stationAtcoCode: zod.string().optional(),
																lineIdentifier: zod.array(zod.string()).optional()
															})
														)
														.optional(),
													lineModeGroups: zod
														.array(
															zod.object({
																modeName: zod.string().optional(),
																lineIdentifier: zod.array(zod.string()).optional()
															})
														)
														.optional(),
													fullName: zod.string().optional(),
													naptanMode: zod.string().optional(),
													status: zod.boolean().optional(),
													individualStopId: zod.string().optional(),
													id: zod.string().optional(),
													url: zod.string().optional(),
													commonName: zod.string().optional(),
													distance: zod.number().optional(),
													placeType: zod.string().optional(),
													additionalProperties: zod
														.array(
															zod.object({
																category: zod.string().optional(),
																key: zod.string().optional(),
																sourceSystemKey: zod.string().optional(),
																value: zod.string().optional(),
																modified: zod.string().datetime().optional()
															})
														)
														.optional(),
													children: zod
														.array(
															zod.object({
																id: zod.string().optional(),
																url: zod.string().optional(),
																commonName: zod.string().optional(),
																distance: zod.number().optional(),
																placeType: zod.string().optional(),
																additionalProperties: zod
																	.array(
																		zod.object({
																			category: zod.string().optional(),
																			key: zod.string().optional(),
																			sourceSystemKey: zod.string().optional(),
																			value: zod.string().optional(),
																			modified: zod.string().datetime().optional()
																		})
																	)
																	.optional(),
																children: zod.array(zod.any()).optional(),
																childrenUrls: zod.array(zod.string()).optional(),
																lat: zod.number().optional(),
																lon: zod.number().optional()
															})
														)
														.optional(),
													childrenUrls: zod.array(zod.string()).optional(),
													lat: zod.number().optional(),
													lon: zod.number().optional()
												})
												.optional()
										})
										.optional(),
									isEntireRouteSection: zod.boolean().optional(),
									validTo: zod.string().datetime().optional(),
									validFrom: zod.string().datetime().optional(),
									routeSectionNaptanEntrySequence: zod
										.array(
											zod.object({
												ordinal: zod.number().optional(),
												stopPoint: zod
													.object({
														naptanId: zod.string().optional(),
														platformName: zod.string().optional(),
														indicator: zod.string().optional(),
														stopLetter: zod.string().optional(),
														modes: zod.array(zod.string()).optional(),
														icsCode: zod.string().optional(),
														smsCode: zod.string().optional(),
														stopType: zod.string().optional(),
														stationNaptan: zod.string().optional(),
														accessibilitySummary: zod.string().optional(),
														hubNaptanCode: zod.string().optional(),
														lines: zod
															.array(
																zod.object({
																	id: zod.string().optional(),
																	name: zod.string().optional(),
																	uri: zod.string().optional(),
																	fullName: zod.string().optional(),
																	type: zod.string().optional(),
																	crowding: zod
																		.object({
																			passengerFlows: zod
																				.array(
																					zod.object({
																						timeSlice: zod.string().optional(),
																						value: zod.number().optional()
																					})
																				)
																				.optional(),
																			trainLoadings: zod
																				.array(
																					zod.object({
																						line: zod.string().optional(),
																						lineDirection: zod.string().optional(),
																						platformDirection: zod.string().optional(),
																						direction: zod.string().optional(),
																						naptanTo: zod.string().optional(),
																						timeSlice: zod.string().optional(),
																						value: zod.number().optional()
																					})
																				)
																				.optional()
																		})
																		.optional(),
																	routeType: zod
																		.enum([
																			'Unknown',
																			'All',
																			'Cycle Superhighways',
																			'Quietways',
																			'Cycleways',
																			'Mini-Hollands',
																			'Central London Grid',
																			'Streetspace Route'
																		])
																		.optional(),
																	status: zod
																		.enum([
																			'Unknown',
																			'All',
																			'Open',
																			'In Progress',
																			'Planned',
																			'Planned - Subject to feasibility and consultation.',
																			'Not Open'
																		])
																		.optional(),
																	motType: zod.string().optional(),
																	network: zod.string().optional()
																})
															)
															.optional(),
														lineGroup: zod
															.array(
																zod.object({
																	naptanIdReference: zod.string().optional(),
																	stationAtcoCode: zod.string().optional(),
																	lineIdentifier: zod.array(zod.string()).optional()
																})
															)
															.optional(),
														lineModeGroups: zod
															.array(
																zod.object({
																	modeName: zod.string().optional(),
																	lineIdentifier: zod.array(zod.string()).optional()
																})
															)
															.optional(),
														fullName: zod.string().optional(),
														naptanMode: zod.string().optional(),
														status: zod.boolean().optional(),
														individualStopId: zod.string().optional(),
														id: zod.string().optional(),
														url: zod.string().optional(),
														commonName: zod.string().optional(),
														distance: zod.number().optional(),
														placeType: zod.string().optional(),
														additionalProperties: zod
															.array(
																zod.object({
																	category: zod.string().optional(),
																	key: zod.string().optional(),
																	sourceSystemKey: zod.string().optional(),
																	value: zod.string().optional(),
																	modified: zod.string().datetime().optional()
																})
															)
															.optional(),
														children: zod
															.array(
																zod.object({
																	id: zod.string().optional(),
																	url: zod.string().optional(),
																	commonName: zod.string().optional(),
																	distance: zod.number().optional(),
																	placeType: zod.string().optional(),
																	additionalProperties: zod
																		.array(
																			zod.object({
																				category: zod.string().optional(),
																				key: zod.string().optional(),
																				sourceSystemKey: zod.string().optional(),
																				value: zod.string().optional(),
																				modified: zod.string().datetime().optional()
																			})
																		)
																		.optional(),
																	children: zod.array(zod.any()).optional(),
																	childrenUrls: zod.array(zod.string()).optional(),
																	lat: zod.number().optional(),
																	lon: zod.number().optional()
																})
															)
															.optional(),
														childrenUrls: zod.array(zod.string()).optional(),
														lat: zod.number().optional(),
														lon: zod.number().optional()
													})
													.optional()
											})
										)
										.optional()
								})
							)
							.optional(),
						affectedStops: zod
							.array(
								zod.object({
									naptanId: zod.string().optional(),
									platformName: zod.string().optional(),
									indicator: zod.string().optional(),
									stopLetter: zod.string().optional(),
									modes: zod.array(zod.string()).optional(),
									icsCode: zod.string().optional(),
									smsCode: zod.string().optional(),
									stopType: zod.string().optional(),
									stationNaptan: zod.string().optional(),
									accessibilitySummary: zod.string().optional(),
									hubNaptanCode: zod.string().optional(),
									lines: zod
										.array(
											zod.object({
												id: zod.string().optional(),
												name: zod.string().optional(),
												uri: zod.string().optional(),
												fullName: zod.string().optional(),
												type: zod.string().optional(),
												crowding: zod
													.object({
														passengerFlows: zod
															.array(
																zod.object({
																	timeSlice: zod.string().optional(),
																	value: zod.number().optional()
																})
															)
															.optional(),
														trainLoadings: zod
															.array(
																zod.object({
																	line: zod.string().optional(),
																	lineDirection: zod.string().optional(),
																	platformDirection: zod.string().optional(),
																	direction: zod.string().optional(),
																	naptanTo: zod.string().optional(),
																	timeSlice: zod.string().optional(),
																	value: zod.number().optional()
																})
															)
															.optional()
													})
													.optional(),
												routeType: zod
													.enum([
														'Unknown',
														'All',
														'Cycle Superhighways',
														'Quietways',
														'Cycleways',
														'Mini-Hollands',
														'Central London Grid',
														'Streetspace Route'
													])
													.optional(),
												status: zod
													.enum([
														'Unknown',
														'All',
														'Open',
														'In Progress',
														'Planned',
														'Planned - Subject to feasibility and consultation.',
														'Not Open'
													])
													.optional(),
												motType: zod.string().optional(),
												network: zod.string().optional()
											})
										)
										.optional(),
									lineGroup: zod
										.array(
											zod.object({
												naptanIdReference: zod.string().optional(),
												stationAtcoCode: zod.string().optional(),
												lineIdentifier: zod.array(zod.string()).optional()
											})
										)
										.optional(),
									lineModeGroups: zod
										.array(
											zod.object({
												modeName: zod.string().optional(),
												lineIdentifier: zod.array(zod.string()).optional()
											})
										)
										.optional(),
									fullName: zod.string().optional(),
									naptanMode: zod.string().optional(),
									status: zod.boolean().optional(),
									individualStopId: zod.string().optional(),
									id: zod.string().optional(),
									url: zod.string().optional(),
									commonName: zod.string().optional(),
									distance: zod.number().optional(),
									placeType: zod.string().optional(),
									additionalProperties: zod
										.array(
											zod.object({
												category: zod.string().optional(),
												key: zod.string().optional(),
												sourceSystemKey: zod.string().optional(),
												value: zod.string().optional(),
												modified: zod.string().datetime().optional()
											})
										)
										.optional(),
									children: zod
										.array(
											zod.object({
												id: zod.string().optional(),
												url: zod.string().optional(),
												commonName: zod.string().optional(),
												distance: zod.number().optional(),
												placeType: zod.string().optional(),
												additionalProperties: zod
													.array(
														zod.object({
															category: zod.string().optional(),
															key: zod.string().optional(),
															sourceSystemKey: zod.string().optional(),
															value: zod.string().optional(),
															modified: zod.string().datetime().optional()
														})
													)
													.optional(),
												children: zod.array(zod.any()).optional(),
												childrenUrls: zod.array(zod.string()).optional(),
												lat: zod.number().optional(),
												lon: zod.number().optional()
											})
										)
										.optional(),
									childrenUrls: zod.array(zod.string()).optional(),
									lat: zod.number().optional(),
									lon: zod.number().optional()
								})
							)
							.optional(),
						closureText: zod.string().optional()
					})
					.optional()
			})
		)
		.optional(),
	routeSections: zod
		.array(
			zod.object({
				routeCode: zod.string().optional(),
				name: zod.string().optional(),
				direction: zod.string().optional(),
				originationName: zod.string().optional(),
				destinationName: zod.string().optional(),
				originator: zod.string().optional(),
				destination: zod.string().optional(),
				serviceType: zod.string().optional(),
				validTo: zod.string().datetime().optional(),
				validFrom: zod.string().datetime().optional()
			})
		)
		.optional(),
	serviceTypes: zod
		.array(
			zod.object({
				name: zod.string().optional(),
				uri: zod.string().optional()
			})
		)
		.optional(),
	crowding: zod
		.object({
			passengerFlows: zod
				.array(
					zod.object({
						timeSlice: zod.string().optional(),
						value: zod.number().optional()
					})
				)
				.optional(),
			trainLoadings: zod
				.array(
					zod.object({
						line: zod.string().optional(),
						lineDirection: zod.string().optional(),
						platformDirection: zod.string().optional(),
						direction: zod.string().optional(),
						naptanTo: zod.string().optional(),
						timeSlice: zod.string().optional(),
						value: zod.number().optional()
					})
				)
				.optional()
		})
		.optional()
});
export const lineStatusResponse = zod.array(lineStatusResponseItem);

/**
 * @summary Gets the line status of for given line ids e.g Minor Delays
 */
export const lineStatusByIdsParams = zod.object({
	ids: zod.array(zod.string())
});

export const lineStatusByIdsQueryParams = zod.object({
	detail: zod.boolean().optional()
});

export const lineStatusByIdsResponseItem = zod.object({
	id: zod.string().optional(),
	name: zod.string().optional(),
	modeName: zod.string().optional(),
	disruptions: zod
		.array(
			zod.object({
				category: zod
					.enum([
						'Undefined',
						'RealTime',
						'PlannedWork',
						'Information',
						'Event',
						'Crowding',
						'StatusAlert'
					])
					.optional(),
				type: zod.string().optional(),
				categoryDescription: zod.string().optional(),
				description: zod.string().optional(),
				summary: zod.string().optional(),
				additionalInfo: zod.string().optional(),
				created: zod.string().datetime().optional(),
				lastUpdate: zod.string().datetime().optional(),
				affectedRoutes: zod
					.array(
						zod.object({
							id: zod.string().optional(),
							lineId: zod.string().optional(),
							routeCode: zod.string().optional(),
							name: zod.string().optional(),
							lineString: zod.string().optional(),
							direction: zod.string().optional(),
							originationName: zod.string().optional(),
							destinationName: zod.string().optional(),
							via: zod
								.object({
									ordinal: zod.number().optional(),
									stopPoint: zod
										.object({
											naptanId: zod.string().optional(),
											platformName: zod.string().optional(),
											indicator: zod.string().optional(),
											stopLetter: zod.string().optional(),
											modes: zod.array(zod.string()).optional(),
											icsCode: zod.string().optional(),
											smsCode: zod.string().optional(),
											stopType: zod.string().optional(),
											stationNaptan: zod.string().optional(),
											accessibilitySummary: zod.string().optional(),
											hubNaptanCode: zod.string().optional(),
											lines: zod
												.array(
													zod.object({
														id: zod.string().optional(),
														name: zod.string().optional(),
														uri: zod.string().optional(),
														fullName: zod.string().optional(),
														type: zod.string().optional(),
														crowding: zod
															.object({
																passengerFlows: zod
																	.array(
																		zod.object({
																			timeSlice: zod.string().optional(),
																			value: zod.number().optional()
																		})
																	)
																	.optional(),
																trainLoadings: zod
																	.array(
																		zod.object({
																			line: zod.string().optional(),
																			lineDirection: zod.string().optional(),
																			platformDirection: zod.string().optional(),
																			direction: zod.string().optional(),
																			naptanTo: zod.string().optional(),
																			timeSlice: zod.string().optional(),
																			value: zod.number().optional()
																		})
																	)
																	.optional()
															})
															.optional(),
														routeType: zod
															.enum([
																'Unknown',
																'All',
																'Cycle Superhighways',
																'Quietways',
																'Cycleways',
																'Mini-Hollands',
																'Central London Grid',
																'Streetspace Route'
															])
															.optional(),
														status: zod
															.enum([
																'Unknown',
																'All',
																'Open',
																'In Progress',
																'Planned',
																'Planned - Subject to feasibility and consultation.',
																'Not Open'
															])
															.optional(),
														motType: zod.string().optional(),
														network: zod.string().optional()
													})
												)
												.optional(),
											lineGroup: zod
												.array(
													zod.object({
														naptanIdReference: zod.string().optional(),
														stationAtcoCode: zod.string().optional(),
														lineIdentifier: zod.array(zod.string()).optional()
													})
												)
												.optional(),
											lineModeGroups: zod
												.array(
													zod.object({
														modeName: zod.string().optional(),
														lineIdentifier: zod.array(zod.string()).optional()
													})
												)
												.optional(),
											fullName: zod.string().optional(),
											naptanMode: zod.string().optional(),
											status: zod.boolean().optional(),
											individualStopId: zod.string().optional(),
											id: zod.string().optional(),
											url: zod.string().optional(),
											commonName: zod.string().optional(),
											distance: zod.number().optional(),
											placeType: zod.string().optional(),
											additionalProperties: zod
												.array(
													zod.object({
														category: zod.string().optional(),
														key: zod.string().optional(),
														sourceSystemKey: zod.string().optional(),
														value: zod.string().optional(),
														modified: zod.string().datetime().optional()
													})
												)
												.optional(),
											children: zod
												.array(
													zod.object({
														id: zod.string().optional(),
														url: zod.string().optional(),
														commonName: zod.string().optional(),
														distance: zod.number().optional(),
														placeType: zod.string().optional(),
														additionalProperties: zod
															.array(
																zod.object({
																	category: zod.string().optional(),
																	key: zod.string().optional(),
																	sourceSystemKey: zod.string().optional(),
																	value: zod.string().optional(),
																	modified: zod.string().datetime().optional()
																})
															)
															.optional(),
														children: zod.array(zod.any()).optional(),
														childrenUrls: zod.array(zod.string()).optional(),
														lat: zod.number().optional(),
														lon: zod.number().optional()
													})
												)
												.optional(),
											childrenUrls: zod.array(zod.string()).optional(),
											lat: zod.number().optional(),
											lon: zod.number().optional()
										})
										.optional()
								})
								.optional(),
							isEntireRouteSection: zod.boolean().optional(),
							validTo: zod.string().datetime().optional(),
							validFrom: zod.string().datetime().optional(),
							routeSectionNaptanEntrySequence: zod
								.array(
									zod.object({
										ordinal: zod.number().optional(),
										stopPoint: zod
											.object({
												naptanId: zod.string().optional(),
												platformName: zod.string().optional(),
												indicator: zod.string().optional(),
												stopLetter: zod.string().optional(),
												modes: zod.array(zod.string()).optional(),
												icsCode: zod.string().optional(),
												smsCode: zod.string().optional(),
												stopType: zod.string().optional(),
												stationNaptan: zod.string().optional(),
												accessibilitySummary: zod.string().optional(),
												hubNaptanCode: zod.string().optional(),
												lines: zod
													.array(
														zod.object({
															id: zod.string().optional(),
															name: zod.string().optional(),
															uri: zod.string().optional(),
															fullName: zod.string().optional(),
															type: zod.string().optional(),
															crowding: zod
																.object({
																	passengerFlows: zod
																		.array(
																			zod.object({
																				timeSlice: zod.string().optional(),
																				value: zod.number().optional()
																			})
																		)
																		.optional(),
																	trainLoadings: zod
																		.array(
																			zod.object({
																				line: zod.string().optional(),
																				lineDirection: zod.string().optional(),
																				platformDirection: zod.string().optional(),
																				direction: zod.string().optional(),
																				naptanTo: zod.string().optional(),
																				timeSlice: zod.string().optional(),
																				value: zod.number().optional()
																			})
																		)
																		.optional()
																})
																.optional(),
															routeType: zod
																.enum([
																	'Unknown',
																	'All',
																	'Cycle Superhighways',
																	'Quietways',
																	'Cycleways',
																	'Mini-Hollands',
																	'Central London Grid',
																	'Streetspace Route'
																])
																.optional(),
															status: zod
																.enum([
																	'Unknown',
																	'All',
																	'Open',
																	'In Progress',
																	'Planned',
																	'Planned - Subject to feasibility and consultation.',
																	'Not Open'
																])
																.optional(),
															motType: zod.string().optional(),
															network: zod.string().optional()
														})
													)
													.optional(),
												lineGroup: zod
													.array(
														zod.object({
															naptanIdReference: zod.string().optional(),
															stationAtcoCode: zod.string().optional(),
															lineIdentifier: zod.array(zod.string()).optional()
														})
													)
													.optional(),
												lineModeGroups: zod
													.array(
														zod.object({
															modeName: zod.string().optional(),
															lineIdentifier: zod.array(zod.string()).optional()
														})
													)
													.optional(),
												fullName: zod.string().optional(),
												naptanMode: zod.string().optional(),
												status: zod.boolean().optional(),
												individualStopId: zod.string().optional(),
												id: zod.string().optional(),
												url: zod.string().optional(),
												commonName: zod.string().optional(),
												distance: zod.number().optional(),
												placeType: zod.string().optional(),
												additionalProperties: zod
													.array(
														zod.object({
															category: zod.string().optional(),
															key: zod.string().optional(),
															sourceSystemKey: zod.string().optional(),
															value: zod.string().optional(),
															modified: zod.string().datetime().optional()
														})
													)
													.optional(),
												children: zod
													.array(
														zod.object({
															id: zod.string().optional(),
															url: zod.string().optional(),
															commonName: zod.string().optional(),
															distance: zod.number().optional(),
															placeType: zod.string().optional(),
															additionalProperties: zod
																.array(
																	zod.object({
																		category: zod.string().optional(),
																		key: zod.string().optional(),
																		sourceSystemKey: zod.string().optional(),
																		value: zod.string().optional(),
																		modified: zod.string().datetime().optional()
																	})
																)
																.optional(),
															children: zod.array(zod.any()).optional(),
															childrenUrls: zod.array(zod.string()).optional(),
															lat: zod.number().optional(),
															lon: zod.number().optional()
														})
													)
													.optional(),
												childrenUrls: zod.array(zod.string()).optional(),
												lat: zod.number().optional(),
												lon: zod.number().optional()
											})
											.optional()
									})
								)
								.optional()
						})
					)
					.optional(),
				affectedStops: zod
					.array(
						zod.object({
							naptanId: zod.string().optional(),
							platformName: zod.string().optional(),
							indicator: zod.string().optional(),
							stopLetter: zod.string().optional(),
							modes: zod.array(zod.string()).optional(),
							icsCode: zod.string().optional(),
							smsCode: zod.string().optional(),
							stopType: zod.string().optional(),
							stationNaptan: zod.string().optional(),
							accessibilitySummary: zod.string().optional(),
							hubNaptanCode: zod.string().optional(),
							lines: zod
								.array(
									zod.object({
										id: zod.string().optional(),
										name: zod.string().optional(),
										uri: zod.string().optional(),
										fullName: zod.string().optional(),
										type: zod.string().optional(),
										crowding: zod
											.object({
												passengerFlows: zod
													.array(
														zod.object({
															timeSlice: zod.string().optional(),
															value: zod.number().optional()
														})
													)
													.optional(),
												trainLoadings: zod
													.array(
														zod.object({
															line: zod.string().optional(),
															lineDirection: zod.string().optional(),
															platformDirection: zod.string().optional(),
															direction: zod.string().optional(),
															naptanTo: zod.string().optional(),
															timeSlice: zod.string().optional(),
															value: zod.number().optional()
														})
													)
													.optional()
											})
											.optional(),
										routeType: zod
											.enum([
												'Unknown',
												'All',
												'Cycle Superhighways',
												'Quietways',
												'Cycleways',
												'Mini-Hollands',
												'Central London Grid',
												'Streetspace Route'
											])
											.optional(),
										status: zod
											.enum([
												'Unknown',
												'All',
												'Open',
												'In Progress',
												'Planned',
												'Planned - Subject to feasibility and consultation.',
												'Not Open'
											])
											.optional(),
										motType: zod.string().optional(),
										network: zod.string().optional()
									})
								)
								.optional(),
							lineGroup: zod
								.array(
									zod.object({
										naptanIdReference: zod.string().optional(),
										stationAtcoCode: zod.string().optional(),
										lineIdentifier: zod.array(zod.string()).optional()
									})
								)
								.optional(),
							lineModeGroups: zod
								.array(
									zod.object({
										modeName: zod.string().optional(),
										lineIdentifier: zod.array(zod.string()).optional()
									})
								)
								.optional(),
							fullName: zod.string().optional(),
							naptanMode: zod.string().optional(),
							status: zod.boolean().optional(),
							individualStopId: zod.string().optional(),
							id: zod.string().optional(),
							url: zod.string().optional(),
							commonName: zod.string().optional(),
							distance: zod.number().optional(),
							placeType: zod.string().optional(),
							additionalProperties: zod
								.array(
									zod.object({
										category: zod.string().optional(),
										key: zod.string().optional(),
										sourceSystemKey: zod.string().optional(),
										value: zod.string().optional(),
										modified: zod.string().datetime().optional()
									})
								)
								.optional(),
							children: zod
								.array(
									zod.object({
										id: zod.string().optional(),
										url: zod.string().optional(),
										commonName: zod.string().optional(),
										distance: zod.number().optional(),
										placeType: zod.string().optional(),
										additionalProperties: zod
											.array(
												zod.object({
													category: zod.string().optional(),
													key: zod.string().optional(),
													sourceSystemKey: zod.string().optional(),
													value: zod.string().optional(),
													modified: zod.string().datetime().optional()
												})
											)
											.optional(),
										children: zod.array(zod.any()).optional(),
										childrenUrls: zod.array(zod.string()).optional(),
										lat: zod.number().optional(),
										lon: zod.number().optional()
									})
								)
								.optional(),
							childrenUrls: zod.array(zod.string()).optional(),
							lat: zod.number().optional(),
							lon: zod.number().optional()
						})
					)
					.optional(),
				closureText: zod.string().optional()
			})
		)
		.optional(),
	created: zod.string().datetime().optional(),
	modified: zod.string().datetime().optional(),
	lineStatuses: zod
		.array(
			zod.object({
				id: zod.number().optional(),
				lineId: zod.string().optional(),
				statusSeverity: zod.number().optional(),
				statusSeverityDescription: zod.string().optional(),
				reason: zod.string().optional(),
				created: zod.string().datetime().optional(),
				modified: zod.string().datetime().optional(),
				validityPeriods: zod
					.array(
						zod.object({
							fromDate: zod.string().datetime().optional(),
							toDate: zod.string().datetime().optional(),
							isNow: zod.boolean().optional()
						})
					)
					.optional(),
				disruption: zod
					.object({
						category: zod
							.enum([
								'Undefined',
								'RealTime',
								'PlannedWork',
								'Information',
								'Event',
								'Crowding',
								'StatusAlert'
							])
							.optional(),
						type: zod.string().optional(),
						categoryDescription: zod.string().optional(),
						description: zod.string().optional(),
						summary: zod.string().optional(),
						additionalInfo: zod.string().optional(),
						created: zod.string().datetime().optional(),
						lastUpdate: zod.string().datetime().optional(),
						affectedRoutes: zod
							.array(
								zod.object({
									id: zod.string().optional(),
									lineId: zod.string().optional(),
									routeCode: zod.string().optional(),
									name: zod.string().optional(),
									lineString: zod.string().optional(),
									direction: zod.string().optional(),
									originationName: zod.string().optional(),
									destinationName: zod.string().optional(),
									via: zod
										.object({
											ordinal: zod.number().optional(),
											stopPoint: zod
												.object({
													naptanId: zod.string().optional(),
													platformName: zod.string().optional(),
													indicator: zod.string().optional(),
													stopLetter: zod.string().optional(),
													modes: zod.array(zod.string()).optional(),
													icsCode: zod.string().optional(),
													smsCode: zod.string().optional(),
													stopType: zod.string().optional(),
													stationNaptan: zod.string().optional(),
													accessibilitySummary: zod.string().optional(),
													hubNaptanCode: zod.string().optional(),
													lines: zod
														.array(
															zod.object({
																id: zod.string().optional(),
																name: zod.string().optional(),
																uri: zod.string().optional(),
																fullName: zod.string().optional(),
																type: zod.string().optional(),
																crowding: zod
																	.object({
																		passengerFlows: zod
																			.array(
																				zod.object({
																					timeSlice: zod.string().optional(),
																					value: zod.number().optional()
																				})
																			)
																			.optional(),
																		trainLoadings: zod
																			.array(
																				zod.object({
																					line: zod.string().optional(),
																					lineDirection: zod.string().optional(),
																					platformDirection: zod.string().optional(),
																					direction: zod.string().optional(),
																					naptanTo: zod.string().optional(),
																					timeSlice: zod.string().optional(),
																					value: zod.number().optional()
																				})
																			)
																			.optional()
																	})
																	.optional(),
																routeType: zod
																	.enum([
																		'Unknown',
																		'All',
																		'Cycle Superhighways',
																		'Quietways',
																		'Cycleways',
																		'Mini-Hollands',
																		'Central London Grid',
																		'Streetspace Route'
																	])
																	.optional(),
																status: zod
																	.enum([
																		'Unknown',
																		'All',
																		'Open',
																		'In Progress',
																		'Planned',
																		'Planned - Subject to feasibility and consultation.',
																		'Not Open'
																	])
																	.optional(),
																motType: zod.string().optional(),
																network: zod.string().optional()
															})
														)
														.optional(),
													lineGroup: zod
														.array(
															zod.object({
																naptanIdReference: zod.string().optional(),
																stationAtcoCode: zod.string().optional(),
																lineIdentifier: zod.array(zod.string()).optional()
															})
														)
														.optional(),
													lineModeGroups: zod
														.array(
															zod.object({
																modeName: zod.string().optional(),
																lineIdentifier: zod.array(zod.string()).optional()
															})
														)
														.optional(),
													fullName: zod.string().optional(),
													naptanMode: zod.string().optional(),
													status: zod.boolean().optional(),
													individualStopId: zod.string().optional(),
													id: zod.string().optional(),
													url: zod.string().optional(),
													commonName: zod.string().optional(),
													distance: zod.number().optional(),
													placeType: zod.string().optional(),
													additionalProperties: zod
														.array(
															zod.object({
																category: zod.string().optional(),
																key: zod.string().optional(),
																sourceSystemKey: zod.string().optional(),
																value: zod.string().optional(),
																modified: zod.string().datetime().optional()
															})
														)
														.optional(),
													children: zod
														.array(
															zod.object({
																id: zod.string().optional(),
																url: zod.string().optional(),
																commonName: zod.string().optional(),
																distance: zod.number().optional(),
																placeType: zod.string().optional(),
																additionalProperties: zod
																	.array(
																		zod.object({
																			category: zod.string().optional(),
																			key: zod.string().optional(),
																			sourceSystemKey: zod.string().optional(),
																			value: zod.string().optional(),
																			modified: zod.string().datetime().optional()
																		})
																	)
																	.optional(),
																children: zod.array(zod.any()).optional(),
																childrenUrls: zod.array(zod.string()).optional(),
																lat: zod.number().optional(),
																lon: zod.number().optional()
															})
														)
														.optional(),
													childrenUrls: zod.array(zod.string()).optional(),
													lat: zod.number().optional(),
													lon: zod.number().optional()
												})
												.optional()
										})
										.optional(),
									isEntireRouteSection: zod.boolean().optional(),
									validTo: zod.string().datetime().optional(),
									validFrom: zod.string().datetime().optional(),
									routeSectionNaptanEntrySequence: zod
										.array(
											zod.object({
												ordinal: zod.number().optional(),
												stopPoint: zod
													.object({
														naptanId: zod.string().optional(),
														platformName: zod.string().optional(),
														indicator: zod.string().optional(),
														stopLetter: zod.string().optional(),
														modes: zod.array(zod.string()).optional(),
														icsCode: zod.string().optional(),
														smsCode: zod.string().optional(),
														stopType: zod.string().optional(),
														stationNaptan: zod.string().optional(),
														accessibilitySummary: zod.string().optional(),
														hubNaptanCode: zod.string().optional(),
														lines: zod
															.array(
																zod.object({
																	id: zod.string().optional(),
																	name: zod.string().optional(),
																	uri: zod.string().optional(),
																	fullName: zod.string().optional(),
																	type: zod.string().optional(),
																	crowding: zod
																		.object({
																			passengerFlows: zod
																				.array(
																					zod.object({
																						timeSlice: zod.string().optional(),
																						value: zod.number().optional()
																					})
																				)
																				.optional(),
																			trainLoadings: zod
																				.array(
																					zod.object({
																						line: zod.string().optional(),
																						lineDirection: zod.string().optional(),
																						platformDirection: zod.string().optional(),
																						direction: zod.string().optional(),
																						naptanTo: zod.string().optional(),
																						timeSlice: zod.string().optional(),
																						value: zod.number().optional()
																					})
																				)
																				.optional()
																		})
																		.optional(),
																	routeType: zod
																		.enum([
																			'Unknown',
																			'All',
																			'Cycle Superhighways',
																			'Quietways',
																			'Cycleways',
																			'Mini-Hollands',
																			'Central London Grid',
																			'Streetspace Route'
																		])
																		.optional(),
																	status: zod
																		.enum([
																			'Unknown',
																			'All',
																			'Open',
																			'In Progress',
																			'Planned',
																			'Planned - Subject to feasibility and consultation.',
																			'Not Open'
																		])
																		.optional(),
																	motType: zod.string().optional(),
																	network: zod.string().optional()
																})
															)
															.optional(),
														lineGroup: zod
															.array(
																zod.object({
																	naptanIdReference: zod.string().optional(),
																	stationAtcoCode: zod.string().optional(),
																	lineIdentifier: zod.array(zod.string()).optional()
																})
															)
															.optional(),
														lineModeGroups: zod
															.array(
																zod.object({
																	modeName: zod.string().optional(),
																	lineIdentifier: zod.array(zod.string()).optional()
																})
															)
															.optional(),
														fullName: zod.string().optional(),
														naptanMode: zod.string().optional(),
														status: zod.boolean().optional(),
														individualStopId: zod.string().optional(),
														id: zod.string().optional(),
														url: zod.string().optional(),
														commonName: zod.string().optional(),
														distance: zod.number().optional(),
														placeType: zod.string().optional(),
														additionalProperties: zod
															.array(
																zod.object({
																	category: zod.string().optional(),
																	key: zod.string().optional(),
																	sourceSystemKey: zod.string().optional(),
																	value: zod.string().optional(),
																	modified: zod.string().datetime().optional()
																})
															)
															.optional(),
														children: zod
															.array(
																zod.object({
																	id: zod.string().optional(),
																	url: zod.string().optional(),
																	commonName: zod.string().optional(),
																	distance: zod.number().optional(),
																	placeType: zod.string().optional(),
																	additionalProperties: zod
																		.array(
																			zod.object({
																				category: zod.string().optional(),
																				key: zod.string().optional(),
																				sourceSystemKey: zod.string().optional(),
																				value: zod.string().optional(),
																				modified: zod.string().datetime().optional()
																			})
																		)
																		.optional(),
																	children: zod.array(zod.any()).optional(),
																	childrenUrls: zod.array(zod.string()).optional(),
																	lat: zod.number().optional(),
																	lon: zod.number().optional()
																})
															)
															.optional(),
														childrenUrls: zod.array(zod.string()).optional(),
														lat: zod.number().optional(),
														lon: zod.number().optional()
													})
													.optional()
											})
										)
										.optional()
								})
							)
							.optional(),
						affectedStops: zod
							.array(
								zod.object({
									naptanId: zod.string().optional(),
									platformName: zod.string().optional(),
									indicator: zod.string().optional(),
									stopLetter: zod.string().optional(),
									modes: zod.array(zod.string()).optional(),
									icsCode: zod.string().optional(),
									smsCode: zod.string().optional(),
									stopType: zod.string().optional(),
									stationNaptan: zod.string().optional(),
									accessibilitySummary: zod.string().optional(),
									hubNaptanCode: zod.string().optional(),
									lines: zod
										.array(
											zod.object({
												id: zod.string().optional(),
												name: zod.string().optional(),
												uri: zod.string().optional(),
												fullName: zod.string().optional(),
												type: zod.string().optional(),
												crowding: zod
													.object({
														passengerFlows: zod
															.array(
																zod.object({
																	timeSlice: zod.string().optional(),
																	value: zod.number().optional()
																})
															)
															.optional(),
														trainLoadings: zod
															.array(
																zod.object({
																	line: zod.string().optional(),
																	lineDirection: zod.string().optional(),
																	platformDirection: zod.string().optional(),
																	direction: zod.string().optional(),
																	naptanTo: zod.string().optional(),
																	timeSlice: zod.string().optional(),
																	value: zod.number().optional()
																})
															)
															.optional()
													})
													.optional(),
												routeType: zod
													.enum([
														'Unknown',
														'All',
														'Cycle Superhighways',
														'Quietways',
														'Cycleways',
														'Mini-Hollands',
														'Central London Grid',
														'Streetspace Route'
													])
													.optional(),
												status: zod
													.enum([
														'Unknown',
														'All',
														'Open',
														'In Progress',
														'Planned',
														'Planned - Subject to feasibility and consultation.',
														'Not Open'
													])
													.optional(),
												motType: zod.string().optional(),
												network: zod.string().optional()
											})
										)
										.optional(),
									lineGroup: zod
										.array(
											zod.object({
												naptanIdReference: zod.string().optional(),
												stationAtcoCode: zod.string().optional(),
												lineIdentifier: zod.array(zod.string()).optional()
											})
										)
										.optional(),
									lineModeGroups: zod
										.array(
											zod.object({
												modeName: zod.string().optional(),
												lineIdentifier: zod.array(zod.string()).optional()
											})
										)
										.optional(),
									fullName: zod.string().optional(),
									naptanMode: zod.string().optional(),
									status: zod.boolean().optional(),
									individualStopId: zod.string().optional(),
									id: zod.string().optional(),
									url: zod.string().optional(),
									commonName: zod.string().optional(),
									distance: zod.number().optional(),
									placeType: zod.string().optional(),
									additionalProperties: zod
										.array(
											zod.object({
												category: zod.string().optional(),
												key: zod.string().optional(),
												sourceSystemKey: zod.string().optional(),
												value: zod.string().optional(),
												modified: zod.string().datetime().optional()
											})
										)
										.optional(),
									children: zod
										.array(
											zod.object({
												id: zod.string().optional(),
												url: zod.string().optional(),
												commonName: zod.string().optional(),
												distance: zod.number().optional(),
												placeType: zod.string().optional(),
												additionalProperties: zod
													.array(
														zod.object({
															category: zod.string().optional(),
															key: zod.string().optional(),
															sourceSystemKey: zod.string().optional(),
															value: zod.string().optional(),
															modified: zod.string().datetime().optional()
														})
													)
													.optional(),
												children: zod.array(zod.any()).optional(),
												childrenUrls: zod.array(zod.string()).optional(),
												lat: zod.number().optional(),
												lon: zod.number().optional()
											})
										)
										.optional(),
									childrenUrls: zod.array(zod.string()).optional(),
									lat: zod.number().optional(),
									lon: zod.number().optional()
								})
							)
							.optional(),
						closureText: zod.string().optional()
					})
					.optional()
			})
		)
		.optional(),
	routeSections: zod
		.array(
			zod.object({
				routeCode: zod.string().optional(),
				name: zod.string().optional(),
				direction: zod.string().optional(),
				originationName: zod.string().optional(),
				destinationName: zod.string().optional(),
				originator: zod.string().optional(),
				destination: zod.string().optional(),
				serviceType: zod.string().optional(),
				validTo: zod.string().datetime().optional(),
				validFrom: zod.string().datetime().optional()
			})
		)
		.optional(),
	serviceTypes: zod
		.array(
			zod.object({
				name: zod.string().optional(),
				uri: zod.string().optional()
			})
		)
		.optional(),
	crowding: zod
		.object({
			passengerFlows: zod
				.array(
					zod.object({
						timeSlice: zod.string().optional(),
						value: zod.number().optional()
					})
				)
				.optional(),
			trainLoadings: zod
				.array(
					zod.object({
						line: zod.string().optional(),
						lineDirection: zod.string().optional(),
						platformDirection: zod.string().optional(),
						direction: zod.string().optional(),
						naptanTo: zod.string().optional(),
						timeSlice: zod.string().optional(),
						value: zod.number().optional()
					})
				)
				.optional()
		})
		.optional()
});
export const lineStatusByIdsResponse = zod.array(lineStatusByIdsResponseItem);

/**
 * @summary Search for lines or routes matching the query string
 */
export const lineSearchParams = zod.object({
	query: zod.string()
});

export const lineSearchQueryParams = zod.object({
	modes: zod.array(zod.string()).optional(),
	serviceTypes: zod.array(zod.enum(['Regular', 'Night'])).optional()
});

export const lineSearchResponse = zod.object({
	input: zod.string().optional(),
	searchMatches: zod
		.array(
			zod.object({
				lineId: zod.string().optional(),
				mode: zod.string().optional(),
				lineName: zod.string().optional(),
				lineRouteSection: zod
					.array(
						zod.object({
							routeId: zod.number().optional(),
							direction: zod.string().optional(),
							destination: zod.string().optional(),
							fromStation: zod.string().optional(),
							toStation: zod.string().optional(),
							serviceType: zod.string().optional(),
							vehicleDestinationText: zod.string().optional()
						})
					)
					.optional(),
				matchedRouteSections: zod
					.array(
						zod.object({
							id: zod.number().optional()
						})
					)
					.optional(),
				matchedStops: zod
					.array(
						zod.object({
							routeId: zod.number().optional(),
							parentId: zod.string().optional(),
							stationId: zod.string().optional(),
							icsId: zod.string().optional(),
							topMostParentId: zod.string().optional(),
							direction: zod.string().optional(),
							towards: zod.string().optional(),
							modes: zod.array(zod.string()).optional(),
							stopType: zod.string().optional(),
							stopLetter: zod.string().optional(),
							zone: zod.string().optional(),
							accessibilitySummary: zod.string().optional(),
							hasDisruption: zod.boolean().optional(),
							lines: zod
								.array(
									zod.object({
										id: zod.string().optional(),
										name: zod.string().optional(),
										uri: zod.string().optional(),
										fullName: zod.string().optional(),
										type: zod.string().optional(),
										crowding: zod
											.object({
												passengerFlows: zod
													.array(
														zod.object({
															timeSlice: zod.string().optional(),
															value: zod.number().optional()
														})
													)
													.optional(),
												trainLoadings: zod
													.array(
														zod.object({
															line: zod.string().optional(),
															lineDirection: zod.string().optional(),
															platformDirection: zod.string().optional(),
															direction: zod.string().optional(),
															naptanTo: zod.string().optional(),
															timeSlice: zod.string().optional(),
															value: zod.number().optional()
														})
													)
													.optional()
											})
											.optional(),
										routeType: zod
											.enum([
												'Unknown',
												'All',
												'Cycle Superhighways',
												'Quietways',
												'Cycleways',
												'Mini-Hollands',
												'Central London Grid',
												'Streetspace Route'
											])
											.optional(),
										status: zod
											.enum([
												'Unknown',
												'All',
												'Open',
												'In Progress',
												'Planned',
												'Planned - Subject to feasibility and consultation.',
												'Not Open'
											])
											.optional(),
										motType: zod.string().optional(),
										network: zod.string().optional()
									})
								)
								.optional(),
							status: zod.boolean().optional(),
							id: zod.string().optional(),
							url: zod.string().optional(),
							name: zod.string().optional(),
							lat: zod.number().optional(),
							lon: zod.number().optional()
						})
					)
					.optional(),
				id: zod.string().optional(),
				url: zod.string().optional(),
				name: zod.string().optional(),
				lat: zod.number().optional(),
				lon: zod.number().optional()
			})
		)
		.optional()
});

/**
 * @summary Gets the line status for all lines with a given severity
            A list of valid severity codes can be obtained from a call to Line/Meta/Severity
 */
export const lineStatusBySeverityParams = zod.object({
	severity: zod.number()
});

export const lineStatusBySeverityResponseItem = zod.object({
	id: zod.string().optional(),
	name: zod.string().optional(),
	modeName: zod.string().optional(),
	disruptions: zod
		.array(
			zod.object({
				category: zod
					.enum([
						'Undefined',
						'RealTime',
						'PlannedWork',
						'Information',
						'Event',
						'Crowding',
						'StatusAlert'
					])
					.optional(),
				type: zod.string().optional(),
				categoryDescription: zod.string().optional(),
				description: zod.string().optional(),
				summary: zod.string().optional(),
				additionalInfo: zod.string().optional(),
				created: zod.string().datetime().optional(),
				lastUpdate: zod.string().datetime().optional(),
				affectedRoutes: zod
					.array(
						zod.object({
							id: zod.string().optional(),
							lineId: zod.string().optional(),
							routeCode: zod.string().optional(),
							name: zod.string().optional(),
							lineString: zod.string().optional(),
							direction: zod.string().optional(),
							originationName: zod.string().optional(),
							destinationName: zod.string().optional(),
							via: zod
								.object({
									ordinal: zod.number().optional(),
									stopPoint: zod
										.object({
											naptanId: zod.string().optional(),
											platformName: zod.string().optional(),
											indicator: zod.string().optional(),
											stopLetter: zod.string().optional(),
											modes: zod.array(zod.string()).optional(),
											icsCode: zod.string().optional(),
											smsCode: zod.string().optional(),
											stopType: zod.string().optional(),
											stationNaptan: zod.string().optional(),
											accessibilitySummary: zod.string().optional(),
											hubNaptanCode: zod.string().optional(),
											lines: zod
												.array(
													zod.object({
														id: zod.string().optional(),
														name: zod.string().optional(),
														uri: zod.string().optional(),
														fullName: zod.string().optional(),
														type: zod.string().optional(),
														crowding: zod
															.object({
																passengerFlows: zod
																	.array(
																		zod.object({
																			timeSlice: zod.string().optional(),
																			value: zod.number().optional()
																		})
																	)
																	.optional(),
																trainLoadings: zod
																	.array(
																		zod.object({
																			line: zod.string().optional(),
																			lineDirection: zod.string().optional(),
																			platformDirection: zod.string().optional(),
																			direction: zod.string().optional(),
																			naptanTo: zod.string().optional(),
																			timeSlice: zod.string().optional(),
																			value: zod.number().optional()
																		})
																	)
																	.optional()
															})
															.optional(),
														routeType: zod
															.enum([
																'Unknown',
																'All',
																'Cycle Superhighways',
																'Quietways',
																'Cycleways',
																'Mini-Hollands',
																'Central London Grid',
																'Streetspace Route'
															])
															.optional(),
														status: zod
															.enum([
																'Unknown',
																'All',
																'Open',
																'In Progress',
																'Planned',
																'Planned - Subject to feasibility and consultation.',
																'Not Open'
															])
															.optional(),
														motType: zod.string().optional(),
														network: zod.string().optional()
													})
												)
												.optional(),
											lineGroup: zod
												.array(
													zod.object({
														naptanIdReference: zod.string().optional(),
														stationAtcoCode: zod.string().optional(),
														lineIdentifier: zod.array(zod.string()).optional()
													})
												)
												.optional(),
											lineModeGroups: zod
												.array(
													zod.object({
														modeName: zod.string().optional(),
														lineIdentifier: zod.array(zod.string()).optional()
													})
												)
												.optional(),
											fullName: zod.string().optional(),
											naptanMode: zod.string().optional(),
											status: zod.boolean().optional(),
											individualStopId: zod.string().optional(),
											id: zod.string().optional(),
											url: zod.string().optional(),
											commonName: zod.string().optional(),
											distance: zod.number().optional(),
											placeType: zod.string().optional(),
											additionalProperties: zod
												.array(
													zod.object({
														category: zod.string().optional(),
														key: zod.string().optional(),
														sourceSystemKey: zod.string().optional(),
														value: zod.string().optional(),
														modified: zod.string().datetime().optional()
													})
												)
												.optional(),
											children: zod
												.array(
													zod.object({
														id: zod.string().optional(),
														url: zod.string().optional(),
														commonName: zod.string().optional(),
														distance: zod.number().optional(),
														placeType: zod.string().optional(),
														additionalProperties: zod
															.array(
																zod.object({
																	category: zod.string().optional(),
																	key: zod.string().optional(),
																	sourceSystemKey: zod.string().optional(),
																	value: zod.string().optional(),
																	modified: zod.string().datetime().optional()
																})
															)
															.optional(),
														children: zod.array(zod.any()).optional(),
														childrenUrls: zod.array(zod.string()).optional(),
														lat: zod.number().optional(),
														lon: zod.number().optional()
													})
												)
												.optional(),
											childrenUrls: zod.array(zod.string()).optional(),
											lat: zod.number().optional(),
											lon: zod.number().optional()
										})
										.optional()
								})
								.optional(),
							isEntireRouteSection: zod.boolean().optional(),
							validTo: zod.string().datetime().optional(),
							validFrom: zod.string().datetime().optional(),
							routeSectionNaptanEntrySequence: zod
								.array(
									zod.object({
										ordinal: zod.number().optional(),
										stopPoint: zod
											.object({
												naptanId: zod.string().optional(),
												platformName: zod.string().optional(),
												indicator: zod.string().optional(),
												stopLetter: zod.string().optional(),
												modes: zod.array(zod.string()).optional(),
												icsCode: zod.string().optional(),
												smsCode: zod.string().optional(),
												stopType: zod.string().optional(),
												stationNaptan: zod.string().optional(),
												accessibilitySummary: zod.string().optional(),
												hubNaptanCode: zod.string().optional(),
												lines: zod
													.array(
														zod.object({
															id: zod.string().optional(),
															name: zod.string().optional(),
															uri: zod.string().optional(),
															fullName: zod.string().optional(),
															type: zod.string().optional(),
															crowding: zod
																.object({
																	passengerFlows: zod
																		.array(
																			zod.object({
																				timeSlice: zod.string().optional(),
																				value: zod.number().optional()
																			})
																		)
																		.optional(),
																	trainLoadings: zod
																		.array(
																			zod.object({
																				line: zod.string().optional(),
																				lineDirection: zod.string().optional(),
																				platformDirection: zod.string().optional(),
																				direction: zod.string().optional(),
																				naptanTo: zod.string().optional(),
																				timeSlice: zod.string().optional(),
																				value: zod.number().optional()
																			})
																		)
																		.optional()
																})
																.optional(),
															routeType: zod
																.enum([
																	'Unknown',
																	'All',
																	'Cycle Superhighways',
																	'Quietways',
																	'Cycleways',
																	'Mini-Hollands',
																	'Central London Grid',
																	'Streetspace Route'
																])
																.optional(),
															status: zod
																.enum([
																	'Unknown',
																	'All',
																	'Open',
																	'In Progress',
																	'Planned',
																	'Planned - Subject to feasibility and consultation.',
																	'Not Open'
																])
																.optional(),
															motType: zod.string().optional(),
															network: zod.string().optional()
														})
													)
													.optional(),
												lineGroup: zod
													.array(
														zod.object({
															naptanIdReference: zod.string().optional(),
															stationAtcoCode: zod.string().optional(),
															lineIdentifier: zod.array(zod.string()).optional()
														})
													)
													.optional(),
												lineModeGroups: zod
													.array(
														zod.object({
															modeName: zod.string().optional(),
															lineIdentifier: zod.array(zod.string()).optional()
														})
													)
													.optional(),
												fullName: zod.string().optional(),
												naptanMode: zod.string().optional(),
												status: zod.boolean().optional(),
												individualStopId: zod.string().optional(),
												id: zod.string().optional(),
												url: zod.string().optional(),
												commonName: zod.string().optional(),
												distance: zod.number().optional(),
												placeType: zod.string().optional(),
												additionalProperties: zod
													.array(
														zod.object({
															category: zod.string().optional(),
															key: zod.string().optional(),
															sourceSystemKey: zod.string().optional(),
															value: zod.string().optional(),
															modified: zod.string().datetime().optional()
														})
													)
													.optional(),
												children: zod
													.array(
														zod.object({
															id: zod.string().optional(),
															url: zod.string().optional(),
															commonName: zod.string().optional(),
															distance: zod.number().optional(),
															placeType: zod.string().optional(),
															additionalProperties: zod
																.array(
																	zod.object({
																		category: zod.string().optional(),
																		key: zod.string().optional(),
																		sourceSystemKey: zod.string().optional(),
																		value: zod.string().optional(),
																		modified: zod.string().datetime().optional()
																	})
																)
																.optional(),
															children: zod.array(zod.any()).optional(),
															childrenUrls: zod.array(zod.string()).optional(),
															lat: zod.number().optional(),
															lon: zod.number().optional()
														})
													)
													.optional(),
												childrenUrls: zod.array(zod.string()).optional(),
												lat: zod.number().optional(),
												lon: zod.number().optional()
											})
											.optional()
									})
								)
								.optional()
						})
					)
					.optional(),
				affectedStops: zod
					.array(
						zod.object({
							naptanId: zod.string().optional(),
							platformName: zod.string().optional(),
							indicator: zod.string().optional(),
							stopLetter: zod.string().optional(),
							modes: zod.array(zod.string()).optional(),
							icsCode: zod.string().optional(),
							smsCode: zod.string().optional(),
							stopType: zod.string().optional(),
							stationNaptan: zod.string().optional(),
							accessibilitySummary: zod.string().optional(),
							hubNaptanCode: zod.string().optional(),
							lines: zod
								.array(
									zod.object({
										id: zod.string().optional(),
										name: zod.string().optional(),
										uri: zod.string().optional(),
										fullName: zod.string().optional(),
										type: zod.string().optional(),
										crowding: zod
											.object({
												passengerFlows: zod
													.array(
														zod.object({
															timeSlice: zod.string().optional(),
															value: zod.number().optional()
														})
													)
													.optional(),
												trainLoadings: zod
													.array(
														zod.object({
															line: zod.string().optional(),
															lineDirection: zod.string().optional(),
															platformDirection: zod.string().optional(),
															direction: zod.string().optional(),
															naptanTo: zod.string().optional(),
															timeSlice: zod.string().optional(),
															value: zod.number().optional()
														})
													)
													.optional()
											})
											.optional(),
										routeType: zod
											.enum([
												'Unknown',
												'All',
												'Cycle Superhighways',
												'Quietways',
												'Cycleways',
												'Mini-Hollands',
												'Central London Grid',
												'Streetspace Route'
											])
											.optional(),
										status: zod
											.enum([
												'Unknown',
												'All',
												'Open',
												'In Progress',
												'Planned',
												'Planned - Subject to feasibility and consultation.',
												'Not Open'
											])
											.optional(),
										motType: zod.string().optional(),
										network: zod.string().optional()
									})
								)
								.optional(),
							lineGroup: zod
								.array(
									zod.object({
										naptanIdReference: zod.string().optional(),
										stationAtcoCode: zod.string().optional(),
										lineIdentifier: zod.array(zod.string()).optional()
									})
								)
								.optional(),
							lineModeGroups: zod
								.array(
									zod.object({
										modeName: zod.string().optional(),
										lineIdentifier: zod.array(zod.string()).optional()
									})
								)
								.optional(),
							fullName: zod.string().optional(),
							naptanMode: zod.string().optional(),
							status: zod.boolean().optional(),
							individualStopId: zod.string().optional(),
							id: zod.string().optional(),
							url: zod.string().optional(),
							commonName: zod.string().optional(),
							distance: zod.number().optional(),
							placeType: zod.string().optional(),
							additionalProperties: zod
								.array(
									zod.object({
										category: zod.string().optional(),
										key: zod.string().optional(),
										sourceSystemKey: zod.string().optional(),
										value: zod.string().optional(),
										modified: zod.string().datetime().optional()
									})
								)
								.optional(),
							children: zod
								.array(
									zod.object({
										id: zod.string().optional(),
										url: zod.string().optional(),
										commonName: zod.string().optional(),
										distance: zod.number().optional(),
										placeType: zod.string().optional(),
										additionalProperties: zod
											.array(
												zod.object({
													category: zod.string().optional(),
													key: zod.string().optional(),
													sourceSystemKey: zod.string().optional(),
													value: zod.string().optional(),
													modified: zod.string().datetime().optional()
												})
											)
											.optional(),
										children: zod.array(zod.any()).optional(),
										childrenUrls: zod.array(zod.string()).optional(),
										lat: zod.number().optional(),
										lon: zod.number().optional()
									})
								)
								.optional(),
							childrenUrls: zod.array(zod.string()).optional(),
							lat: zod.number().optional(),
							lon: zod.number().optional()
						})
					)
					.optional(),
				closureText: zod.string().optional()
			})
		)
		.optional(),
	created: zod.string().datetime().optional(),
	modified: zod.string().datetime().optional(),
	lineStatuses: zod
		.array(
			zod.object({
				id: zod.number().optional(),
				lineId: zod.string().optional(),
				statusSeverity: zod.number().optional(),
				statusSeverityDescription: zod.string().optional(),
				reason: zod.string().optional(),
				created: zod.string().datetime().optional(),
				modified: zod.string().datetime().optional(),
				validityPeriods: zod
					.array(
						zod.object({
							fromDate: zod.string().datetime().optional(),
							toDate: zod.string().datetime().optional(),
							isNow: zod.boolean().optional()
						})
					)
					.optional(),
				disruption: zod
					.object({
						category: zod
							.enum([
								'Undefined',
								'RealTime',
								'PlannedWork',
								'Information',
								'Event',
								'Crowding',
								'StatusAlert'
							])
							.optional(),
						type: zod.string().optional(),
						categoryDescription: zod.string().optional(),
						description: zod.string().optional(),
						summary: zod.string().optional(),
						additionalInfo: zod.string().optional(),
						created: zod.string().datetime().optional(),
						lastUpdate: zod.string().datetime().optional(),
						affectedRoutes: zod
							.array(
								zod.object({
									id: zod.string().optional(),
									lineId: zod.string().optional(),
									routeCode: zod.string().optional(),
									name: zod.string().optional(),
									lineString: zod.string().optional(),
									direction: zod.string().optional(),
									originationName: zod.string().optional(),
									destinationName: zod.string().optional(),
									via: zod
										.object({
											ordinal: zod.number().optional(),
											stopPoint: zod
												.object({
													naptanId: zod.string().optional(),
													platformName: zod.string().optional(),
													indicator: zod.string().optional(),
													stopLetter: zod.string().optional(),
													modes: zod.array(zod.string()).optional(),
													icsCode: zod.string().optional(),
													smsCode: zod.string().optional(),
													stopType: zod.string().optional(),
													stationNaptan: zod.string().optional(),
													accessibilitySummary: zod.string().optional(),
													hubNaptanCode: zod.string().optional(),
													lines: zod
														.array(
															zod.object({
																id: zod.string().optional(),
																name: zod.string().optional(),
																uri: zod.string().optional(),
																fullName: zod.string().optional(),
																type: zod.string().optional(),
																crowding: zod
																	.object({
																		passengerFlows: zod
																			.array(
																				zod.object({
																					timeSlice: zod.string().optional(),
																					value: zod.number().optional()
																				})
																			)
																			.optional(),
																		trainLoadings: zod
																			.array(
																				zod.object({
																					line: zod.string().optional(),
																					lineDirection: zod.string().optional(),
																					platformDirection: zod.string().optional(),
																					direction: zod.string().optional(),
																					naptanTo: zod.string().optional(),
																					timeSlice: zod.string().optional(),
																					value: zod.number().optional()
																				})
																			)
																			.optional()
																	})
																	.optional(),
																routeType: zod
																	.enum([
																		'Unknown',
																		'All',
																		'Cycle Superhighways',
																		'Quietways',
																		'Cycleways',
																		'Mini-Hollands',
																		'Central London Grid',
																		'Streetspace Route'
																	])
																	.optional(),
																status: zod
																	.enum([
																		'Unknown',
																		'All',
																		'Open',
																		'In Progress',
																		'Planned',
																		'Planned - Subject to feasibility and consultation.',
																		'Not Open'
																	])
																	.optional(),
																motType: zod.string().optional(),
																network: zod.string().optional()
															})
														)
														.optional(),
													lineGroup: zod
														.array(
															zod.object({
																naptanIdReference: zod.string().optional(),
																stationAtcoCode: zod.string().optional(),
																lineIdentifier: zod.array(zod.string()).optional()
															})
														)
														.optional(),
													lineModeGroups: zod
														.array(
															zod.object({
																modeName: zod.string().optional(),
																lineIdentifier: zod.array(zod.string()).optional()
															})
														)
														.optional(),
													fullName: zod.string().optional(),
													naptanMode: zod.string().optional(),
													status: zod.boolean().optional(),
													individualStopId: zod.string().optional(),
													id: zod.string().optional(),
													url: zod.string().optional(),
													commonName: zod.string().optional(),
													distance: zod.number().optional(),
													placeType: zod.string().optional(),
													additionalProperties: zod
														.array(
															zod.object({
																category: zod.string().optional(),
																key: zod.string().optional(),
																sourceSystemKey: zod.string().optional(),
																value: zod.string().optional(),
																modified: zod.string().datetime().optional()
															})
														)
														.optional(),
													children: zod
														.array(
															zod.object({
																id: zod.string().optional(),
																url: zod.string().optional(),
																commonName: zod.string().optional(),
																distance: zod.number().optional(),
																placeType: zod.string().optional(),
																additionalProperties: zod
																	.array(
																		zod.object({
																			category: zod.string().optional(),
																			key: zod.string().optional(),
																			sourceSystemKey: zod.string().optional(),
																			value: zod.string().optional(),
																			modified: zod.string().datetime().optional()
																		})
																	)
																	.optional(),
																children: zod.array(zod.any()).optional(),
																childrenUrls: zod.array(zod.string()).optional(),
																lat: zod.number().optional(),
																lon: zod.number().optional()
															})
														)
														.optional(),
													childrenUrls: zod.array(zod.string()).optional(),
													lat: zod.number().optional(),
													lon: zod.number().optional()
												})
												.optional()
										})
										.optional(),
									isEntireRouteSection: zod.boolean().optional(),
									validTo: zod.string().datetime().optional(),
									validFrom: zod.string().datetime().optional(),
									routeSectionNaptanEntrySequence: zod
										.array(
											zod.object({
												ordinal: zod.number().optional(),
												stopPoint: zod
													.object({
														naptanId: zod.string().optional(),
														platformName: zod.string().optional(),
														indicator: zod.string().optional(),
														stopLetter: zod.string().optional(),
														modes: zod.array(zod.string()).optional(),
														icsCode: zod.string().optional(),
														smsCode: zod.string().optional(),
														stopType: zod.string().optional(),
														stationNaptan: zod.string().optional(),
														accessibilitySummary: zod.string().optional(),
														hubNaptanCode: zod.string().optional(),
														lines: zod
															.array(
																zod.object({
																	id: zod.string().optional(),
																	name: zod.string().optional(),
																	uri: zod.string().optional(),
																	fullName: zod.string().optional(),
																	type: zod.string().optional(),
																	crowding: zod
																		.object({
																			passengerFlows: zod
																				.array(
																					zod.object({
																						timeSlice: zod.string().optional(),
																						value: zod.number().optional()
																					})
																				)
																				.optional(),
																			trainLoadings: zod
																				.array(
																					zod.object({
																						line: zod.string().optional(),
																						lineDirection: zod.string().optional(),
																						platformDirection: zod.string().optional(),
																						direction: zod.string().optional(),
																						naptanTo: zod.string().optional(),
																						timeSlice: zod.string().optional(),
																						value: zod.number().optional()
																					})
																				)
																				.optional()
																		})
																		.optional(),
																	routeType: zod
																		.enum([
																			'Unknown',
																			'All',
																			'Cycle Superhighways',
																			'Quietways',
																			'Cycleways',
																			'Mini-Hollands',
																			'Central London Grid',
																			'Streetspace Route'
																		])
																		.optional(),
																	status: zod
																		.enum([
																			'Unknown',
																			'All',
																			'Open',
																			'In Progress',
																			'Planned',
																			'Planned - Subject to feasibility and consultation.',
																			'Not Open'
																		])
																		.optional(),
																	motType: zod.string().optional(),
																	network: zod.string().optional()
																})
															)
															.optional(),
														lineGroup: zod
															.array(
																zod.object({
																	naptanIdReference: zod.string().optional(),
																	stationAtcoCode: zod.string().optional(),
																	lineIdentifier: zod.array(zod.string()).optional()
																})
															)
															.optional(),
														lineModeGroups: zod
															.array(
																zod.object({
																	modeName: zod.string().optional(),
																	lineIdentifier: zod.array(zod.string()).optional()
																})
															)
															.optional(),
														fullName: zod.string().optional(),
														naptanMode: zod.string().optional(),
														status: zod.boolean().optional(),
														individualStopId: zod.string().optional(),
														id: zod.string().optional(),
														url: zod.string().optional(),
														commonName: zod.string().optional(),
														distance: zod.number().optional(),
														placeType: zod.string().optional(),
														additionalProperties: zod
															.array(
																zod.object({
																	category: zod.string().optional(),
																	key: zod.string().optional(),
																	sourceSystemKey: zod.string().optional(),
																	value: zod.string().optional(),
																	modified: zod.string().datetime().optional()
																})
															)
															.optional(),
														children: zod
															.array(
																zod.object({
																	id: zod.string().optional(),
																	url: zod.string().optional(),
																	commonName: zod.string().optional(),
																	distance: zod.number().optional(),
																	placeType: zod.string().optional(),
																	additionalProperties: zod
																		.array(
																			zod.object({
																				category: zod.string().optional(),
																				key: zod.string().optional(),
																				sourceSystemKey: zod.string().optional(),
																				value: zod.string().optional(),
																				modified: zod.string().datetime().optional()
																			})
																		)
																		.optional(),
																	children: zod.array(zod.any()).optional(),
																	childrenUrls: zod.array(zod.string()).optional(),
																	lat: zod.number().optional(),
																	lon: zod.number().optional()
																})
															)
															.optional(),
														childrenUrls: zod.array(zod.string()).optional(),
														lat: zod.number().optional(),
														lon: zod.number().optional()
													})
													.optional()
											})
										)
										.optional()
								})
							)
							.optional(),
						affectedStops: zod
							.array(
								zod.object({
									naptanId: zod.string().optional(),
									platformName: zod.string().optional(),
									indicator: zod.string().optional(),
									stopLetter: zod.string().optional(),
									modes: zod.array(zod.string()).optional(),
									icsCode: zod.string().optional(),
									smsCode: zod.string().optional(),
									stopType: zod.string().optional(),
									stationNaptan: zod.string().optional(),
									accessibilitySummary: zod.string().optional(),
									hubNaptanCode: zod.string().optional(),
									lines: zod
										.array(
											zod.object({
												id: zod.string().optional(),
												name: zod.string().optional(),
												uri: zod.string().optional(),
												fullName: zod.string().optional(),
												type: zod.string().optional(),
												crowding: zod
													.object({
														passengerFlows: zod
															.array(
																zod.object({
																	timeSlice: zod.string().optional(),
																	value: zod.number().optional()
																})
															)
															.optional(),
														trainLoadings: zod
															.array(
																zod.object({
																	line: zod.string().optional(),
																	lineDirection: zod.string().optional(),
																	platformDirection: zod.string().optional(),
																	direction: zod.string().optional(),
																	naptanTo: zod.string().optional(),
																	timeSlice: zod.string().optional(),
																	value: zod.number().optional()
																})
															)
															.optional()
													})
													.optional(),
												routeType: zod
													.enum([
														'Unknown',
														'All',
														'Cycle Superhighways',
														'Quietways',
														'Cycleways',
														'Mini-Hollands',
														'Central London Grid',
														'Streetspace Route'
													])
													.optional(),
												status: zod
													.enum([
														'Unknown',
														'All',
														'Open',
														'In Progress',
														'Planned',
														'Planned - Subject to feasibility and consultation.',
														'Not Open'
													])
													.optional(),
												motType: zod.string().optional(),
												network: zod.string().optional()
											})
										)
										.optional(),
									lineGroup: zod
										.array(
											zod.object({
												naptanIdReference: zod.string().optional(),
												stationAtcoCode: zod.string().optional(),
												lineIdentifier: zod.array(zod.string()).optional()
											})
										)
										.optional(),
									lineModeGroups: zod
										.array(
											zod.object({
												modeName: zod.string().optional(),
												lineIdentifier: zod.array(zod.string()).optional()
											})
										)
										.optional(),
									fullName: zod.string().optional(),
									naptanMode: zod.string().optional(),
									status: zod.boolean().optional(),
									individualStopId: zod.string().optional(),
									id: zod.string().optional(),
									url: zod.string().optional(),
									commonName: zod.string().optional(),
									distance: zod.number().optional(),
									placeType: zod.string().optional(),
									additionalProperties: zod
										.array(
											zod.object({
												category: zod.string().optional(),
												key: zod.string().optional(),
												sourceSystemKey: zod.string().optional(),
												value: zod.string().optional(),
												modified: zod.string().datetime().optional()
											})
										)
										.optional(),
									children: zod
										.array(
											zod.object({
												id: zod.string().optional(),
												url: zod.string().optional(),
												commonName: zod.string().optional(),
												distance: zod.number().optional(),
												placeType: zod.string().optional(),
												additionalProperties: zod
													.array(
														zod.object({
															category: zod.string().optional(),
															key: zod.string().optional(),
															sourceSystemKey: zod.string().optional(),
															value: zod.string().optional(),
															modified: zod.string().datetime().optional()
														})
													)
													.optional(),
												children: zod.array(zod.any()).optional(),
												childrenUrls: zod.array(zod.string()).optional(),
												lat: zod.number().optional(),
												lon: zod.number().optional()
											})
										)
										.optional(),
									childrenUrls: zod.array(zod.string()).optional(),
									lat: zod.number().optional(),
									lon: zod.number().optional()
								})
							)
							.optional(),
						closureText: zod.string().optional()
					})
					.optional()
			})
		)
		.optional(),
	routeSections: zod
		.array(
			zod.object({
				routeCode: zod.string().optional(),
				name: zod.string().optional(),
				direction: zod.string().optional(),
				originationName: zod.string().optional(),
				destinationName: zod.string().optional(),
				originator: zod.string().optional(),
				destination: zod.string().optional(),
				serviceType: zod.string().optional(),
				validTo: zod.string().datetime().optional(),
				validFrom: zod.string().datetime().optional()
			})
		)
		.optional(),
	serviceTypes: zod
		.array(
			zod.object({
				name: zod.string().optional(),
				uri: zod.string().optional()
			})
		)
		.optional(),
	crowding: zod
		.object({
			passengerFlows: zod
				.array(
					zod.object({
						timeSlice: zod.string().optional(),
						value: zod.number().optional()
					})
				)
				.optional(),
			trainLoadings: zod
				.array(
					zod.object({
						line: zod.string().optional(),
						lineDirection: zod.string().optional(),
						platformDirection: zod.string().optional(),
						direction: zod.string().optional(),
						naptanTo: zod.string().optional(),
						timeSlice: zod.string().optional(),
						value: zod.number().optional()
					})
				)
				.optional()
		})
		.optional()
});
export const lineStatusBySeverityResponse = zod.array(lineStatusBySeverityResponseItem);

/**
 * @summary Gets the line status of for all lines for the given modes
 */
export const lineStatusByModeParams = zod.object({
	modes: zod.array(zod.string())
});

export const lineStatusByModeQueryParams = zod.object({
	detail: zod.boolean().optional(),
	severityLevel: zod.string().optional()
});

export const lineStatusByModeResponseItem = zod.object({
	id: zod.string().optional(),
	name: zod.string().optional(),
	modeName: zod.string().optional(),
	disruptions: zod
		.array(
			zod.object({
				category: zod
					.enum([
						'Undefined',
						'RealTime',
						'PlannedWork',
						'Information',
						'Event',
						'Crowding',
						'StatusAlert'
					])
					.optional(),
				type: zod.string().optional(),
				categoryDescription: zod.string().optional(),
				description: zod.string().optional(),
				summary: zod.string().optional(),
				additionalInfo: zod.string().optional(),
				created: zod.string().datetime().optional(),
				lastUpdate: zod.string().datetime().optional(),
				affectedRoutes: zod
					.array(
						zod.object({
							id: zod.string().optional(),
							lineId: zod.string().optional(),
							routeCode: zod.string().optional(),
							name: zod.string().optional(),
							lineString: zod.string().optional(),
							direction: zod.string().optional(),
							originationName: zod.string().optional(),
							destinationName: zod.string().optional(),
							via: zod
								.object({
									ordinal: zod.number().optional(),
									stopPoint: zod
										.object({
											naptanId: zod.string().optional(),
											platformName: zod.string().optional(),
											indicator: zod.string().optional(),
											stopLetter: zod.string().optional(),
											modes: zod.array(zod.string()).optional(),
											icsCode: zod.string().optional(),
											smsCode: zod.string().optional(),
											stopType: zod.string().optional(),
											stationNaptan: zod.string().optional(),
											accessibilitySummary: zod.string().optional(),
											hubNaptanCode: zod.string().optional(),
											lines: zod
												.array(
													zod.object({
														id: zod.string().optional(),
														name: zod.string().optional(),
														uri: zod.string().optional(),
														fullName: zod.string().optional(),
														type: zod.string().optional(),
														crowding: zod
															.object({
																passengerFlows: zod
																	.array(
																		zod.object({
																			timeSlice: zod.string().optional(),
																			value: zod.number().optional()
																		})
																	)
																	.optional(),
																trainLoadings: zod
																	.array(
																		zod.object({
																			line: zod.string().optional(),
																			lineDirection: zod.string().optional(),
																			platformDirection: zod.string().optional(),
																			direction: zod.string().optional(),
																			naptanTo: zod.string().optional(),
																			timeSlice: zod.string().optional(),
																			value: zod.number().optional()
																		})
																	)
																	.optional()
															})
															.optional(),
														routeType: zod
															.enum([
																'Unknown',
																'All',
																'Cycle Superhighways',
																'Quietways',
																'Cycleways',
																'Mini-Hollands',
																'Central London Grid',
																'Streetspace Route'
															])
															.optional(),
														status: zod
															.enum([
																'Unknown',
																'All',
																'Open',
																'In Progress',
																'Planned',
																'Planned - Subject to feasibility and consultation.',
																'Not Open'
															])
															.optional(),
														motType: zod.string().optional(),
														network: zod.string().optional()
													})
												)
												.optional(),
											lineGroup: zod
												.array(
													zod.object({
														naptanIdReference: zod.string().optional(),
														stationAtcoCode: zod.string().optional(),
														lineIdentifier: zod.array(zod.string()).optional()
													})
												)
												.optional(),
											lineModeGroups: zod
												.array(
													zod.object({
														modeName: zod.string().optional(),
														lineIdentifier: zod.array(zod.string()).optional()
													})
												)
												.optional(),
											fullName: zod.string().optional(),
											naptanMode: zod.string().optional(),
											status: zod.boolean().optional(),
											individualStopId: zod.string().optional(),
											id: zod.string().optional(),
											url: zod.string().optional(),
											commonName: zod.string().optional(),
											distance: zod.number().optional(),
											placeType: zod.string().optional(),
											additionalProperties: zod
												.array(
													zod.object({
														category: zod.string().optional(),
														key: zod.string().optional(),
														sourceSystemKey: zod.string().optional(),
														value: zod.string().optional(),
														modified: zod.string().datetime().optional()
													})
												)
												.optional(),
											children: zod
												.array(
													zod.object({
														id: zod.string().optional(),
														url: zod.string().optional(),
														commonName: zod.string().optional(),
														distance: zod.number().optional(),
														placeType: zod.string().optional(),
														additionalProperties: zod
															.array(
																zod.object({
																	category: zod.string().optional(),
																	key: zod.string().optional(),
																	sourceSystemKey: zod.string().optional(),
																	value: zod.string().optional(),
																	modified: zod.string().datetime().optional()
																})
															)
															.optional(),
														children: zod.array(zod.any()).optional(),
														childrenUrls: zod.array(zod.string()).optional(),
														lat: zod.number().optional(),
														lon: zod.number().optional()
													})
												)
												.optional(),
											childrenUrls: zod.array(zod.string()).optional(),
											lat: zod.number().optional(),
											lon: zod.number().optional()
										})
										.optional()
								})
								.optional(),
							isEntireRouteSection: zod.boolean().optional(),
							validTo: zod.string().datetime().optional(),
							validFrom: zod.string().datetime().optional(),
							routeSectionNaptanEntrySequence: zod
								.array(
									zod.object({
										ordinal: zod.number().optional(),
										stopPoint: zod
											.object({
												naptanId: zod.string().optional(),
												platformName: zod.string().optional(),
												indicator: zod.string().optional(),
												stopLetter: zod.string().optional(),
												modes: zod.array(zod.string()).optional(),
												icsCode: zod.string().optional(),
												smsCode: zod.string().optional(),
												stopType: zod.string().optional(),
												stationNaptan: zod.string().optional(),
												accessibilitySummary: zod.string().optional(),
												hubNaptanCode: zod.string().optional(),
												lines: zod
													.array(
														zod.object({
															id: zod.string().optional(),
															name: zod.string().optional(),
															uri: zod.string().optional(),
															fullName: zod.string().optional(),
															type: zod.string().optional(),
															crowding: zod
																.object({
																	passengerFlows: zod
																		.array(
																			zod.object({
																				timeSlice: zod.string().optional(),
																				value: zod.number().optional()
																			})
																		)
																		.optional(),
																	trainLoadings: zod
																		.array(
																			zod.object({
																				line: zod.string().optional(),
																				lineDirection: zod.string().optional(),
																				platformDirection: zod.string().optional(),
																				direction: zod.string().optional(),
																				naptanTo: zod.string().optional(),
																				timeSlice: zod.string().optional(),
																				value: zod.number().optional()
																			})
																		)
																		.optional()
																})
																.optional(),
															routeType: zod
																.enum([
																	'Unknown',
																	'All',
																	'Cycle Superhighways',
																	'Quietways',
																	'Cycleways',
																	'Mini-Hollands',
																	'Central London Grid',
																	'Streetspace Route'
																])
																.optional(),
															status: zod
																.enum([
																	'Unknown',
																	'All',
																	'Open',
																	'In Progress',
																	'Planned',
																	'Planned - Subject to feasibility and consultation.',
																	'Not Open'
																])
																.optional(),
															motType: zod.string().optional(),
															network: zod.string().optional()
														})
													)
													.optional(),
												lineGroup: zod
													.array(
														zod.object({
															naptanIdReference: zod.string().optional(),
															stationAtcoCode: zod.string().optional(),
															lineIdentifier: zod.array(zod.string()).optional()
														})
													)
													.optional(),
												lineModeGroups: zod
													.array(
														zod.object({
															modeName: zod.string().optional(),
															lineIdentifier: zod.array(zod.string()).optional()
														})
													)
													.optional(),
												fullName: zod.string().optional(),
												naptanMode: zod.string().optional(),
												status: zod.boolean().optional(),
												individualStopId: zod.string().optional(),
												id: zod.string().optional(),
												url: zod.string().optional(),
												commonName: zod.string().optional(),
												distance: zod.number().optional(),
												placeType: zod.string().optional(),
												additionalProperties: zod
													.array(
														zod.object({
															category: zod.string().optional(),
															key: zod.string().optional(),
															sourceSystemKey: zod.string().optional(),
															value: zod.string().optional(),
															modified: zod.string().datetime().optional()
														})
													)
													.optional(),
												children: zod
													.array(
														zod.object({
															id: zod.string().optional(),
															url: zod.string().optional(),
															commonName: zod.string().optional(),
															distance: zod.number().optional(),
															placeType: zod.string().optional(),
															additionalProperties: zod
																.array(
																	zod.object({
																		category: zod.string().optional(),
																		key: zod.string().optional(),
																		sourceSystemKey: zod.string().optional(),
																		value: zod.string().optional(),
																		modified: zod.string().datetime().optional()
																	})
																)
																.optional(),
															children: zod.array(zod.any()).optional(),
															childrenUrls: zod.array(zod.string()).optional(),
															lat: zod.number().optional(),
															lon: zod.number().optional()
														})
													)
													.optional(),
												childrenUrls: zod.array(zod.string()).optional(),
												lat: zod.number().optional(),
												lon: zod.number().optional()
											})
											.optional()
									})
								)
								.optional()
						})
					)
					.optional(),
				affectedStops: zod
					.array(
						zod.object({
							naptanId: zod.string().optional(),
							platformName: zod.string().optional(),
							indicator: zod.string().optional(),
							stopLetter: zod.string().optional(),
							modes: zod.array(zod.string()).optional(),
							icsCode: zod.string().optional(),
							smsCode: zod.string().optional(),
							stopType: zod.string().optional(),
							stationNaptan: zod.string().optional(),
							accessibilitySummary: zod.string().optional(),
							hubNaptanCode: zod.string().optional(),
							lines: zod
								.array(
									zod.object({
										id: zod.string().optional(),
										name: zod.string().optional(),
										uri: zod.string().optional(),
										fullName: zod.string().optional(),
										type: zod.string().optional(),
										crowding: zod
											.object({
												passengerFlows: zod
													.array(
														zod.object({
															timeSlice: zod.string().optional(),
															value: zod.number().optional()
														})
													)
													.optional(),
												trainLoadings: zod
													.array(
														zod.object({
															line: zod.string().optional(),
															lineDirection: zod.string().optional(),
															platformDirection: zod.string().optional(),
															direction: zod.string().optional(),
															naptanTo: zod.string().optional(),
															timeSlice: zod.string().optional(),
															value: zod.number().optional()
														})
													)
													.optional()
											})
											.optional(),
										routeType: zod
											.enum([
												'Unknown',
												'All',
												'Cycle Superhighways',
												'Quietways',
												'Cycleways',
												'Mini-Hollands',
												'Central London Grid',
												'Streetspace Route'
											])
											.optional(),
										status: zod
											.enum([
												'Unknown',
												'All',
												'Open',
												'In Progress',
												'Planned',
												'Planned - Subject to feasibility and consultation.',
												'Not Open'
											])
											.optional(),
										motType: zod.string().optional(),
										network: zod.string().optional()
									})
								)
								.optional(),
							lineGroup: zod
								.array(
									zod.object({
										naptanIdReference: zod.string().optional(),
										stationAtcoCode: zod.string().optional(),
										lineIdentifier: zod.array(zod.string()).optional()
									})
								)
								.optional(),
							lineModeGroups: zod
								.array(
									zod.object({
										modeName: zod.string().optional(),
										lineIdentifier: zod.array(zod.string()).optional()
									})
								)
								.optional(),
							fullName: zod.string().optional(),
							naptanMode: zod.string().optional(),
							status: zod.boolean().optional(),
							individualStopId: zod.string().optional(),
							id: zod.string().optional(),
							url: zod.string().optional(),
							commonName: zod.string().optional(),
							distance: zod.number().optional(),
							placeType: zod.string().optional(),
							additionalProperties: zod
								.array(
									zod.object({
										category: zod.string().optional(),
										key: zod.string().optional(),
										sourceSystemKey: zod.string().optional(),
										value: zod.string().optional(),
										modified: zod.string().datetime().optional()
									})
								)
								.optional(),
							children: zod
								.array(
									zod.object({
										id: zod.string().optional(),
										url: zod.string().optional(),
										commonName: zod.string().optional(),
										distance: zod.number().optional(),
										placeType: zod.string().optional(),
										additionalProperties: zod
											.array(
												zod.object({
													category: zod.string().optional(),
													key: zod.string().optional(),
													sourceSystemKey: zod.string().optional(),
													value: zod.string().optional(),
													modified: zod.string().datetime().optional()
												})
											)
											.optional(),
										children: zod.array(zod.any()).optional(),
										childrenUrls: zod.array(zod.string()).optional(),
										lat: zod.number().optional(),
										lon: zod.number().optional()
									})
								)
								.optional(),
							childrenUrls: zod.array(zod.string()).optional(),
							lat: zod.number().optional(),
							lon: zod.number().optional()
						})
					)
					.optional(),
				closureText: zod.string().optional()
			})
		)
		.optional(),
	created: zod.string().datetime().optional(),
	modified: zod.string().datetime().optional(),
	lineStatuses: zod
		.array(
			zod.object({
				id: zod.number().optional(),
				lineId: zod.string().optional(),
				statusSeverity: zod.number().optional(),
				statusSeverityDescription: zod.string().optional(),
				reason: zod.string().optional(),
				created: zod.string().datetime().optional(),
				modified: zod.string().datetime().optional(),
				validityPeriods: zod
					.array(
						zod.object({
							fromDate: zod.string().datetime().optional(),
							toDate: zod.string().datetime().optional(),
							isNow: zod.boolean().optional()
						})
					)
					.optional(),
				disruption: zod
					.object({
						category: zod
							.enum([
								'Undefined',
								'RealTime',
								'PlannedWork',
								'Information',
								'Event',
								'Crowding',
								'StatusAlert'
							])
							.optional(),
						type: zod.string().optional(),
						categoryDescription: zod.string().optional(),
						description: zod.string().optional(),
						summary: zod.string().optional(),
						additionalInfo: zod.string().optional(),
						created: zod.string().datetime().optional(),
						lastUpdate: zod.string().datetime().optional(),
						affectedRoutes: zod
							.array(
								zod.object({
									id: zod.string().optional(),
									lineId: zod.string().optional(),
									routeCode: zod.string().optional(),
									name: zod.string().optional(),
									lineString: zod.string().optional(),
									direction: zod.string().optional(),
									originationName: zod.string().optional(),
									destinationName: zod.string().optional(),
									via: zod
										.object({
											ordinal: zod.number().optional(),
											stopPoint: zod
												.object({
													naptanId: zod.string().optional(),
													platformName: zod.string().optional(),
													indicator: zod.string().optional(),
													stopLetter: zod.string().optional(),
													modes: zod.array(zod.string()).optional(),
													icsCode: zod.string().optional(),
													smsCode: zod.string().optional(),
													stopType: zod.string().optional(),
													stationNaptan: zod.string().optional(),
													accessibilitySummary: zod.string().optional(),
													hubNaptanCode: zod.string().optional(),
													lines: zod
														.array(
															zod.object({
																id: zod.string().optional(),
																name: zod.string().optional(),
																uri: zod.string().optional(),
																fullName: zod.string().optional(),
																type: zod.string().optional(),
																crowding: zod
																	.object({
																		passengerFlows: zod
																			.array(
																				zod.object({
																					timeSlice: zod.string().optional(),
																					value: zod.number().optional()
																				})
																			)
																			.optional(),
																		trainLoadings: zod
																			.array(
																				zod.object({
																					line: zod.string().optional(),
																					lineDirection: zod.string().optional(),
																					platformDirection: zod.string().optional(),
																					direction: zod.string().optional(),
																					naptanTo: zod.string().optional(),
																					timeSlice: zod.string().optional(),
																					value: zod.number().optional()
																				})
																			)
																			.optional()
																	})
																	.optional(),
																routeType: zod
																	.enum([
																		'Unknown',
																		'All',
																		'Cycle Superhighways',
																		'Quietways',
																		'Cycleways',
																		'Mini-Hollands',
																		'Central London Grid',
																		'Streetspace Route'
																	])
																	.optional(),
																status: zod
																	.enum([
																		'Unknown',
																		'All',
																		'Open',
																		'In Progress',
																		'Planned',
																		'Planned - Subject to feasibility and consultation.',
																		'Not Open'
																	])
																	.optional(),
																motType: zod.string().optional(),
																network: zod.string().optional()
															})
														)
														.optional(),
													lineGroup: zod
														.array(
															zod.object({
																naptanIdReference: zod.string().optional(),
																stationAtcoCode: zod.string().optional(),
																lineIdentifier: zod.array(zod.string()).optional()
															})
														)
														.optional(),
													lineModeGroups: zod
														.array(
															zod.object({
																modeName: zod.string().optional(),
																lineIdentifier: zod.array(zod.string()).optional()
															})
														)
														.optional(),
													fullName: zod.string().optional(),
													naptanMode: zod.string().optional(),
													status: zod.boolean().optional(),
													individualStopId: zod.string().optional(),
													id: zod.string().optional(),
													url: zod.string().optional(),
													commonName: zod.string().optional(),
													distance: zod.number().optional(),
													placeType: zod.string().optional(),
													additionalProperties: zod
														.array(
															zod.object({
																category: zod.string().optional(),
																key: zod.string().optional(),
																sourceSystemKey: zod.string().optional(),
																value: zod.string().optional(),
																modified: zod.string().datetime().optional()
															})
														)
														.optional(),
													children: zod
														.array(
															zod.object({
																id: zod.string().optional(),
																url: zod.string().optional(),
																commonName: zod.string().optional(),
																distance: zod.number().optional(),
																placeType: zod.string().optional(),
																additionalProperties: zod
																	.array(
																		zod.object({
																			category: zod.string().optional(),
																			key: zod.string().optional(),
																			sourceSystemKey: zod.string().optional(),
																			value: zod.string().optional(),
																			modified: zod.string().datetime().optional()
																		})
																	)
																	.optional(),
																children: zod.array(zod.any()).optional(),
																childrenUrls: zod.array(zod.string()).optional(),
																lat: zod.number().optional(),
																lon: zod.number().optional()
															})
														)
														.optional(),
													childrenUrls: zod.array(zod.string()).optional(),
													lat: zod.number().optional(),
													lon: zod.number().optional()
												})
												.optional()
										})
										.optional(),
									isEntireRouteSection: zod.boolean().optional(),
									validTo: zod.string().datetime().optional(),
									validFrom: zod.string().datetime().optional(),
									routeSectionNaptanEntrySequence: zod
										.array(
											zod.object({
												ordinal: zod.number().optional(),
												stopPoint: zod
													.object({
														naptanId: zod.string().optional(),
														platformName: zod.string().optional(),
														indicator: zod.string().optional(),
														stopLetter: zod.string().optional(),
														modes: zod.array(zod.string()).optional(),
														icsCode: zod.string().optional(),
														smsCode: zod.string().optional(),
														stopType: zod.string().optional(),
														stationNaptan: zod.string().optional(),
														accessibilitySummary: zod.string().optional(),
														hubNaptanCode: zod.string().optional(),
														lines: zod
															.array(
																zod.object({
																	id: zod.string().optional(),
																	name: zod.string().optional(),
																	uri: zod.string().optional(),
																	fullName: zod.string().optional(),
																	type: zod.string().optional(),
																	crowding: zod
																		.object({
																			passengerFlows: zod
																				.array(
																					zod.object({
																						timeSlice: zod.string().optional(),
																						value: zod.number().optional()
																					})
																				)
																				.optional(),
																			trainLoadings: zod
																				.array(
																					zod.object({
																						line: zod.string().optional(),
																						lineDirection: zod.string().optional(),
																						platformDirection: zod.string().optional(),
																						direction: zod.string().optional(),
																						naptanTo: zod.string().optional(),
																						timeSlice: zod.string().optional(),
																						value: zod.number().optional()
																					})
																				)
																				.optional()
																		})
																		.optional(),
																	routeType: zod
																		.enum([
																			'Unknown',
																			'All',
																			'Cycle Superhighways',
																			'Quietways',
																			'Cycleways',
																			'Mini-Hollands',
																			'Central London Grid',
																			'Streetspace Route'
																		])
																		.optional(),
																	status: zod
																		.enum([
																			'Unknown',
																			'All',
																			'Open',
																			'In Progress',
																			'Planned',
																			'Planned - Subject to feasibility and consultation.',
																			'Not Open'
																		])
																		.optional(),
																	motType: zod.string().optional(),
																	network: zod.string().optional()
																})
															)
															.optional(),
														lineGroup: zod
															.array(
																zod.object({
																	naptanIdReference: zod.string().optional(),
																	stationAtcoCode: zod.string().optional(),
																	lineIdentifier: zod.array(zod.string()).optional()
																})
															)
															.optional(),
														lineModeGroups: zod
															.array(
																zod.object({
																	modeName: zod.string().optional(),
																	lineIdentifier: zod.array(zod.string()).optional()
																})
															)
															.optional(),
														fullName: zod.string().optional(),
														naptanMode: zod.string().optional(),
														status: zod.boolean().optional(),
														individualStopId: zod.string().optional(),
														id: zod.string().optional(),
														url: zod.string().optional(),
														commonName: zod.string().optional(),
														distance: zod.number().optional(),
														placeType: zod.string().optional(),
														additionalProperties: zod
															.array(
																zod.object({
																	category: zod.string().optional(),
																	key: zod.string().optional(),
																	sourceSystemKey: zod.string().optional(),
																	value: zod.string().optional(),
																	modified: zod.string().datetime().optional()
																})
															)
															.optional(),
														children: zod
															.array(
																zod.object({
																	id: zod.string().optional(),
																	url: zod.string().optional(),
																	commonName: zod.string().optional(),
																	distance: zod.number().optional(),
																	placeType: zod.string().optional(),
																	additionalProperties: zod
																		.array(
																			zod.object({
																				category: zod.string().optional(),
																				key: zod.string().optional(),
																				sourceSystemKey: zod.string().optional(),
																				value: zod.string().optional(),
																				modified: zod.string().datetime().optional()
																			})
																		)
																		.optional(),
																	children: zod.array(zod.any()).optional(),
																	childrenUrls: zod.array(zod.string()).optional(),
																	lat: zod.number().optional(),
																	lon: zod.number().optional()
																})
															)
															.optional(),
														childrenUrls: zod.array(zod.string()).optional(),
														lat: zod.number().optional(),
														lon: zod.number().optional()
													})
													.optional()
											})
										)
										.optional()
								})
							)
							.optional(),
						affectedStops: zod
							.array(
								zod.object({
									naptanId: zod.string().optional(),
									platformName: zod.string().optional(),
									indicator: zod.string().optional(),
									stopLetter: zod.string().optional(),
									modes: zod.array(zod.string()).optional(),
									icsCode: zod.string().optional(),
									smsCode: zod.string().optional(),
									stopType: zod.string().optional(),
									stationNaptan: zod.string().optional(),
									accessibilitySummary: zod.string().optional(),
									hubNaptanCode: zod.string().optional(),
									lines: zod
										.array(
											zod.object({
												id: zod.string().optional(),
												name: zod.string().optional(),
												uri: zod.string().optional(),
												fullName: zod.string().optional(),
												type: zod.string().optional(),
												crowding: zod
													.object({
														passengerFlows: zod
															.array(
																zod.object({
																	timeSlice: zod.string().optional(),
																	value: zod.number().optional()
																})
															)
															.optional(),
														trainLoadings: zod
															.array(
																zod.object({
																	line: zod.string().optional(),
																	lineDirection: zod.string().optional(),
																	platformDirection: zod.string().optional(),
																	direction: zod.string().optional(),
																	naptanTo: zod.string().optional(),
																	timeSlice: zod.string().optional(),
																	value: zod.number().optional()
																})
															)
															.optional()
													})
													.optional(),
												routeType: zod
													.enum([
														'Unknown',
														'All',
														'Cycle Superhighways',
														'Quietways',
														'Cycleways',
														'Mini-Hollands',
														'Central London Grid',
														'Streetspace Route'
													])
													.optional(),
												status: zod
													.enum([
														'Unknown',
														'All',
														'Open',
														'In Progress',
														'Planned',
														'Planned - Subject to feasibility and consultation.',
														'Not Open'
													])
													.optional(),
												motType: zod.string().optional(),
												network: zod.string().optional()
											})
										)
										.optional(),
									lineGroup: zod
										.array(
											zod.object({
												naptanIdReference: zod.string().optional(),
												stationAtcoCode: zod.string().optional(),
												lineIdentifier: zod.array(zod.string()).optional()
											})
										)
										.optional(),
									lineModeGroups: zod
										.array(
											zod.object({
												modeName: zod.string().optional(),
												lineIdentifier: zod.array(zod.string()).optional()
											})
										)
										.optional(),
									fullName: zod.string().optional(),
									naptanMode: zod.string().optional(),
									status: zod.boolean().optional(),
									individualStopId: zod.string().optional(),
									id: zod.string().optional(),
									url: zod.string().optional(),
									commonName: zod.string().optional(),
									distance: zod.number().optional(),
									placeType: zod.string().optional(),
									additionalProperties: zod
										.array(
											zod.object({
												category: zod.string().optional(),
												key: zod.string().optional(),
												sourceSystemKey: zod.string().optional(),
												value: zod.string().optional(),
												modified: zod.string().datetime().optional()
											})
										)
										.optional(),
									children: zod
										.array(
											zod.object({
												id: zod.string().optional(),
												url: zod.string().optional(),
												commonName: zod.string().optional(),
												distance: zod.number().optional(),
												placeType: zod.string().optional(),
												additionalProperties: zod
													.array(
														zod.object({
															category: zod.string().optional(),
															key: zod.string().optional(),
															sourceSystemKey: zod.string().optional(),
															value: zod.string().optional(),
															modified: zod.string().datetime().optional()
														})
													)
													.optional(),
												children: zod.array(zod.any()).optional(),
												childrenUrls: zod.array(zod.string()).optional(),
												lat: zod.number().optional(),
												lon: zod.number().optional()
											})
										)
										.optional(),
									childrenUrls: zod.array(zod.string()).optional(),
									lat: zod.number().optional(),
									lon: zod.number().optional()
								})
							)
							.optional(),
						closureText: zod.string().optional()
					})
					.optional()
			})
		)
		.optional(),
	routeSections: zod
		.array(
			zod.object({
				routeCode: zod.string().optional(),
				name: zod.string().optional(),
				direction: zod.string().optional(),
				originationName: zod.string().optional(),
				destinationName: zod.string().optional(),
				originator: zod.string().optional(),
				destination: zod.string().optional(),
				serviceType: zod.string().optional(),
				validTo: zod.string().datetime().optional(),
				validFrom: zod.string().datetime().optional()
			})
		)
		.optional(),
	serviceTypes: zod
		.array(
			zod.object({
				name: zod.string().optional(),
				uri: zod.string().optional()
			})
		)
		.optional(),
	crowding: zod
		.object({
			passengerFlows: zod
				.array(
					zod.object({
						timeSlice: zod.string().optional(),
						value: zod.number().optional()
					})
				)
				.optional(),
			trainLoadings: zod
				.array(
					zod.object({
						line: zod.string().optional(),
						lineDirection: zod.string().optional(),
						platformDirection: zod.string().optional(),
						direction: zod.string().optional(),
						naptanTo: zod.string().optional(),
						timeSlice: zod.string().optional(),
						value: zod.number().optional()
					})
				)
				.optional()
		})
		.optional()
});
export const lineStatusByModeResponse = zod.array(lineStatusByModeResponseItem);

/**
 * @summary Gets a list of the stations that serve the given line id
 */
export const lineStopPointsParams = zod.object({
	id: zod.string()
});

export const lineStopPointsQueryParams = zod.object({
	tflOperatedNationalRailStationsOnly: zod.boolean().optional()
});

export const lineStopPointsResponseItem = zod.object({
	naptanId: zod.string().optional(),
	platformName: zod.string().optional(),
	indicator: zod.string().optional(),
	stopLetter: zod.string().optional(),
	modes: zod.array(zod.string()).optional(),
	icsCode: zod.string().optional(),
	smsCode: zod.string().optional(),
	stopType: zod.string().optional(),
	stationNaptan: zod.string().optional(),
	accessibilitySummary: zod.string().optional(),
	hubNaptanCode: zod.string().optional(),
	lines: zod
		.array(
			zod.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
				uri: zod.string().optional(),
				fullName: zod.string().optional(),
				type: zod.string().optional(),
				crowding: zod
					.object({
						passengerFlows: zod
							.array(
								zod.object({
									timeSlice: zod.string().optional(),
									value: zod.number().optional()
								})
							)
							.optional(),
						trainLoadings: zod
							.array(
								zod.object({
									line: zod.string().optional(),
									lineDirection: zod.string().optional(),
									platformDirection: zod.string().optional(),
									direction: zod.string().optional(),
									naptanTo: zod.string().optional(),
									timeSlice: zod.string().optional(),
									value: zod.number().optional()
								})
							)
							.optional()
					})
					.optional(),
				routeType: zod
					.enum([
						'Unknown',
						'All',
						'Cycle Superhighways',
						'Quietways',
						'Cycleways',
						'Mini-Hollands',
						'Central London Grid',
						'Streetspace Route'
					])
					.optional(),
				status: zod
					.enum([
						'Unknown',
						'All',
						'Open',
						'In Progress',
						'Planned',
						'Planned - Subject to feasibility and consultation.',
						'Not Open'
					])
					.optional(),
				motType: zod.string().optional(),
				network: zod.string().optional()
			})
		)
		.optional(),
	lineGroup: zod
		.array(
			zod.object({
				naptanIdReference: zod.string().optional(),
				stationAtcoCode: zod.string().optional(),
				lineIdentifier: zod.array(zod.string()).optional()
			})
		)
		.optional(),
	lineModeGroups: zod
		.array(
			zod.object({
				modeName: zod.string().optional(),
				lineIdentifier: zod.array(zod.string()).optional()
			})
		)
		.optional(),
	fullName: zod.string().optional(),
	naptanMode: zod.string().optional(),
	status: zod.boolean().optional(),
	individualStopId: zod.string().optional(),
	id: zod.string().optional(),
	url: zod.string().optional(),
	commonName: zod.string().optional(),
	distance: zod.number().optional(),
	placeType: zod.string().optional(),
	additionalProperties: zod
		.array(
			zod.object({
				category: zod.string().optional(),
				key: zod.string().optional(),
				sourceSystemKey: zod.string().optional(),
				value: zod.string().optional(),
				modified: zod.string().datetime().optional()
			})
		)
		.optional(),
	children: zod
		.array(
			zod.object({
				id: zod.string().optional(),
				url: zod.string().optional(),
				commonName: zod.string().optional(),
				distance: zod.number().optional(),
				placeType: zod.string().optional(),
				additionalProperties: zod
					.array(
						zod.object({
							category: zod.string().optional(),
							key: zod.string().optional(),
							sourceSystemKey: zod.string().optional(),
							value: zod.string().optional(),
							modified: zod.string().datetime().optional()
						})
					)
					.optional(),
				children: zod.array(zod.any()).optional(),
				childrenUrls: zod.array(zod.string()).optional(),
				lat: zod.number().optional(),
				lon: zod.number().optional()
			})
		)
		.optional(),
	childrenUrls: zod.array(zod.string()).optional(),
	lat: zod.number().optional(),
	lon: zod.number().optional()
});
export const lineStopPointsResponse = zod.array(lineStopPointsResponseItem);

/**
 * @summary Gets the timetable for a specified station on the give line
 */
export const lineTimetableParams = zod.object({
	fromStopPointId: zod.string(),
	id: zod.string()
});

export const lineTimetableResponse = zod.object({
	lineId: zod.string().optional(),
	lineName: zod.string().optional(),
	direction: zod.string().optional(),
	pdfUrl: zod.string().optional(),
	stations: zod
		.array(
			zod.object({
				routeId: zod.number().optional(),
				parentId: zod.string().optional(),
				stationId: zod.string().optional(),
				icsId: zod.string().optional(),
				topMostParentId: zod.string().optional(),
				direction: zod.string().optional(),
				towards: zod.string().optional(),
				modes: zod.array(zod.string()).optional(),
				stopType: zod.string().optional(),
				stopLetter: zod.string().optional(),
				zone: zod.string().optional(),
				accessibilitySummary: zod.string().optional(),
				hasDisruption: zod.boolean().optional(),
				lines: zod
					.array(
						zod.object({
							id: zod.string().optional(),
							name: zod.string().optional(),
							uri: zod.string().optional(),
							fullName: zod.string().optional(),
							type: zod.string().optional(),
							crowding: zod
								.object({
									passengerFlows: zod
										.array(
											zod.object({
												timeSlice: zod.string().optional(),
												value: zod.number().optional()
											})
										)
										.optional(),
									trainLoadings: zod
										.array(
											zod.object({
												line: zod.string().optional(),
												lineDirection: zod.string().optional(),
												platformDirection: zod.string().optional(),
												direction: zod.string().optional(),
												naptanTo: zod.string().optional(),
												timeSlice: zod.string().optional(),
												value: zod.number().optional()
											})
										)
										.optional()
								})
								.optional(),
							routeType: zod
								.enum([
									'Unknown',
									'All',
									'Cycle Superhighways',
									'Quietways',
									'Cycleways',
									'Mini-Hollands',
									'Central London Grid',
									'Streetspace Route'
								])
								.optional(),
							status: zod
								.enum([
									'Unknown',
									'All',
									'Open',
									'In Progress',
									'Planned',
									'Planned - Subject to feasibility and consultation.',
									'Not Open'
								])
								.optional(),
							motType: zod.string().optional(),
							network: zod.string().optional()
						})
					)
					.optional(),
				status: zod.boolean().optional(),
				id: zod.string().optional(),
				url: zod.string().optional(),
				name: zod.string().optional(),
				lat: zod.number().optional(),
				lon: zod.number().optional()
			})
		)
		.optional(),
	stops: zod
		.array(
			zod.object({
				routeId: zod.number().optional(),
				parentId: zod.string().optional(),
				stationId: zod.string().optional(),
				icsId: zod.string().optional(),
				topMostParentId: zod.string().optional(),
				direction: zod.string().optional(),
				towards: zod.string().optional(),
				modes: zod.array(zod.string()).optional(),
				stopType: zod.string().optional(),
				stopLetter: zod.string().optional(),
				zone: zod.string().optional(),
				accessibilitySummary: zod.string().optional(),
				hasDisruption: zod.boolean().optional(),
				lines: zod
					.array(
						zod.object({
							id: zod.string().optional(),
							name: zod.string().optional(),
							uri: zod.string().optional(),
							fullName: zod.string().optional(),
							type: zod.string().optional(),
							crowding: zod
								.object({
									passengerFlows: zod
										.array(
											zod.object({
												timeSlice: zod.string().optional(),
												value: zod.number().optional()
											})
										)
										.optional(),
									trainLoadings: zod
										.array(
											zod.object({
												line: zod.string().optional(),
												lineDirection: zod.string().optional(),
												platformDirection: zod.string().optional(),
												direction: zod.string().optional(),
												naptanTo: zod.string().optional(),
												timeSlice: zod.string().optional(),
												value: zod.number().optional()
											})
										)
										.optional()
								})
								.optional(),
							routeType: zod
								.enum([
									'Unknown',
									'All',
									'Cycle Superhighways',
									'Quietways',
									'Cycleways',
									'Mini-Hollands',
									'Central London Grid',
									'Streetspace Route'
								])
								.optional(),
							status: zod
								.enum([
									'Unknown',
									'All',
									'Open',
									'In Progress',
									'Planned',
									'Planned - Subject to feasibility and consultation.',
									'Not Open'
								])
								.optional(),
							motType: zod.string().optional(),
							network: zod.string().optional()
						})
					)
					.optional(),
				status: zod.boolean().optional(),
				id: zod.string().optional(),
				url: zod.string().optional(),
				name: zod.string().optional(),
				lat: zod.number().optional(),
				lon: zod.number().optional()
			})
		)
		.optional(),
	timetable: zod
		.object({
			departureStopId: zod.string().optional(),
			routes: zod
				.array(
					zod.object({
						stationIntervals: zod
							.array(
								zod.object({
									id: zod.string().optional(),
									intervals: zod
										.array(
											zod.object({
												stopId: zod.string().optional(),
												timeToArrival: zod.number().optional()
											})
										)
										.optional()
								})
							)
							.optional(),
						schedules: zod
							.array(
								zod.object({
									name: zod.string().optional(),
									knownJourneys: zod
										.array(
											zod.object({
												hour: zod.string().optional(),
												minute: zod.string().optional(),
												intervalId: zod.number().optional()
											})
										)
										.optional(),
									firstJourney: zod
										.object({
											hour: zod.string().optional(),
											minute: zod.string().optional(),
											intervalId: zod.number().optional()
										})
										.optional(),
									lastJourney: zod
										.object({
											hour: zod.string().optional(),
											minute: zod.string().optional(),
											intervalId: zod.number().optional()
										})
										.optional(),
									periods: zod
										.array(
											zod.object({
												type: zod
													.enum(['Normal', 'FrequencyHours', 'FrequencyMinutes', 'Unknown'])
													.optional(),
												fromTime: zod
													.object({
														hour: zod.string().optional(),
														minute: zod.string().optional()
													})
													.optional(),
												toTime: zod
													.object({
														hour: zod.string().optional(),
														minute: zod.string().optional()
													})
													.optional(),
												frequency: zod
													.object({
														lowestFrequency: zod.number().optional(),
														highestFrequency: zod.number().optional()
													})
													.optional()
											})
										)
										.optional()
								})
							)
							.optional()
					})
				)
				.optional()
		})
		.optional(),
	disambiguation: zod
		.object({
			disambiguationOptions: zod
				.array(
					zod.object({
						description: zod.string().optional(),
						uri: zod.string().optional()
					})
				)
				.optional()
		})
		.optional(),
	statusErrorMessage: zod.string().optional()
});

/**
 * @summary Gets the timetable for a specified station on the give line with specified destination
 */
export const lineTimetableToParams = zod.object({
	fromStopPointId: zod.string(),
	id: zod.string(),
	toStopPointId: zod.string()
});

export const lineTimetableToResponse = zod.object({
	lineId: zod.string().optional(),
	lineName: zod.string().optional(),
	direction: zod.string().optional(),
	pdfUrl: zod.string().optional(),
	stations: zod
		.array(
			zod.object({
				routeId: zod.number().optional(),
				parentId: zod.string().optional(),
				stationId: zod.string().optional(),
				icsId: zod.string().optional(),
				topMostParentId: zod.string().optional(),
				direction: zod.string().optional(),
				towards: zod.string().optional(),
				modes: zod.array(zod.string()).optional(),
				stopType: zod.string().optional(),
				stopLetter: zod.string().optional(),
				zone: zod.string().optional(),
				accessibilitySummary: zod.string().optional(),
				hasDisruption: zod.boolean().optional(),
				lines: zod
					.array(
						zod.object({
							id: zod.string().optional(),
							name: zod.string().optional(),
							uri: zod.string().optional(),
							fullName: zod.string().optional(),
							type: zod.string().optional(),
							crowding: zod
								.object({
									passengerFlows: zod
										.array(
											zod.object({
												timeSlice: zod.string().optional(),
												value: zod.number().optional()
											})
										)
										.optional(),
									trainLoadings: zod
										.array(
											zod.object({
												line: zod.string().optional(),
												lineDirection: zod.string().optional(),
												platformDirection: zod.string().optional(),
												direction: zod.string().optional(),
												naptanTo: zod.string().optional(),
												timeSlice: zod.string().optional(),
												value: zod.number().optional()
											})
										)
										.optional()
								})
								.optional(),
							routeType: zod
								.enum([
									'Unknown',
									'All',
									'Cycle Superhighways',
									'Quietways',
									'Cycleways',
									'Mini-Hollands',
									'Central London Grid',
									'Streetspace Route'
								])
								.optional(),
							status: zod
								.enum([
									'Unknown',
									'All',
									'Open',
									'In Progress',
									'Planned',
									'Planned - Subject to feasibility and consultation.',
									'Not Open'
								])
								.optional(),
							motType: zod.string().optional(),
							network: zod.string().optional()
						})
					)
					.optional(),
				status: zod.boolean().optional(),
				id: zod.string().optional(),
				url: zod.string().optional(),
				name: zod.string().optional(),
				lat: zod.number().optional(),
				lon: zod.number().optional()
			})
		)
		.optional(),
	stops: zod
		.array(
			zod.object({
				routeId: zod.number().optional(),
				parentId: zod.string().optional(),
				stationId: zod.string().optional(),
				icsId: zod.string().optional(),
				topMostParentId: zod.string().optional(),
				direction: zod.string().optional(),
				towards: zod.string().optional(),
				modes: zod.array(zod.string()).optional(),
				stopType: zod.string().optional(),
				stopLetter: zod.string().optional(),
				zone: zod.string().optional(),
				accessibilitySummary: zod.string().optional(),
				hasDisruption: zod.boolean().optional(),
				lines: zod
					.array(
						zod.object({
							id: zod.string().optional(),
							name: zod.string().optional(),
							uri: zod.string().optional(),
							fullName: zod.string().optional(),
							type: zod.string().optional(),
							crowding: zod
								.object({
									passengerFlows: zod
										.array(
											zod.object({
												timeSlice: zod.string().optional(),
												value: zod.number().optional()
											})
										)
										.optional(),
									trainLoadings: zod
										.array(
											zod.object({
												line: zod.string().optional(),
												lineDirection: zod.string().optional(),
												platformDirection: zod.string().optional(),
												direction: zod.string().optional(),
												naptanTo: zod.string().optional(),
												timeSlice: zod.string().optional(),
												value: zod.number().optional()
											})
										)
										.optional()
								})
								.optional(),
							routeType: zod
								.enum([
									'Unknown',
									'All',
									'Cycle Superhighways',
									'Quietways',
									'Cycleways',
									'Mini-Hollands',
									'Central London Grid',
									'Streetspace Route'
								])
								.optional(),
							status: zod
								.enum([
									'Unknown',
									'All',
									'Open',
									'In Progress',
									'Planned',
									'Planned - Subject to feasibility and consultation.',
									'Not Open'
								])
								.optional(),
							motType: zod.string().optional(),
							network: zod.string().optional()
						})
					)
					.optional(),
				status: zod.boolean().optional(),
				id: zod.string().optional(),
				url: zod.string().optional(),
				name: zod.string().optional(),
				lat: zod.number().optional(),
				lon: zod.number().optional()
			})
		)
		.optional(),
	timetable: zod
		.object({
			departureStopId: zod.string().optional(),
			routes: zod
				.array(
					zod.object({
						stationIntervals: zod
							.array(
								zod.object({
									id: zod.string().optional(),
									intervals: zod
										.array(
											zod.object({
												stopId: zod.string().optional(),
												timeToArrival: zod.number().optional()
											})
										)
										.optional()
								})
							)
							.optional(),
						schedules: zod
							.array(
								zod.object({
									name: zod.string().optional(),
									knownJourneys: zod
										.array(
											zod.object({
												hour: zod.string().optional(),
												minute: zod.string().optional(),
												intervalId: zod.number().optional()
											})
										)
										.optional(),
									firstJourney: zod
										.object({
											hour: zod.string().optional(),
											minute: zod.string().optional(),
											intervalId: zod.number().optional()
										})
										.optional(),
									lastJourney: zod
										.object({
											hour: zod.string().optional(),
											minute: zod.string().optional(),
											intervalId: zod.number().optional()
										})
										.optional(),
									periods: zod
										.array(
											zod.object({
												type: zod
													.enum(['Normal', 'FrequencyHours', 'FrequencyMinutes', 'Unknown'])
													.optional(),
												fromTime: zod
													.object({
														hour: zod.string().optional(),
														minute: zod.string().optional()
													})
													.optional(),
												toTime: zod
													.object({
														hour: zod.string().optional(),
														minute: zod.string().optional()
													})
													.optional(),
												frequency: zod
													.object({
														lowestFrequency: zod.number().optional(),
														highestFrequency: zod.number().optional()
													})
													.optional()
											})
										)
										.optional()
								})
							)
							.optional()
					})
				)
				.optional()
		})
		.optional(),
	disambiguation: zod
		.object({
			disambiguationOptions: zod
				.array(
					zod.object({
						description: zod.string().optional(),
						uri: zod.string().optional()
					})
				)
				.optional()
		})
		.optional(),
	statusErrorMessage: zod.string().optional()
});

/**
 * @summary Get disruptions for the given line ids
 */
export const lineDisruptionParams = zod.object({
	ids: zod.array(zod.string())
});

export const lineDisruptionResponseItem = zod.object({
	category: zod
		.enum([
			'Undefined',
			'RealTime',
			'PlannedWork',
			'Information',
			'Event',
			'Crowding',
			'StatusAlert'
		])
		.optional(),
	type: zod.string().optional(),
	categoryDescription: zod.string().optional(),
	description: zod.string().optional(),
	summary: zod.string().optional(),
	additionalInfo: zod.string().optional(),
	created: zod.string().datetime().optional(),
	lastUpdate: zod.string().datetime().optional(),
	affectedRoutes: zod
		.array(
			zod.object({
				id: zod.string().optional(),
				lineId: zod.string().optional(),
				routeCode: zod.string().optional(),
				name: zod.string().optional(),
				lineString: zod.string().optional(),
				direction: zod.string().optional(),
				originationName: zod.string().optional(),
				destinationName: zod.string().optional(),
				via: zod
					.object({
						ordinal: zod.number().optional(),
						stopPoint: zod
							.object({
								naptanId: zod.string().optional(),
								platformName: zod.string().optional(),
								indicator: zod.string().optional(),
								stopLetter: zod.string().optional(),
								modes: zod.array(zod.string()).optional(),
								icsCode: zod.string().optional(),
								smsCode: zod.string().optional(),
								stopType: zod.string().optional(),
								stationNaptan: zod.string().optional(),
								accessibilitySummary: zod.string().optional(),
								hubNaptanCode: zod.string().optional(),
								lines: zod
									.array(
										zod.object({
											id: zod.string().optional(),
											name: zod.string().optional(),
											uri: zod.string().optional(),
											fullName: zod.string().optional(),
											type: zod.string().optional(),
											crowding: zod
												.object({
													passengerFlows: zod
														.array(
															zod.object({
																timeSlice: zod.string().optional(),
																value: zod.number().optional()
															})
														)
														.optional(),
													trainLoadings: zod
														.array(
															zod.object({
																line: zod.string().optional(),
																lineDirection: zod.string().optional(),
																platformDirection: zod.string().optional(),
																direction: zod.string().optional(),
																naptanTo: zod.string().optional(),
																timeSlice: zod.string().optional(),
																value: zod.number().optional()
															})
														)
														.optional()
												})
												.optional(),
											routeType: zod
												.enum([
													'Unknown',
													'All',
													'Cycle Superhighways',
													'Quietways',
													'Cycleways',
													'Mini-Hollands',
													'Central London Grid',
													'Streetspace Route'
												])
												.optional(),
											status: zod
												.enum([
													'Unknown',
													'All',
													'Open',
													'In Progress',
													'Planned',
													'Planned - Subject to feasibility and consultation.',
													'Not Open'
												])
												.optional(),
											motType: zod.string().optional(),
											network: zod.string().optional()
										})
									)
									.optional(),
								lineGroup: zod
									.array(
										zod.object({
											naptanIdReference: zod.string().optional(),
											stationAtcoCode: zod.string().optional(),
											lineIdentifier: zod.array(zod.string()).optional()
										})
									)
									.optional(),
								lineModeGroups: zod
									.array(
										zod.object({
											modeName: zod.string().optional(),
											lineIdentifier: zod.array(zod.string()).optional()
										})
									)
									.optional(),
								fullName: zod.string().optional(),
								naptanMode: zod.string().optional(),
								status: zod.boolean().optional(),
								individualStopId: zod.string().optional(),
								id: zod.string().optional(),
								url: zod.string().optional(),
								commonName: zod.string().optional(),
								distance: zod.number().optional(),
								placeType: zod.string().optional(),
								additionalProperties: zod
									.array(
										zod.object({
											category: zod.string().optional(),
											key: zod.string().optional(),
											sourceSystemKey: zod.string().optional(),
											value: zod.string().optional(),
											modified: zod.string().datetime().optional()
										})
									)
									.optional(),
								children: zod
									.array(
										zod.object({
											id: zod.string().optional(),
											url: zod.string().optional(),
											commonName: zod.string().optional(),
											distance: zod.number().optional(),
											placeType: zod.string().optional(),
											additionalProperties: zod
												.array(
													zod.object({
														category: zod.string().optional(),
														key: zod.string().optional(),
														sourceSystemKey: zod.string().optional(),
														value: zod.string().optional(),
														modified: zod.string().datetime().optional()
													})
												)
												.optional(),
											children: zod.array(zod.any()).optional(),
											childrenUrls: zod.array(zod.string()).optional(),
											lat: zod.number().optional(),
											lon: zod.number().optional()
										})
									)
									.optional(),
								childrenUrls: zod.array(zod.string()).optional(),
								lat: zod.number().optional(),
								lon: zod.number().optional()
							})
							.optional()
					})
					.optional(),
				isEntireRouteSection: zod.boolean().optional(),
				validTo: zod.string().datetime().optional(),
				validFrom: zod.string().datetime().optional(),
				routeSectionNaptanEntrySequence: zod
					.array(
						zod.object({
							ordinal: zod.number().optional(),
							stopPoint: zod
								.object({
									naptanId: zod.string().optional(),
									platformName: zod.string().optional(),
									indicator: zod.string().optional(),
									stopLetter: zod.string().optional(),
									modes: zod.array(zod.string()).optional(),
									icsCode: zod.string().optional(),
									smsCode: zod.string().optional(),
									stopType: zod.string().optional(),
									stationNaptan: zod.string().optional(),
									accessibilitySummary: zod.string().optional(),
									hubNaptanCode: zod.string().optional(),
									lines: zod
										.array(
											zod.object({
												id: zod.string().optional(),
												name: zod.string().optional(),
												uri: zod.string().optional(),
												fullName: zod.string().optional(),
												type: zod.string().optional(),
												crowding: zod
													.object({
														passengerFlows: zod
															.array(
																zod.object({
																	timeSlice: zod.string().optional(),
																	value: zod.number().optional()
																})
															)
															.optional(),
														trainLoadings: zod
															.array(
																zod.object({
																	line: zod.string().optional(),
																	lineDirection: zod.string().optional(),
																	platformDirection: zod.string().optional(),
																	direction: zod.string().optional(),
																	naptanTo: zod.string().optional(),
																	timeSlice: zod.string().optional(),
																	value: zod.number().optional()
																})
															)
															.optional()
													})
													.optional(),
												routeType: zod
													.enum([
														'Unknown',
														'All',
														'Cycle Superhighways',
														'Quietways',
														'Cycleways',
														'Mini-Hollands',
														'Central London Grid',
														'Streetspace Route'
													])
													.optional(),
												status: zod
													.enum([
														'Unknown',
														'All',
														'Open',
														'In Progress',
														'Planned',
														'Planned - Subject to feasibility and consultation.',
														'Not Open'
													])
													.optional(),
												motType: zod.string().optional(),
												network: zod.string().optional()
											})
										)
										.optional(),
									lineGroup: zod
										.array(
											zod.object({
												naptanIdReference: zod.string().optional(),
												stationAtcoCode: zod.string().optional(),
												lineIdentifier: zod.array(zod.string()).optional()
											})
										)
										.optional(),
									lineModeGroups: zod
										.array(
											zod.object({
												modeName: zod.string().optional(),
												lineIdentifier: zod.array(zod.string()).optional()
											})
										)
										.optional(),
									fullName: zod.string().optional(),
									naptanMode: zod.string().optional(),
									status: zod.boolean().optional(),
									individualStopId: zod.string().optional(),
									id: zod.string().optional(),
									url: zod.string().optional(),
									commonName: zod.string().optional(),
									distance: zod.number().optional(),
									placeType: zod.string().optional(),
									additionalProperties: zod
										.array(
											zod.object({
												category: zod.string().optional(),
												key: zod.string().optional(),
												sourceSystemKey: zod.string().optional(),
												value: zod.string().optional(),
												modified: zod.string().datetime().optional()
											})
										)
										.optional(),
									children: zod
										.array(
											zod.object({
												id: zod.string().optional(),
												url: zod.string().optional(),
												commonName: zod.string().optional(),
												distance: zod.number().optional(),
												placeType: zod.string().optional(),
												additionalProperties: zod
													.array(
														zod.object({
															category: zod.string().optional(),
															key: zod.string().optional(),
															sourceSystemKey: zod.string().optional(),
															value: zod.string().optional(),
															modified: zod.string().datetime().optional()
														})
													)
													.optional(),
												children: zod.array(zod.any()).optional(),
												childrenUrls: zod.array(zod.string()).optional(),
												lat: zod.number().optional(),
												lon: zod.number().optional()
											})
										)
										.optional(),
									childrenUrls: zod.array(zod.string()).optional(),
									lat: zod.number().optional(),
									lon: zod.number().optional()
								})
								.optional()
						})
					)
					.optional()
			})
		)
		.optional(),
	affectedStops: zod
		.array(
			zod.object({
				naptanId: zod.string().optional(),
				platformName: zod.string().optional(),
				indicator: zod.string().optional(),
				stopLetter: zod.string().optional(),
				modes: zod.array(zod.string()).optional(),
				icsCode: zod.string().optional(),
				smsCode: zod.string().optional(),
				stopType: zod.string().optional(),
				stationNaptan: zod.string().optional(),
				accessibilitySummary: zod.string().optional(),
				hubNaptanCode: zod.string().optional(),
				lines: zod
					.array(
						zod.object({
							id: zod.string().optional(),
							name: zod.string().optional(),
							uri: zod.string().optional(),
							fullName: zod.string().optional(),
							type: zod.string().optional(),
							crowding: zod
								.object({
									passengerFlows: zod
										.array(
											zod.object({
												timeSlice: zod.string().optional(),
												value: zod.number().optional()
											})
										)
										.optional(),
									trainLoadings: zod
										.array(
											zod.object({
												line: zod.string().optional(),
												lineDirection: zod.string().optional(),
												platformDirection: zod.string().optional(),
												direction: zod.string().optional(),
												naptanTo: zod.string().optional(),
												timeSlice: zod.string().optional(),
												value: zod.number().optional()
											})
										)
										.optional()
								})
								.optional(),
							routeType: zod
								.enum([
									'Unknown',
									'All',
									'Cycle Superhighways',
									'Quietways',
									'Cycleways',
									'Mini-Hollands',
									'Central London Grid',
									'Streetspace Route'
								])
								.optional(),
							status: zod
								.enum([
									'Unknown',
									'All',
									'Open',
									'In Progress',
									'Planned',
									'Planned - Subject to feasibility and consultation.',
									'Not Open'
								])
								.optional(),
							motType: zod.string().optional(),
							network: zod.string().optional()
						})
					)
					.optional(),
				lineGroup: zod
					.array(
						zod.object({
							naptanIdReference: zod.string().optional(),
							stationAtcoCode: zod.string().optional(),
							lineIdentifier: zod.array(zod.string()).optional()
						})
					)
					.optional(),
				lineModeGroups: zod
					.array(
						zod.object({
							modeName: zod.string().optional(),
							lineIdentifier: zod.array(zod.string()).optional()
						})
					)
					.optional(),
				fullName: zod.string().optional(),
				naptanMode: zod.string().optional(),
				status: zod.boolean().optional(),
				individualStopId: zod.string().optional(),
				id: zod.string().optional(),
				url: zod.string().optional(),
				commonName: zod.string().optional(),
				distance: zod.number().optional(),
				placeType: zod.string().optional(),
				additionalProperties: zod
					.array(
						zod.object({
							category: zod.string().optional(),
							key: zod.string().optional(),
							sourceSystemKey: zod.string().optional(),
							value: zod.string().optional(),
							modified: zod.string().datetime().optional()
						})
					)
					.optional(),
				children: zod
					.array(
						zod.object({
							id: zod.string().optional(),
							url: zod.string().optional(),
							commonName: zod.string().optional(),
							distance: zod.number().optional(),
							placeType: zod.string().optional(),
							additionalProperties: zod
								.array(
									zod.object({
										category: zod.string().optional(),
										key: zod.string().optional(),
										sourceSystemKey: zod.string().optional(),
										value: zod.string().optional(),
										modified: zod.string().datetime().optional()
									})
								)
								.optional(),
							children: zod.array(zod.any()).optional(),
							childrenUrls: zod.array(zod.string()).optional(),
							lat: zod.number().optional(),
							lon: zod.number().optional()
						})
					)
					.optional(),
				childrenUrls: zod.array(zod.string()).optional(),
				lat: zod.number().optional(),
				lon: zod.number().optional()
			})
		)
		.optional(),
	closureText: zod.string().optional()
});
export const lineDisruptionResponse = zod.array(lineDisruptionResponseItem);

/**
 * @summary Get disruptions for all lines of the given modes.
 */
export const lineDisruptionByModeParams = zod.object({
	modes: zod.array(zod.string())
});

export const lineDisruptionByModeResponseItem = zod.object({
	category: zod
		.enum([
			'Undefined',
			'RealTime',
			'PlannedWork',
			'Information',
			'Event',
			'Crowding',
			'StatusAlert'
		])
		.optional(),
	type: zod.string().optional(),
	categoryDescription: zod.string().optional(),
	description: zod.string().optional(),
	summary: zod.string().optional(),
	additionalInfo: zod.string().optional(),
	created: zod.string().datetime().optional(),
	lastUpdate: zod.string().datetime().optional(),
	affectedRoutes: zod
		.array(
			zod.object({
				id: zod.string().optional(),
				lineId: zod.string().optional(),
				routeCode: zod.string().optional(),
				name: zod.string().optional(),
				lineString: zod.string().optional(),
				direction: zod.string().optional(),
				originationName: zod.string().optional(),
				destinationName: zod.string().optional(),
				via: zod
					.object({
						ordinal: zod.number().optional(),
						stopPoint: zod
							.object({
								naptanId: zod.string().optional(),
								platformName: zod.string().optional(),
								indicator: zod.string().optional(),
								stopLetter: zod.string().optional(),
								modes: zod.array(zod.string()).optional(),
								icsCode: zod.string().optional(),
								smsCode: zod.string().optional(),
								stopType: zod.string().optional(),
								stationNaptan: zod.string().optional(),
								accessibilitySummary: zod.string().optional(),
								hubNaptanCode: zod.string().optional(),
								lines: zod
									.array(
										zod.object({
											id: zod.string().optional(),
											name: zod.string().optional(),
											uri: zod.string().optional(),
											fullName: zod.string().optional(),
											type: zod.string().optional(),
											crowding: zod
												.object({
													passengerFlows: zod
														.array(
															zod.object({
																timeSlice: zod.string().optional(),
																value: zod.number().optional()
															})
														)
														.optional(),
													trainLoadings: zod
														.array(
															zod.object({
																line: zod.string().optional(),
																lineDirection: zod.string().optional(),
																platformDirection: zod.string().optional(),
																direction: zod.string().optional(),
																naptanTo: zod.string().optional(),
																timeSlice: zod.string().optional(),
																value: zod.number().optional()
															})
														)
														.optional()
												})
												.optional(),
											routeType: zod
												.enum([
													'Unknown',
													'All',
													'Cycle Superhighways',
													'Quietways',
													'Cycleways',
													'Mini-Hollands',
													'Central London Grid',
													'Streetspace Route'
												])
												.optional(),
											status: zod
												.enum([
													'Unknown',
													'All',
													'Open',
													'In Progress',
													'Planned',
													'Planned - Subject to feasibility and consultation.',
													'Not Open'
												])
												.optional(),
											motType: zod.string().optional(),
											network: zod.string().optional()
										})
									)
									.optional(),
								lineGroup: zod
									.array(
										zod.object({
											naptanIdReference: zod.string().optional(),
											stationAtcoCode: zod.string().optional(),
											lineIdentifier: zod.array(zod.string()).optional()
										})
									)
									.optional(),
								lineModeGroups: zod
									.array(
										zod.object({
											modeName: zod.string().optional(),
											lineIdentifier: zod.array(zod.string()).optional()
										})
									)
									.optional(),
								fullName: zod.string().optional(),
								naptanMode: zod.string().optional(),
								status: zod.boolean().optional(),
								individualStopId: zod.string().optional(),
								id: zod.string().optional(),
								url: zod.string().optional(),
								commonName: zod.string().optional(),
								distance: zod.number().optional(),
								placeType: zod.string().optional(),
								additionalProperties: zod
									.array(
										zod.object({
											category: zod.string().optional(),
											key: zod.string().optional(),
											sourceSystemKey: zod.string().optional(),
											value: zod.string().optional(),
											modified: zod.string().datetime().optional()
										})
									)
									.optional(),
								children: zod
									.array(
										zod.object({
											id: zod.string().optional(),
											url: zod.string().optional(),
											commonName: zod.string().optional(),
											distance: zod.number().optional(),
											placeType: zod.string().optional(),
											additionalProperties: zod
												.array(
													zod.object({
														category: zod.string().optional(),
														key: zod.string().optional(),
														sourceSystemKey: zod.string().optional(),
														value: zod.string().optional(),
														modified: zod.string().datetime().optional()
													})
												)
												.optional(),
											children: zod.array(zod.any()).optional(),
											childrenUrls: zod.array(zod.string()).optional(),
											lat: zod.number().optional(),
											lon: zod.number().optional()
										})
									)
									.optional(),
								childrenUrls: zod.array(zod.string()).optional(),
								lat: zod.number().optional(),
								lon: zod.number().optional()
							})
							.optional()
					})
					.optional(),
				isEntireRouteSection: zod.boolean().optional(),
				validTo: zod.string().datetime().optional(),
				validFrom: zod.string().datetime().optional(),
				routeSectionNaptanEntrySequence: zod
					.array(
						zod.object({
							ordinal: zod.number().optional(),
							stopPoint: zod
								.object({
									naptanId: zod.string().optional(),
									platformName: zod.string().optional(),
									indicator: zod.string().optional(),
									stopLetter: zod.string().optional(),
									modes: zod.array(zod.string()).optional(),
									icsCode: zod.string().optional(),
									smsCode: zod.string().optional(),
									stopType: zod.string().optional(),
									stationNaptan: zod.string().optional(),
									accessibilitySummary: zod.string().optional(),
									hubNaptanCode: zod.string().optional(),
									lines: zod
										.array(
											zod.object({
												id: zod.string().optional(),
												name: zod.string().optional(),
												uri: zod.string().optional(),
												fullName: zod.string().optional(),
												type: zod.string().optional(),
												crowding: zod
													.object({
														passengerFlows: zod
															.array(
																zod.object({
																	timeSlice: zod.string().optional(),
																	value: zod.number().optional()
																})
															)
															.optional(),
														trainLoadings: zod
															.array(
																zod.object({
																	line: zod.string().optional(),
																	lineDirection: zod.string().optional(),
																	platformDirection: zod.string().optional(),
																	direction: zod.string().optional(),
																	naptanTo: zod.string().optional(),
																	timeSlice: zod.string().optional(),
																	value: zod.number().optional()
																})
															)
															.optional()
													})
													.optional(),
												routeType: zod
													.enum([
														'Unknown',
														'All',
														'Cycle Superhighways',
														'Quietways',
														'Cycleways',
														'Mini-Hollands',
														'Central London Grid',
														'Streetspace Route'
													])
													.optional(),
												status: zod
													.enum([
														'Unknown',
														'All',
														'Open',
														'In Progress',
														'Planned',
														'Planned - Subject to feasibility and consultation.',
														'Not Open'
													])
													.optional(),
												motType: zod.string().optional(),
												network: zod.string().optional()
											})
										)
										.optional(),
									lineGroup: zod
										.array(
											zod.object({
												naptanIdReference: zod.string().optional(),
												stationAtcoCode: zod.string().optional(),
												lineIdentifier: zod.array(zod.string()).optional()
											})
										)
										.optional(),
									lineModeGroups: zod
										.array(
											zod.object({
												modeName: zod.string().optional(),
												lineIdentifier: zod.array(zod.string()).optional()
											})
										)
										.optional(),
									fullName: zod.string().optional(),
									naptanMode: zod.string().optional(),
									status: zod.boolean().optional(),
									individualStopId: zod.string().optional(),
									id: zod.string().optional(),
									url: zod.string().optional(),
									commonName: zod.string().optional(),
									distance: zod.number().optional(),
									placeType: zod.string().optional(),
									additionalProperties: zod
										.array(
											zod.object({
												category: zod.string().optional(),
												key: zod.string().optional(),
												sourceSystemKey: zod.string().optional(),
												value: zod.string().optional(),
												modified: zod.string().datetime().optional()
											})
										)
										.optional(),
									children: zod
										.array(
											zod.object({
												id: zod.string().optional(),
												url: zod.string().optional(),
												commonName: zod.string().optional(),
												distance: zod.number().optional(),
												placeType: zod.string().optional(),
												additionalProperties: zod
													.array(
														zod.object({
															category: zod.string().optional(),
															key: zod.string().optional(),
															sourceSystemKey: zod.string().optional(),
															value: zod.string().optional(),
															modified: zod.string().datetime().optional()
														})
													)
													.optional(),
												children: zod.array(zod.any()).optional(),
												childrenUrls: zod.array(zod.string()).optional(),
												lat: zod.number().optional(),
												lon: zod.number().optional()
											})
										)
										.optional(),
									childrenUrls: zod.array(zod.string()).optional(),
									lat: zod.number().optional(),
									lon: zod.number().optional()
								})
								.optional()
						})
					)
					.optional()
			})
		)
		.optional(),
	affectedStops: zod
		.array(
			zod.object({
				naptanId: zod.string().optional(),
				platformName: zod.string().optional(),
				indicator: zod.string().optional(),
				stopLetter: zod.string().optional(),
				modes: zod.array(zod.string()).optional(),
				icsCode: zod.string().optional(),
				smsCode: zod.string().optional(),
				stopType: zod.string().optional(),
				stationNaptan: zod.string().optional(),
				accessibilitySummary: zod.string().optional(),
				hubNaptanCode: zod.string().optional(),
				lines: zod
					.array(
						zod.object({
							id: zod.string().optional(),
							name: zod.string().optional(),
							uri: zod.string().optional(),
							fullName: zod.string().optional(),
							type: zod.string().optional(),
							crowding: zod
								.object({
									passengerFlows: zod
										.array(
											zod.object({
												timeSlice: zod.string().optional(),
												value: zod.number().optional()
											})
										)
										.optional(),
									trainLoadings: zod
										.array(
											zod.object({
												line: zod.string().optional(),
												lineDirection: zod.string().optional(),
												platformDirection: zod.string().optional(),
												direction: zod.string().optional(),
												naptanTo: zod.string().optional(),
												timeSlice: zod.string().optional(),
												value: zod.number().optional()
											})
										)
										.optional()
								})
								.optional(),
							routeType: zod
								.enum([
									'Unknown',
									'All',
									'Cycle Superhighways',
									'Quietways',
									'Cycleways',
									'Mini-Hollands',
									'Central London Grid',
									'Streetspace Route'
								])
								.optional(),
							status: zod
								.enum([
									'Unknown',
									'All',
									'Open',
									'In Progress',
									'Planned',
									'Planned - Subject to feasibility and consultation.',
									'Not Open'
								])
								.optional(),
							motType: zod.string().optional(),
							network: zod.string().optional()
						})
					)
					.optional(),
				lineGroup: zod
					.array(
						zod.object({
							naptanIdReference: zod.string().optional(),
							stationAtcoCode: zod.string().optional(),
							lineIdentifier: zod.array(zod.string()).optional()
						})
					)
					.optional(),
				lineModeGroups: zod
					.array(
						zod.object({
							modeName: zod.string().optional(),
							lineIdentifier: zod.array(zod.string()).optional()
						})
					)
					.optional(),
				fullName: zod.string().optional(),
				naptanMode: zod.string().optional(),
				status: zod.boolean().optional(),
				individualStopId: zod.string().optional(),
				id: zod.string().optional(),
				url: zod.string().optional(),
				commonName: zod.string().optional(),
				distance: zod.number().optional(),
				placeType: zod.string().optional(),
				additionalProperties: zod
					.array(
						zod.object({
							category: zod.string().optional(),
							key: zod.string().optional(),
							sourceSystemKey: zod.string().optional(),
							value: zod.string().optional(),
							modified: zod.string().datetime().optional()
						})
					)
					.optional(),
				children: zod
					.array(
						zod.object({
							id: zod.string().optional(),
							url: zod.string().optional(),
							commonName: zod.string().optional(),
							distance: zod.number().optional(),
							placeType: zod.string().optional(),
							additionalProperties: zod
								.array(
									zod.object({
										category: zod.string().optional(),
										key: zod.string().optional(),
										sourceSystemKey: zod.string().optional(),
										value: zod.string().optional(),
										modified: zod.string().datetime().optional()
									})
								)
								.optional(),
							children: zod.array(zod.any()).optional(),
							childrenUrls: zod.array(zod.string()).optional(),
							lat: zod.number().optional(),
							lon: zod.number().optional()
						})
					)
					.optional(),
				childrenUrls: zod.array(zod.string()).optional(),
				lat: zod.number().optional(),
				lon: zod.number().optional()
			})
		)
		.optional(),
	closureText: zod.string().optional()
});
export const lineDisruptionByModeResponse = zod.array(lineDisruptionByModeResponseItem);

/**
 * @summary Get the list of arrival predictions for given line ids based at the given stop
 */
export const lineArrivalsParams = zod.object({
	ids: zod.array(zod.string()),
	stopPointId: zod.string()
});

export const lineArrivalsQueryParams = zod.object({
	direction: zod.enum(['inbound', 'outbound', 'all']).optional(),
	destinationStationId: zod.string().optional()
});

export const lineArrivalsResponseItem = zod.object({
	id: zod.string().optional(),
	operationType: zod.number().optional(),
	vehicleId: zod.string().optional(),
	naptanId: zod.string().optional(),
	stationName: zod.string().optional(),
	lineId: zod.string().optional(),
	lineName: zod.string().optional(),
	platformName: zod.string().optional(),
	direction: zod.string().optional(),
	bearing: zod.string().optional(),
	tripId: zod.string().optional(),
	baseVersion: zod.string().optional(),
	destinationNaptanId: zod.string().optional(),
	destinationName: zod.string().optional(),
	timestamp: zod.string().datetime().optional(),
	timeToStation: zod.number().optional(),
	currentLocation: zod.string().optional(),
	towards: zod.string().optional(),
	expectedArrival: zod.string().datetime().optional(),
	timeToLive: zod.string().datetime().optional(),
	modeName: zod.string().optional(),
	timing: zod
		.object({
			countdownServerAdjustment: zod.string().optional(),
			source: zod.string().datetime().optional(),
			insert: zod.string().datetime().optional(),
			read: zod.string().datetime().optional(),
			sent: zod.string().datetime().optional(),
			received: zod.string().datetime().optional()
		})
		.optional()
});
export const lineArrivalsResponse = zod.array(lineArrivalsResponseItem);

/**
 * @summary Returns the service type active for a mode.
            Currently only supports tube
 */
export const modeGetActiveServiceTypesResponseItem = zod.object({
	mode: zod.string().optional(),
	serviceType: zod.string().optional()
});
export const modeGetActiveServiceTypesResponse = zod.array(modeGetActiveServiceTypesResponseItem);

/**
 * @summary Gets the next arrival predictions for all stops of a given mode
 */
export const modeArrivalsParams = zod.object({
	mode: zod.string()
});

export const modeArrivalsQueryParams = zod.object({
	count: zod.number().optional()
});

export const modeArrivalsResponseItem = zod.object({
	id: zod.string().optional(),
	operationType: zod.number().optional(),
	vehicleId: zod.string().optional(),
	naptanId: zod.string().optional(),
	stationName: zod.string().optional(),
	lineId: zod.string().optional(),
	lineName: zod.string().optional(),
	platformName: zod.string().optional(),
	direction: zod.string().optional(),
	bearing: zod.string().optional(),
	tripId: zod.string().optional(),
	baseVersion: zod.string().optional(),
	destinationNaptanId: zod.string().optional(),
	destinationName: zod.string().optional(),
	timestamp: zod.string().datetime().optional(),
	timeToStation: zod.number().optional(),
	currentLocation: zod.string().optional(),
	towards: zod.string().optional(),
	expectedArrival: zod.string().datetime().optional(),
	timeToLive: zod.string().datetime().optional(),
	modeName: zod.string().optional(),
	timing: zod
		.object({
			countdownServerAdjustment: zod.string().optional(),
			source: zod.string().datetime().optional(),
			insert: zod.string().datetime().optional(),
			read: zod.string().datetime().optional(),
			sent: zod.string().datetime().optional(),
			received: zod.string().datetime().optional()
		})
		.optional()
});
export const modeArrivalsResponse = zod.array(modeArrivalsResponseItem);

/**
 * @summary Gets the occupancy for a car park with a given id
 */
export const occupancyGetCarParkParams = zod.object({
	id: zod.string()
});

export const occupancyGetCarParkResponse = zod.object({
	id: zod.string().optional(),
	bays: zod
		.array(
			zod.object({
				bayType: zod.string().optional(),
				bayCount: zod.number().optional(),
				free: zod.number().optional(),
				occupied: zod.number().optional()
			})
		)
		.optional(),
	name: zod.string().optional(),
	carParkDetailsUrl: zod.string().optional()
});

/**
 * @summary Gets the occupancy for all car parks that have occupancy data
 */
export const occupancyGetAllCarParkResponseItem = zod.object({
	id: zod.string().optional(),
	bays: zod
		.array(
			zod.object({
				bayType: zod.string().optional(),
				bayCount: zod.number().optional(),
				free: zod.number().optional(),
				occupied: zod.number().optional()
			})
		)
		.optional(),
	name: zod.string().optional(),
	carParkDetailsUrl: zod.string().optional()
});
export const occupancyGetAllCarParkResponse = zod.array(occupancyGetAllCarParkResponseItem);

/**
 * @summary Gets the occupancy for a charge connectors with a given id (sourceSystemPlaceId)
 */
export const occupancyGetChargeConnectorStatusParams = zod.object({
	ids: zod.array(zod.string())
});

export const occupancyGetChargeConnectorStatusResponseItem = zod.object({
	id: zod.number().optional(),
	sourceSystemPlaceId: zod.string().optional(),
	status: zod.string().optional()
});
export const occupancyGetChargeConnectorStatusResponse = zod.array(
	occupancyGetChargeConnectorStatusResponseItem
);

/**
 * @summary Gets the occupancy for all charge connectors
 */
export const occupancyGetAllChargeConnectorStatusResponseItem = zod.object({
	id: zod.number().optional(),
	sourceSystemPlaceId: zod.string().optional(),
	status: zod.string().optional()
});
export const occupancyGetAllChargeConnectorStatusResponse = zod.array(
	occupancyGetAllChargeConnectorStatusResponseItem
);

/**
 * @summary Get the occupancy for bike points.
 */
export const occupancyGetBikePointsOccupanciesParams = zod.object({
	ids: zod.array(zod.string())
});

export const occupancyGetBikePointsOccupanciesResponseItem = zod.object({
	id: zod.string().optional(),
	name: zod.string().optional(),
	bikesCount: zod.number().optional(),
	emptyDocks: zod.number().optional(),
	totalDocks: zod.number().optional(),
	standardBikesCount: zod.number().optional(),
	eBikesCount: zod.number().optional()
});
export const occupancyGetBikePointsOccupanciesResponse = zod.array(
	occupancyGetBikePointsOccupanciesResponseItem
);

/**
 * @summary Gets a list of all of the available place property categories and keys.
 */
export const placeMetaCategoriesResponseItem = zod.object({
	category: zod.string().optional(),
	availableKeys: zod.array(zod.string()).optional()
});
export const placeMetaCategoriesResponse = zod.array(placeMetaCategoriesResponseItem);

/**
 * @summary Gets a list of the available types of Place.
 */
export const placeMetaPlaceTypesResponseItem = zod.object({
	category: zod.string().optional(),
	availableKeys: zod.array(zod.string()).optional()
});
export const placeMetaPlaceTypesResponse = zod.array(placeMetaPlaceTypesResponseItem);

/**
 * @summary Gets the set of streets associated with a post code.
 */
export const placeGetStreetsByPostCodeParams = zod.object({
	postcode: zod.string()
});

export const placeGetStreetsByPostCodeQueryPostcodeInputPostcodeRegExp = new RegExp(
	'^(([gG][iI][rR] {0,}0[aA]{2})|((([a-pr-uwyzA-PR-UWYZ][a-hk-yA-HK-Y]?[0-9][0-9]?)|(([a-pr-uwyzA-PR-UWYZ][0-9][a-hjkstuwA-HJKSTUW])|([a-pr-uwyzA-PR-UWYZ][a-hk-yA-HK-Y][0-9][abehmnprv-yABEHMNPRV-Y]))) {0,}[0-9][abd-hjlnp-uw-zABD-HJLNP-UW-Z]{2}))$'
);

export const placeGetStreetsByPostCodeQueryParams = zod.object({
	'postcodeInput.postcode': zod
		.string()
		.regex(placeGetStreetsByPostCodeQueryPostcodeInputPostcodeRegExp)
		.optional()
});

export const placeGetStreetsByPostCodeResponse = zod.object({});

/**
 * @summary Gets all places of a given type
 */
export const placeGetByTypeParams = zod.object({
	types: zod.array(zod.string())
});

export const placeGetByTypeQueryParams = zod.object({
	activeOnly: zod.boolean().optional()
});

export const placeGetByTypeResponseItem = zod.object({
	id: zod.string().optional(),
	url: zod.string().optional(),
	commonName: zod.string().optional(),
	distance: zod.number().optional(),
	placeType: zod.string().optional(),
	additionalProperties: zod
		.array(
			zod.object({
				category: zod.string().optional(),
				key: zod.string().optional(),
				sourceSystemKey: zod.string().optional(),
				value: zod.string().optional(),
				modified: zod.string().datetime().optional()
			})
		)
		.optional(),
	children: zod.array(zod.any()).optional(),
	childrenUrls: zod.array(zod.string()).optional(),
	lat: zod.number().optional(),
	lon: zod.number().optional()
});
export const placeGetByTypeResponse = zod.array(placeGetByTypeResponseItem);

/**
 * @summary Gets the place with the given id.
 */
export const placeGetParams = zod.object({
	id: zod.string()
});

export const placeGetQueryParams = zod.object({
	includeChildren: zod.boolean().optional()
});

export const placeGetResponseItem = zod.object({
	id: zod.string().optional(),
	url: zod.string().optional(),
	commonName: zod.string().optional(),
	distance: zod.number().optional(),
	placeType: zod.string().optional(),
	additionalProperties: zod
		.array(
			zod.object({
				category: zod.string().optional(),
				key: zod.string().optional(),
				sourceSystemKey: zod.string().optional(),
				value: zod.string().optional(),
				modified: zod.string().datetime().optional()
			})
		)
		.optional(),
	children: zod.array(zod.any()).optional(),
	childrenUrls: zod.array(zod.string()).optional(),
	lat: zod.number().optional(),
	lon: zod.number().optional()
});
export const placeGetResponse = zod.array(placeGetResponseItem);

/**
 * @summary Gets the places that lie within a geographic region. The geographic region of interest can either be specified
            by using a lat/lon geo-point and a radius in metres to return places within the locus defined by the lat/lon of
            its centre or alternatively, by the use of a bounding box defined by the lat/lon of its north-west and south-east corners.
            Optionally filters on type and can strip properties for a smaller payload.
 */
export const placeGetByGeoQueryParams = zod.object({
	radius: zod.number().optional(),
	categories: zod.array(zod.string()).optional(),
	includeChildren: zod.boolean().optional(),
	type: zod.array(zod.string()).optional(),
	activeOnly: zod.boolean().optional(),
	numberOfPlacesToReturn: zod.number().optional(),
	'placeGeo.swLat': zod.number().optional(),
	'placeGeo.swLon': zod.number().optional(),
	'placeGeo.neLat': zod.number().optional(),
	'placeGeo.neLon': zod.number().optional(),
	'placeGeo.lat': zod.number().optional(),
	'placeGeo.lon': zod.number().optional()
});

export const placeGetByGeoResponseItem = zod.object({
	naptanId: zod.string().optional(),
	platformName: zod.string().optional(),
	indicator: zod.string().optional(),
	stopLetter: zod.string().optional(),
	modes: zod.array(zod.string()).optional(),
	icsCode: zod.string().optional(),
	smsCode: zod.string().optional(),
	stopType: zod.string().optional(),
	stationNaptan: zod.string().optional(),
	accessibilitySummary: zod.string().optional(),
	hubNaptanCode: zod.string().optional(),
	lines: zod
		.array(
			zod.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
				uri: zod.string().optional(),
				fullName: zod.string().optional(),
				type: zod.string().optional(),
				crowding: zod
					.object({
						passengerFlows: zod
							.array(
								zod.object({
									timeSlice: zod.string().optional(),
									value: zod.number().optional()
								})
							)
							.optional(),
						trainLoadings: zod
							.array(
								zod.object({
									line: zod.string().optional(),
									lineDirection: zod.string().optional(),
									platformDirection: zod.string().optional(),
									direction: zod.string().optional(),
									naptanTo: zod.string().optional(),
									timeSlice: zod.string().optional(),
									value: zod.number().optional()
								})
							)
							.optional()
					})
					.optional(),
				routeType: zod
					.enum([
						'Unknown',
						'All',
						'Cycle Superhighways',
						'Quietways',
						'Cycleways',
						'Mini-Hollands',
						'Central London Grid',
						'Streetspace Route'
					])
					.optional(),
				status: zod
					.enum([
						'Unknown',
						'All',
						'Open',
						'In Progress',
						'Planned',
						'Planned - Subject to feasibility and consultation.',
						'Not Open'
					])
					.optional(),
				motType: zod.string().optional(),
				network: zod.string().optional()
			})
		)
		.optional(),
	lineGroup: zod
		.array(
			zod.object({
				naptanIdReference: zod.string().optional(),
				stationAtcoCode: zod.string().optional(),
				lineIdentifier: zod.array(zod.string()).optional()
			})
		)
		.optional(),
	lineModeGroups: zod
		.array(
			zod.object({
				modeName: zod.string().optional(),
				lineIdentifier: zod.array(zod.string()).optional()
			})
		)
		.optional(),
	fullName: zod.string().optional(),
	naptanMode: zod.string().optional(),
	status: zod.boolean().optional(),
	individualStopId: zod.string().optional(),
	id: zod.string().optional(),
	url: zod.string().optional(),
	commonName: zod.string().optional(),
	distance: zod.number().optional(),
	placeType: zod.string().optional(),
	additionalProperties: zod
		.array(
			zod.object({
				category: zod.string().optional(),
				key: zod.string().optional(),
				sourceSystemKey: zod.string().optional(),
				value: zod.string().optional(),
				modified: zod.string().datetime().optional()
			})
		)
		.optional(),
	children: zod
		.array(
			zod.object({
				id: zod.string().optional(),
				url: zod.string().optional(),
				commonName: zod.string().optional(),
				distance: zod.number().optional(),
				placeType: zod.string().optional(),
				additionalProperties: zod
					.array(
						zod.object({
							category: zod.string().optional(),
							key: zod.string().optional(),
							sourceSystemKey: zod.string().optional(),
							value: zod.string().optional(),
							modified: zod.string().datetime().optional()
						})
					)
					.optional(),
				children: zod.array(zod.any()).optional(),
				childrenUrls: zod.array(zod.string()).optional(),
				lat: zod.number().optional(),
				lon: zod.number().optional()
			})
		)
		.optional(),
	childrenUrls: zod.array(zod.string()).optional(),
	lat: zod.number().optional(),
	lon: zod.number().optional()
});
export const placeGetByGeoResponse = zod.array(placeGetByGeoResponseItem);

/**
 * @summary Gets any places of the given type whose geography intersects the given latitude and longitude. In practice this means the Place
            must be polygonal e.g. a BoroughBoundary.
 */
export const placeGetAtParams = zod.object({
	type: zod.array(zod.string()),
	lat: zod.string(),
	lon: zod.string()
});

export const placeGetAtQueryParams = zod.object({
	'location.lat': zod.number(),
	'location.lon': zod.number()
});

export const placeGetAtResponse = zod.object({});

/**
 * @summary Gets the place overlay for a given set of co-ordinates and a given width/height.
 */
export const placeGetOverlayParams = zod.object({
	z: zod.number(),
	type: zod.array(zod.string()),
	width: zod.number(),
	height: zod.number(),
	lat: zod.string(),
	lon: zod.string()
});

export const placeGetOverlayQueryParams = zod.object({
	'location.lat': zod.number(),
	'location.lon': zod.number()
});

export const placeGetOverlayResponse = zod.object({});

/**
 * @summary Gets all places that matches the given query
 */
export const placeSearchQueryParams = zod.object({
	name: zod.string(),
	types: zod.array(zod.string()).optional()
});

export const placeSearchResponseItem = zod.object({
	id: zod.string().optional(),
	url: zod.string().optional(),
	commonName: zod.string().optional(),
	distance: zod.number().optional(),
	placeType: zod.string().optional(),
	additionalProperties: zod
		.array(
			zod.object({
				category: zod.string().optional(),
				key: zod.string().optional(),
				sourceSystemKey: zod.string().optional(),
				value: zod.string().optional(),
				modified: zod.string().datetime().optional()
			})
		)
		.optional(),
	children: zod.array(zod.any()).optional(),
	childrenUrls: zod.array(zod.string()).optional(),
	lat: zod.number().optional(),
	lon: zod.number().optional()
});
export const placeSearchResponse = zod.array(placeSearchResponseItem);

/**
 * @summary Gets all roads managed by TfL
 */
export const roadGetResponseItem = zod.object({
	id: zod.string().optional(),
	displayName: zod.string().optional(),
	group: zod.string().optional(),
	statusSeverity: zod.string().optional(),
	statusSeverityDescription: zod.string().optional(),
	bounds: zod.string().optional(),
	envelope: zod.string().optional(),
	statusAggregationStartDate: zod.string().datetime().optional(),
	statusAggregationEndDate: zod.string().datetime().optional(),
	url: zod.string().optional()
});
export const roadGetResponse = zod.array(roadGetResponseItem);

/**
 * @summary Gets the road with the specified id (e.g. A1)
 */
export const roadGetByPathIdsParams = zod.object({
	ids: zod.array(zod.string())
});

export const roadGetByPathIdsResponseItem = zod.object({
	id: zod.string().optional(),
	displayName: zod.string().optional(),
	group: zod.string().optional(),
	statusSeverity: zod.string().optional(),
	statusSeverityDescription: zod.string().optional(),
	bounds: zod.string().optional(),
	envelope: zod.string().optional(),
	statusAggregationStartDate: zod.string().datetime().optional(),
	statusAggregationEndDate: zod.string().datetime().optional(),
	url: zod.string().optional()
});
export const roadGetByPathIdsResponse = zod.array(roadGetByPathIdsResponseItem);

/**
 * @summary Gets the specified roads with the status aggregated over the date range specified, or now until the end of today if no dates are passed.
 */
export const roadStatusParams = zod.object({
	ids: zod.array(zod.string())
});

export const roadStatusQueryParams = zod.object({
	'dateRangeNullable.startDate': zod.string().datetime().optional(),
	'dateRangeNullable.endDate': zod.string().datetime().optional()
});

export const roadStatusResponseItem = zod.object({
	id: zod.string().optional(),
	displayName: zod.string().optional(),
	group: zod.string().optional(),
	statusSeverity: zod.string().optional(),
	statusSeverityDescription: zod.string().optional(),
	bounds: zod.string().optional(),
	envelope: zod.string().optional(),
	statusAggregationStartDate: zod.string().datetime().optional(),
	statusAggregationEndDate: zod.string().datetime().optional(),
	url: zod.string().optional()
});
export const roadStatusResponse = zod.array(roadStatusResponseItem);

/**
 * @summary Get active disruptions, filtered by road ids
 */
export const roadDisruptionParams = zod.object({
	ids: zod.array(zod.string())
});

export const roadDisruptionQueryParams = zod.object({
	stripContent: zod.boolean().optional(),
	severities: zod.array(zod.string()).optional(),
	categories: zod.array(zod.string()).optional(),
	closures: zod.boolean().optional()
});

export const roadDisruptionResponseItem = zod.object({
	id: zod.string().optional(),
	url: zod.string().optional(),
	point: zod.string().optional(),
	severity: zod.string().optional(),
	ordinal: zod.number().optional(),
	category: zod.string().optional(),
	subCategory: zod.string().optional(),
	comments: zod.string().optional(),
	currentUpdate: zod.string().optional(),
	currentUpdateDateTime: zod.string().datetime().optional(),
	corridorIds: zod.array(zod.string()).optional(),
	startDateTime: zod.string().datetime().optional(),
	endDateTime: zod.string().datetime().optional(),
	lastModifiedTime: zod.string().datetime().optional(),
	levelOfInterest: zod.string().optional(),
	location: zod.string().optional(),
	status: zod.string().optional(),
	geography: zod
		.object({
			geography: zod
				.object({
					coordinateSystemId: zod.number().optional(),
					wellKnownText: zod.string().optional(),
					wellKnownBinary: zod.string().optional()
				})
				.optional()
		})
		.optional(),
	geometry: zod
		.object({
			geography: zod
				.object({
					coordinateSystemId: zod.number().optional(),
					wellKnownText: zod.string().optional(),
					wellKnownBinary: zod.string().optional()
				})
				.optional()
		})
		.optional(),
	streets: zod
		.array(
			zod.object({
				name: zod.string().optional(),
				closure: zod.string().optional(),
				directions: zod.string().optional(),
				segments: zod
					.array(
						zod.object({
							toid: zod.string().optional(),
							lineString: zod.string().optional(),
							sourceSystemId: zod.number().optional(),
							sourceSystemKey: zod.string().optional()
						})
					)
					.optional(),
				sourceSystemId: zod.number().optional(),
				sourceSystemKey: zod.string().optional()
			})
		)
		.optional(),
	isProvisional: zod.boolean().optional(),
	hasClosures: zod.boolean().optional(),
	linkText: zod.string().optional(),
	linkUrl: zod.string().optional(),
	roadProject: zod
		.object({
			projectId: zod.string().optional(),
			schemeName: zod.string().optional(),
			projectName: zod.string().optional(),
			projectDescription: zod.string().optional(),
			projectPageUrl: zod.string().optional(),
			consultationPageUrl: zod.string().optional(),
			consultationStartDate: zod.string().datetime().optional(),
			consultationEndDate: zod.string().datetime().optional(),
			constructionStartDate: zod.string().datetime().optional(),
			constructionEndDate: zod.string().datetime().optional(),
			boroughsBenefited: zod.array(zod.string()).optional(),
			cycleSuperhighwayId: zod.string().optional(),
			phase: zod
				.enum([
					'Unscoped',
					'Concept',
					'ConsultationEnded',
					'Consultation',
					'Construction',
					'Complete'
				])
				.optional(),
			contactName: zod.string().optional(),
			contactEmail: zod.string().optional(),
			externalPageUrl: zod.string().optional(),
			projectSummaryPageUrl: zod.string().optional()
		})
		.optional(),
	publishStartDate: zod.string().datetime().optional(),
	publishEndDate: zod.string().datetime().optional(),
	timeFrame: zod.string().optional(),
	roadDisruptionLines: zod
		.array(
			zod.object({
				id: zod.number().optional(),
				roadDisruptionId: zod.string().optional(),
				isDiversion: zod.boolean().optional(),
				multiLineString: zod
					.object({
						geography: zod
							.object({
								coordinateSystemId: zod.number().optional(),
								wellKnownText: zod.string().optional(),
								wellKnownBinary: zod.string().optional()
							})
							.optional()
					})
					.optional(),
				startDate: zod.string().datetime().optional(),
				endDate: zod.string().datetime().optional(),
				startTime: zod.string().optional(),
				endTime: zod.string().optional()
			})
		)
		.optional(),
	roadDisruptionImpactAreas: zod
		.array(
			zod.object({
				id: zod.number().optional(),
				roadDisruptionId: zod.string().optional(),
				polygon: zod
					.object({
						geography: zod
							.object({
								coordinateSystemId: zod.number().optional(),
								wellKnownText: zod.string().optional(),
								wellKnownBinary: zod.string().optional()
							})
							.optional()
					})
					.optional(),
				startDate: zod.string().datetime().optional(),
				endDate: zod.string().datetime().optional(),
				startTime: zod.string().optional(),
				endTime: zod.string().optional()
			})
		)
		.optional(),
	recurringSchedules: zod
		.array(
			zod.object({
				startTime: zod.string().datetime().optional(),
				endTime: zod.string().datetime().optional()
			})
		)
		.optional()
});
export const roadDisruptionResponse = zod.array(roadDisruptionResponseItem);

/**
 * @summary Gets a list of disrupted streets. If no date filters are provided, current disruptions are returned.
 */
export const roadDisruptedStreetsQueryParams = zod.object({
	startDate: zod.string().datetime(),
	endDate: zod.string().datetime()
});

export const roadDisruptedStreetsResponse = zod.object({});

/**
 * @summary Gets a list of active disruptions filtered by disruption Ids.
 */
export const roadDisruptionByIdParams = zod.object({
	disruptionIds: zod.array(zod.string())
});

export const roadDisruptionByIdQueryParams = zod.object({
	stripContent: zod.boolean().optional()
});

export const roadDisruptionByIdResponse = zod.object({
	id: zod.string().optional(),
	url: zod.string().optional(),
	point: zod.string().optional(),
	severity: zod.string().optional(),
	ordinal: zod.number().optional(),
	category: zod.string().optional(),
	subCategory: zod.string().optional(),
	comments: zod.string().optional(),
	currentUpdate: zod.string().optional(),
	currentUpdateDateTime: zod.string().datetime().optional(),
	corridorIds: zod.array(zod.string()).optional(),
	startDateTime: zod.string().datetime().optional(),
	endDateTime: zod.string().datetime().optional(),
	lastModifiedTime: zod.string().datetime().optional(),
	levelOfInterest: zod.string().optional(),
	location: zod.string().optional(),
	status: zod.string().optional(),
	geography: zod
		.object({
			geography: zod
				.object({
					coordinateSystemId: zod.number().optional(),
					wellKnownText: zod.string().optional(),
					wellKnownBinary: zod.string().optional()
				})
				.optional()
		})
		.optional(),
	geometry: zod
		.object({
			geography: zod
				.object({
					coordinateSystemId: zod.number().optional(),
					wellKnownText: zod.string().optional(),
					wellKnownBinary: zod.string().optional()
				})
				.optional()
		})
		.optional(),
	streets: zod
		.array(
			zod.object({
				name: zod.string().optional(),
				closure: zod.string().optional(),
				directions: zod.string().optional(),
				segments: zod
					.array(
						zod.object({
							toid: zod.string().optional(),
							lineString: zod.string().optional(),
							sourceSystemId: zod.number().optional(),
							sourceSystemKey: zod.string().optional()
						})
					)
					.optional(),
				sourceSystemId: zod.number().optional(),
				sourceSystemKey: zod.string().optional()
			})
		)
		.optional(),
	isProvisional: zod.boolean().optional(),
	hasClosures: zod.boolean().optional(),
	linkText: zod.string().optional(),
	linkUrl: zod.string().optional(),
	roadProject: zod
		.object({
			projectId: zod.string().optional(),
			schemeName: zod.string().optional(),
			projectName: zod.string().optional(),
			projectDescription: zod.string().optional(),
			projectPageUrl: zod.string().optional(),
			consultationPageUrl: zod.string().optional(),
			consultationStartDate: zod.string().datetime().optional(),
			consultationEndDate: zod.string().datetime().optional(),
			constructionStartDate: zod.string().datetime().optional(),
			constructionEndDate: zod.string().datetime().optional(),
			boroughsBenefited: zod.array(zod.string()).optional(),
			cycleSuperhighwayId: zod.string().optional(),
			phase: zod
				.enum([
					'Unscoped',
					'Concept',
					'ConsultationEnded',
					'Consultation',
					'Construction',
					'Complete'
				])
				.optional(),
			contactName: zod.string().optional(),
			contactEmail: zod.string().optional(),
			externalPageUrl: zod.string().optional(),
			projectSummaryPageUrl: zod.string().optional()
		})
		.optional(),
	publishStartDate: zod.string().datetime().optional(),
	publishEndDate: zod.string().datetime().optional(),
	timeFrame: zod.string().optional(),
	roadDisruptionLines: zod
		.array(
			zod.object({
				id: zod.number().optional(),
				roadDisruptionId: zod.string().optional(),
				isDiversion: zod.boolean().optional(),
				multiLineString: zod
					.object({
						geography: zod
							.object({
								coordinateSystemId: zod.number().optional(),
								wellKnownText: zod.string().optional(),
								wellKnownBinary: zod.string().optional()
							})
							.optional()
					})
					.optional(),
				startDate: zod.string().datetime().optional(),
				endDate: zod.string().datetime().optional(),
				startTime: zod.string().optional(),
				endTime: zod.string().optional()
			})
		)
		.optional(),
	roadDisruptionImpactAreas: zod
		.array(
			zod.object({
				id: zod.number().optional(),
				roadDisruptionId: zod.string().optional(),
				polygon: zod
					.object({
						geography: zod
							.object({
								coordinateSystemId: zod.number().optional(),
								wellKnownText: zod.string().optional(),
								wellKnownBinary: zod.string().optional()
							})
							.optional()
					})
					.optional(),
				startDate: zod.string().datetime().optional(),
				endDate: zod.string().datetime().optional(),
				startTime: zod.string().optional(),
				endTime: zod.string().optional()
			})
		)
		.optional(),
	recurringSchedules: zod
		.array(
			zod.object({
				startTime: zod.string().datetime().optional(),
				endTime: zod.string().datetime().optional()
			})
		)
		.optional()
});

/**
 * @summary Gets a list of valid RoadDisruption categories
 */
export const roadMetaCategoriesResponseItem = zod.string();
export const roadMetaCategoriesResponse = zod.array(roadMetaCategoriesResponseItem);

/**
 * @summary Gets a list of valid RoadDisruption severity codes
 */
export const roadMetaSeveritiesResponseItem = zod.object({
	modeName: zod.string().optional(),
	severityLevel: zod.number().optional(),
	description: zod.string().optional()
});
export const roadMetaSeveritiesResponse = zod.array(roadMetaSeveritiesResponseItem);

/**
 * @summary Search the site for occurrences of the query string. The maximum number of results returned is equal to the maximum page size
            of 100. To return subsequent pages, use the paginated overload.
 */
export const searchGetQueryParams = zod.object({
	query: zod.string()
});

export const searchGetResponse = zod.object({
	query: zod.string().optional(),
	from: zod.number().optional(),
	page: zod.number().optional(),
	pageSize: zod.number().optional(),
	provider: zod.string().optional(),
	total: zod.number().optional(),
	matches: zod
		.array(
			zod.object({
				id: zod.string().optional(),
				url: zod.string().optional(),
				name: zod.string().optional(),
				lat: zod.number().optional(),
				lon: zod.number().optional()
			})
		)
		.optional(),
	maxScore: zod.number().optional()
});

/**
 * @summary Searches the bus schedules folder on S3 for a given bus number.
 */
export const searchBusSchedulesQueryParams = zod.object({
	query: zod.string()
});

export const searchBusSchedulesResponse = zod.object({
	query: zod.string().optional(),
	from: zod.number().optional(),
	page: zod.number().optional(),
	pageSize: zod.number().optional(),
	provider: zod.string().optional(),
	total: zod.number().optional(),
	matches: zod
		.array(
			zod.object({
				id: zod.string().optional(),
				url: zod.string().optional(),
				name: zod.string().optional(),
				lat: zod.number().optional(),
				lon: zod.number().optional()
			})
		)
		.optional(),
	maxScore: zod.number().optional()
});

/**
 * @summary Gets the available searchProvider names.
 */
export const searchMetaSearchProvidersResponseItem = zod.string();
export const searchMetaSearchProvidersResponse = zod.array(searchMetaSearchProvidersResponseItem);

/**
 * @summary Gets the available search categories.
 */
export const searchMetaCategoriesResponseItem = zod.string();
export const searchMetaCategoriesResponse = zod.array(searchMetaCategoriesResponseItem);

/**
 * @summary Gets the available sorting options.
 */
export const searchMetaSortsResponseItem = zod.string();
export const searchMetaSortsResponse = zod.array(searchMetaSortsResponseItem);

/**
 * @summary Gets the list of available StopPoint additional information categories
 */
export const stopPointMetaCategoriesResponseItem = zod.object({
	category: zod.string().optional(),
	availableKeys: zod.array(zod.string()).optional()
});
export const stopPointMetaCategoriesResponse = zod.array(stopPointMetaCategoriesResponseItem);

/**
 * @summary Gets the list of available StopPoint types
 */
export const stopPointMetaStopTypesResponseItem = zod.string();
export const stopPointMetaStopTypesResponse = zod.array(stopPointMetaStopTypesResponseItem);

/**
 * @summary Gets the list of available StopPoint modes
 */
export const stopPointMetaModesResponseItem = zod.object({
	isTflService: zod.boolean().optional(),
	isFarePaying: zod.boolean().optional(),
	isScheduledService: zod.boolean().optional(),
	modeName: zod.string().optional(),
	motType: zod.string().optional(),
	network: zod.string().optional()
});
export const stopPointMetaModesResponse = zod.array(stopPointMetaModesResponseItem);

/**
 * @summary Gets a list of StopPoints corresponding to the given list of stop ids.
 */
export const stopPointGetByPathParams = zod.object({
	ids: zod.array(zod.string())
});

export const stopPointGetByPathQueryParams = zod.object({
	includeCrowdingData: zod.boolean().optional()
});

export const stopPointGetByPathResponseItem = zod.object({
	naptanId: zod.string().optional(),
	platformName: zod.string().optional(),
	indicator: zod.string().optional(),
	stopLetter: zod.string().optional(),
	modes: zod.array(zod.string()).optional(),
	icsCode: zod.string().optional(),
	smsCode: zod.string().optional(),
	stopType: zod.string().optional(),
	stationNaptan: zod.string().optional(),
	accessibilitySummary: zod.string().optional(),
	hubNaptanCode: zod.string().optional(),
	lines: zod
		.array(
			zod.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
				uri: zod.string().optional(),
				fullName: zod.string().optional(),
				type: zod.string().optional(),
				crowding: zod
					.object({
						passengerFlows: zod
							.array(
								zod.object({
									timeSlice: zod.string().optional(),
									value: zod.number().optional()
								})
							)
							.optional(),
						trainLoadings: zod
							.array(
								zod.object({
									line: zod.string().optional(),
									lineDirection: zod.string().optional(),
									platformDirection: zod.string().optional(),
									direction: zod.string().optional(),
									naptanTo: zod.string().optional(),
									timeSlice: zod.string().optional(),
									value: zod.number().optional()
								})
							)
							.optional()
					})
					.optional(),
				routeType: zod
					.enum([
						'Unknown',
						'All',
						'Cycle Superhighways',
						'Quietways',
						'Cycleways',
						'Mini-Hollands',
						'Central London Grid',
						'Streetspace Route'
					])
					.optional(),
				status: zod
					.enum([
						'Unknown',
						'All',
						'Open',
						'In Progress',
						'Planned',
						'Planned - Subject to feasibility and consultation.',
						'Not Open'
					])
					.optional(),
				motType: zod.string().optional(),
				network: zod.string().optional()
			})
		)
		.optional(),
	lineGroup: zod
		.array(
			zod.object({
				naptanIdReference: zod.string().optional(),
				stationAtcoCode: zod.string().optional(),
				lineIdentifier: zod.array(zod.string()).optional()
			})
		)
		.optional(),
	lineModeGroups: zod
		.array(
			zod.object({
				modeName: zod.string().optional(),
				lineIdentifier: zod.array(zod.string()).optional()
			})
		)
		.optional(),
	fullName: zod.string().optional(),
	naptanMode: zod.string().optional(),
	status: zod.boolean().optional(),
	individualStopId: zod.string().optional(),
	id: zod.string().optional(),
	url: zod.string().optional(),
	commonName: zod.string().optional(),
	distance: zod.number().optional(),
	placeType: zod.string().optional(),
	additionalProperties: zod
		.array(
			zod.object({
				category: zod.string().optional(),
				key: zod.string().optional(),
				sourceSystemKey: zod.string().optional(),
				value: zod.string().optional(),
				modified: zod.string().datetime().optional()
			})
		)
		.optional(),
	children: zod
		.array(
			zod.object({
				id: zod.string().optional(),
				url: zod.string().optional(),
				commonName: zod.string().optional(),
				distance: zod.number().optional(),
				placeType: zod.string().optional(),
				additionalProperties: zod
					.array(
						zod.object({
							category: zod.string().optional(),
							key: zod.string().optional(),
							sourceSystemKey: zod.string().optional(),
							value: zod.string().optional(),
							modified: zod.string().datetime().optional()
						})
					)
					.optional(),
				children: zod.array(zod.any()).optional(),
				childrenUrls: zod.array(zod.string()).optional(),
				lat: zod.number().optional(),
				lon: zod.number().optional()
			})
		)
		.optional(),
	childrenUrls: zod.array(zod.string()).optional(),
	lat: zod.number().optional(),
	lon: zod.number().optional()
});
export const stopPointGetByPathResponse = zod.array(stopPointGetByPathResponseItem);

/**
 * @summary Get a list of places corresponding to a given id and place types.
 */
export const stopPointGetPlaceTypesParams = zod.object({
	id: zod.string()
});

export const stopPointGetPlaceTypesQueryParams = zod.object({
	placeTypes: zod.array(zod.string())
});

export const stopPointGetPlaceTypesResponseItem = zod.object({
	id: zod.string().optional(),
	url: zod.string().optional(),
	commonName: zod.string().optional(),
	distance: zod.number().optional(),
	placeType: zod.string().optional(),
	additionalProperties: zod
		.array(
			zod.object({
				category: zod.string().optional(),
				key: zod.string().optional(),
				sourceSystemKey: zod.string().optional(),
				value: zod.string().optional(),
				modified: zod.string().datetime().optional()
			})
		)
		.optional(),
	children: zod.array(zod.any()).optional(),
	childrenUrls: zod.array(zod.string()).optional(),
	lat: zod.number().optional(),
	lon: zod.number().optional()
});
export const stopPointGetPlaceTypesResponse = zod.array(stopPointGetPlaceTypesResponseItem);

/**
 * @summary Gets all the Crowding data (static) for the StopPointId, plus crowding data for a given line and optionally a particular direction.
 */
export const stopPointCrowdingParams = zod.object({
	id: zod.string(),
	line: zod.string()
});

export const stopPointCrowdingQueryParams = zod.object({
	direction: zod.enum(['inbound', 'outbound', 'all'])
});

export const stopPointCrowdingResponseItem = zod.object({
	naptanId: zod.string().optional(),
	platformName: zod.string().optional(),
	indicator: zod.string().optional(),
	stopLetter: zod.string().optional(),
	modes: zod.array(zod.string()).optional(),
	icsCode: zod.string().optional(),
	smsCode: zod.string().optional(),
	stopType: zod.string().optional(),
	stationNaptan: zod.string().optional(),
	accessibilitySummary: zod.string().optional(),
	hubNaptanCode: zod.string().optional(),
	lines: zod
		.array(
			zod.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
				uri: zod.string().optional(),
				fullName: zod.string().optional(),
				type: zod.string().optional(),
				crowding: zod
					.object({
						passengerFlows: zod
							.array(
								zod.object({
									timeSlice: zod.string().optional(),
									value: zod.number().optional()
								})
							)
							.optional(),
						trainLoadings: zod
							.array(
								zod.object({
									line: zod.string().optional(),
									lineDirection: zod.string().optional(),
									platformDirection: zod.string().optional(),
									direction: zod.string().optional(),
									naptanTo: zod.string().optional(),
									timeSlice: zod.string().optional(),
									value: zod.number().optional()
								})
							)
							.optional()
					})
					.optional(),
				routeType: zod
					.enum([
						'Unknown',
						'All',
						'Cycle Superhighways',
						'Quietways',
						'Cycleways',
						'Mini-Hollands',
						'Central London Grid',
						'Streetspace Route'
					])
					.optional(),
				status: zod
					.enum([
						'Unknown',
						'All',
						'Open',
						'In Progress',
						'Planned',
						'Planned - Subject to feasibility and consultation.',
						'Not Open'
					])
					.optional(),
				motType: zod.string().optional(),
				network: zod.string().optional()
			})
		)
		.optional(),
	lineGroup: zod
		.array(
			zod.object({
				naptanIdReference: zod.string().optional(),
				stationAtcoCode: zod.string().optional(),
				lineIdentifier: zod.array(zod.string()).optional()
			})
		)
		.optional(),
	lineModeGroups: zod
		.array(
			zod.object({
				modeName: zod.string().optional(),
				lineIdentifier: zod.array(zod.string()).optional()
			})
		)
		.optional(),
	fullName: zod.string().optional(),
	naptanMode: zod.string().optional(),
	status: zod.boolean().optional(),
	individualStopId: zod.string().optional(),
	id: zod.string().optional(),
	url: zod.string().optional(),
	commonName: zod.string().optional(),
	distance: zod.number().optional(),
	placeType: zod.string().optional(),
	additionalProperties: zod
		.array(
			zod.object({
				category: zod.string().optional(),
				key: zod.string().optional(),
				sourceSystemKey: zod.string().optional(),
				value: zod.string().optional(),
				modified: zod.string().datetime().optional()
			})
		)
		.optional(),
	children: zod
		.array(
			zod.object({
				id: zod.string().optional(),
				url: zod.string().optional(),
				commonName: zod.string().optional(),
				distance: zod.number().optional(),
				placeType: zod.string().optional(),
				additionalProperties: zod
					.array(
						zod.object({
							category: zod.string().optional(),
							key: zod.string().optional(),
							sourceSystemKey: zod.string().optional(),
							value: zod.string().optional(),
							modified: zod.string().datetime().optional()
						})
					)
					.optional(),
				children: zod.array(zod.any()).optional(),
				childrenUrls: zod.array(zod.string()).optional(),
				lat: zod.number().optional(),
				lon: zod.number().optional()
			})
		)
		.optional(),
	childrenUrls: zod.array(zod.string()).optional(),
	lat: zod.number().optional(),
	lon: zod.number().optional()
});
export const stopPointCrowdingResponse = zod.array(stopPointCrowdingResponseItem);

/**
 * @summary Gets all stop points of a given type
 */
export const stopPointGetByTypeParams = zod.object({
	types: zod.array(zod.string())
});

export const stopPointGetByTypeResponseItem = zod.object({
	naptanId: zod.string().optional(),
	platformName: zod.string().optional(),
	indicator: zod.string().optional(),
	stopLetter: zod.string().optional(),
	modes: zod.array(zod.string()).optional(),
	icsCode: zod.string().optional(),
	smsCode: zod.string().optional(),
	stopType: zod.string().optional(),
	stationNaptan: zod.string().optional(),
	accessibilitySummary: zod.string().optional(),
	hubNaptanCode: zod.string().optional(),
	lines: zod
		.array(
			zod.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
				uri: zod.string().optional(),
				fullName: zod.string().optional(),
				type: zod.string().optional(),
				crowding: zod
					.object({
						passengerFlows: zod
							.array(
								zod.object({
									timeSlice: zod.string().optional(),
									value: zod.number().optional()
								})
							)
							.optional(),
						trainLoadings: zod
							.array(
								zod.object({
									line: zod.string().optional(),
									lineDirection: zod.string().optional(),
									platformDirection: zod.string().optional(),
									direction: zod.string().optional(),
									naptanTo: zod.string().optional(),
									timeSlice: zod.string().optional(),
									value: zod.number().optional()
								})
							)
							.optional()
					})
					.optional(),
				routeType: zod
					.enum([
						'Unknown',
						'All',
						'Cycle Superhighways',
						'Quietways',
						'Cycleways',
						'Mini-Hollands',
						'Central London Grid',
						'Streetspace Route'
					])
					.optional(),
				status: zod
					.enum([
						'Unknown',
						'All',
						'Open',
						'In Progress',
						'Planned',
						'Planned - Subject to feasibility and consultation.',
						'Not Open'
					])
					.optional(),
				motType: zod.string().optional(),
				network: zod.string().optional()
			})
		)
		.optional(),
	lineGroup: zod
		.array(
			zod.object({
				naptanIdReference: zod.string().optional(),
				stationAtcoCode: zod.string().optional(),
				lineIdentifier: zod.array(zod.string()).optional()
			})
		)
		.optional(),
	lineModeGroups: zod
		.array(
			zod.object({
				modeName: zod.string().optional(),
				lineIdentifier: zod.array(zod.string()).optional()
			})
		)
		.optional(),
	fullName: zod.string().optional(),
	naptanMode: zod.string().optional(),
	status: zod.boolean().optional(),
	individualStopId: zod.string().optional(),
	id: zod.string().optional(),
	url: zod.string().optional(),
	commonName: zod.string().optional(),
	distance: zod.number().optional(),
	placeType: zod.string().optional(),
	additionalProperties: zod
		.array(
			zod.object({
				category: zod.string().optional(),
				key: zod.string().optional(),
				sourceSystemKey: zod.string().optional(),
				value: zod.string().optional(),
				modified: zod.string().datetime().optional()
			})
		)
		.optional(),
	children: zod
		.array(
			zod.object({
				id: zod.string().optional(),
				url: zod.string().optional(),
				commonName: zod.string().optional(),
				distance: zod.number().optional(),
				placeType: zod.string().optional(),
				additionalProperties: zod
					.array(
						zod.object({
							category: zod.string().optional(),
							key: zod.string().optional(),
							sourceSystemKey: zod.string().optional(),
							value: zod.string().optional(),
							modified: zod.string().datetime().optional()
						})
					)
					.optional(),
				children: zod.array(zod.any()).optional(),
				childrenUrls: zod.array(zod.string()).optional(),
				lat: zod.number().optional(),
				lon: zod.number().optional()
			})
		)
		.optional(),
	childrenUrls: zod.array(zod.string()).optional(),
	lat: zod.number().optional(),
	lon: zod.number().optional()
});
export const stopPointGetByTypeResponse = zod.array(stopPointGetByTypeResponseItem);

/**
 * @summary Gets all the stop points of given type(s) with a page number
 */
export const stopPointGetByTypeWithPaginationParams = zod.object({
	types: zod.array(zod.string()),
	page: zod.number()
});

export const stopPointGetByTypeWithPaginationResponseItem = zod.object({
	naptanId: zod.string().optional(),
	platformName: zod.string().optional(),
	indicator: zod.string().optional(),
	stopLetter: zod.string().optional(),
	modes: zod.array(zod.string()).optional(),
	icsCode: zod.string().optional(),
	smsCode: zod.string().optional(),
	stopType: zod.string().optional(),
	stationNaptan: zod.string().optional(),
	accessibilitySummary: zod.string().optional(),
	hubNaptanCode: zod.string().optional(),
	lines: zod
		.array(
			zod.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
				uri: zod.string().optional(),
				fullName: zod.string().optional(),
				type: zod.string().optional(),
				crowding: zod
					.object({
						passengerFlows: zod
							.array(
								zod.object({
									timeSlice: zod.string().optional(),
									value: zod.number().optional()
								})
							)
							.optional(),
						trainLoadings: zod
							.array(
								zod.object({
									line: zod.string().optional(),
									lineDirection: zod.string().optional(),
									platformDirection: zod.string().optional(),
									direction: zod.string().optional(),
									naptanTo: zod.string().optional(),
									timeSlice: zod.string().optional(),
									value: zod.number().optional()
								})
							)
							.optional()
					})
					.optional(),
				routeType: zod
					.enum([
						'Unknown',
						'All',
						'Cycle Superhighways',
						'Quietways',
						'Cycleways',
						'Mini-Hollands',
						'Central London Grid',
						'Streetspace Route'
					])
					.optional(),
				status: zod
					.enum([
						'Unknown',
						'All',
						'Open',
						'In Progress',
						'Planned',
						'Planned - Subject to feasibility and consultation.',
						'Not Open'
					])
					.optional(),
				motType: zod.string().optional(),
				network: zod.string().optional()
			})
		)
		.optional(),
	lineGroup: zod
		.array(
			zod.object({
				naptanIdReference: zod.string().optional(),
				stationAtcoCode: zod.string().optional(),
				lineIdentifier: zod.array(zod.string()).optional()
			})
		)
		.optional(),
	lineModeGroups: zod
		.array(
			zod.object({
				modeName: zod.string().optional(),
				lineIdentifier: zod.array(zod.string()).optional()
			})
		)
		.optional(),
	fullName: zod.string().optional(),
	naptanMode: zod.string().optional(),
	status: zod.boolean().optional(),
	individualStopId: zod.string().optional(),
	id: zod.string().optional(),
	url: zod.string().optional(),
	commonName: zod.string().optional(),
	distance: zod.number().optional(),
	placeType: zod.string().optional(),
	additionalProperties: zod
		.array(
			zod.object({
				category: zod.string().optional(),
				key: zod.string().optional(),
				sourceSystemKey: zod.string().optional(),
				value: zod.string().optional(),
				modified: zod.string().datetime().optional()
			})
		)
		.optional(),
	children: zod
		.array(
			zod.object({
				id: zod.string().optional(),
				url: zod.string().optional(),
				commonName: zod.string().optional(),
				distance: zod.number().optional(),
				placeType: zod.string().optional(),
				additionalProperties: zod
					.array(
						zod.object({
							category: zod.string().optional(),
							key: zod.string().optional(),
							sourceSystemKey: zod.string().optional(),
							value: zod.string().optional(),
							modified: zod.string().datetime().optional()
						})
					)
					.optional(),
				children: zod.array(zod.any()).optional(),
				childrenUrls: zod.array(zod.string()).optional(),
				lat: zod.number().optional(),
				lon: zod.number().optional()
			})
		)
		.optional(),
	childrenUrls: zod.array(zod.string()).optional(),
	lat: zod.number().optional(),
	lon: zod.number().optional()
});
export const stopPointGetByTypeWithPaginationResponse = zod.array(
	stopPointGetByTypeWithPaginationResponseItem
);

/**
 * @summary Gets the service types for a given stoppoint
 */
export const stopPointGetServiceTypesQueryParams = zod.object({
	id: zod.string(),
	lineIds: zod.array(zod.string()).optional(),
	modes: zod.array(zod.string()).optional()
});

export const stopPointGetServiceTypesResponseItem = zod.object({
	lineName: zod.string().optional(),
	lineSpecificServiceTypes: zod
		.array(
			zod.object({
				serviceType: zod
					.object({
						name: zod.string().optional(),
						uri: zod.string().optional()
					})
					.optional(),
				stopServesServiceType: zod.boolean().optional()
			})
		)
		.optional()
});
export const stopPointGetServiceTypesResponse = zod.array(stopPointGetServiceTypesResponseItem);

/**
 * @summary Gets the list of arrival predictions for the given stop point id
 */
export const stopPointArrivalsParams = zod.object({
	id: zod.string()
});

export const stopPointArrivalsResponseItem = zod.object({
	id: zod.string().optional(),
	operationType: zod.number().optional(),
	vehicleId: zod.string().optional(),
	naptanId: zod.string().optional(),
	stationName: zod.string().optional(),
	lineId: zod.string().optional(),
	lineName: zod.string().optional(),
	platformName: zod.string().optional(),
	direction: zod.string().optional(),
	bearing: zod.string().optional(),
	tripId: zod.string().optional(),
	baseVersion: zod.string().optional(),
	destinationNaptanId: zod.string().optional(),
	destinationName: zod.string().optional(),
	timestamp: zod.string().datetime().optional(),
	timeToStation: zod.number().optional(),
	currentLocation: zod.string().optional(),
	towards: zod.string().optional(),
	expectedArrival: zod.string().datetime().optional(),
	timeToLive: zod.string().datetime().optional(),
	modeName: zod.string().optional(),
	timing: zod
		.object({
			countdownServerAdjustment: zod.string().optional(),
			source: zod.string().datetime().optional(),
			insert: zod.string().datetime().optional(),
			read: zod.string().datetime().optional(),
			sent: zod.string().datetime().optional(),
			received: zod.string().datetime().optional()
		})
		.optional()
});
export const stopPointArrivalsResponse = zod.array(stopPointArrivalsResponseItem);

/**
 * @summary Gets the list of arrival and departure predictions for the given stop point id (overground, Elizabeth line and thameslink only)
 */
export const stopPointArrivalDeparturesParams = zod.object({
	id: zod.string()
});

export const stopPointArrivalDeparturesQueryParams = zod.object({
	lineIds: zod.array(zod.string())
});

export const stopPointArrivalDeparturesResponseItem = zod.object({
	platformName: zod.string().optional(),
	destinationNaptanId: zod.string().optional(),
	destinationName: zod.string().optional(),
	naptanId: zod.string().optional(),
	stationName: zod.string().optional(),
	estimatedTimeOfArrival: zod.string().datetime().optional(),
	scheduledTimeOfArrival: zod.string().datetime().optional(),
	estimatedTimeOfDeparture: zod.string().datetime().optional(),
	scheduledTimeOfDeparture: zod.string().datetime().optional(),
	minutesAndSecondsToArrival: zod.string().optional(),
	minutesAndSecondsToDeparture: zod.string().optional(),
	cause: zod.string().optional(),
	departureStatus: zod.enum(['OnTime', 'Delayed', 'Cancelled', 'NotStoppingAtStation']).optional(),
	timing: zod
		.object({
			countdownServerAdjustment: zod.string().optional(),
			source: zod.string().datetime().optional(),
			insert: zod.string().datetime().optional(),
			read: zod.string().datetime().optional(),
			sent: zod.string().datetime().optional(),
			received: zod.string().datetime().optional()
		})
		.optional()
});
export const stopPointArrivalDeparturesResponse = zod.array(stopPointArrivalDeparturesResponseItem);

/**
 * @summary Gets Stopoints that are reachable from a station/line combination.
 */
export const stopPointReachableFromParams = zod.object({
	id: zod.string(),
	lineId: zod.string()
});

export const stopPointReachableFromQueryParams = zod.object({
	serviceTypes: zod.array(zod.enum(['Regular', 'Night'])).optional()
});

export const stopPointReachableFromResponseItem = zod.object({
	naptanId: zod.string().optional(),
	platformName: zod.string().optional(),
	indicator: zod.string().optional(),
	stopLetter: zod.string().optional(),
	modes: zod.array(zod.string()).optional(),
	icsCode: zod.string().optional(),
	smsCode: zod.string().optional(),
	stopType: zod.string().optional(),
	stationNaptan: zod.string().optional(),
	accessibilitySummary: zod.string().optional(),
	hubNaptanCode: zod.string().optional(),
	lines: zod
		.array(
			zod.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
				uri: zod.string().optional(),
				fullName: zod.string().optional(),
				type: zod.string().optional(),
				crowding: zod
					.object({
						passengerFlows: zod
							.array(
								zod.object({
									timeSlice: zod.string().optional(),
									value: zod.number().optional()
								})
							)
							.optional(),
						trainLoadings: zod
							.array(
								zod.object({
									line: zod.string().optional(),
									lineDirection: zod.string().optional(),
									platformDirection: zod.string().optional(),
									direction: zod.string().optional(),
									naptanTo: zod.string().optional(),
									timeSlice: zod.string().optional(),
									value: zod.number().optional()
								})
							)
							.optional()
					})
					.optional(),
				routeType: zod
					.enum([
						'Unknown',
						'All',
						'Cycle Superhighways',
						'Quietways',
						'Cycleways',
						'Mini-Hollands',
						'Central London Grid',
						'Streetspace Route'
					])
					.optional(),
				status: zod
					.enum([
						'Unknown',
						'All',
						'Open',
						'In Progress',
						'Planned',
						'Planned - Subject to feasibility and consultation.',
						'Not Open'
					])
					.optional(),
				motType: zod.string().optional(),
				network: zod.string().optional()
			})
		)
		.optional(),
	lineGroup: zod
		.array(
			zod.object({
				naptanIdReference: zod.string().optional(),
				stationAtcoCode: zod.string().optional(),
				lineIdentifier: zod.array(zod.string()).optional()
			})
		)
		.optional(),
	lineModeGroups: zod
		.array(
			zod.object({
				modeName: zod.string().optional(),
				lineIdentifier: zod.array(zod.string()).optional()
			})
		)
		.optional(),
	fullName: zod.string().optional(),
	naptanMode: zod.string().optional(),
	status: zod.boolean().optional(),
	individualStopId: zod.string().optional(),
	id: zod.string().optional(),
	url: zod.string().optional(),
	commonName: zod.string().optional(),
	distance: zod.number().optional(),
	placeType: zod.string().optional(),
	additionalProperties: zod
		.array(
			zod.object({
				category: zod.string().optional(),
				key: zod.string().optional(),
				sourceSystemKey: zod.string().optional(),
				value: zod.string().optional(),
				modified: zod.string().datetime().optional()
			})
		)
		.optional(),
	children: zod
		.array(
			zod.object({
				id: zod.string().optional(),
				url: zod.string().optional(),
				commonName: zod.string().optional(),
				distance: zod.number().optional(),
				placeType: zod.string().optional(),
				additionalProperties: zod
					.array(
						zod.object({
							category: zod.string().optional(),
							key: zod.string().optional(),
							sourceSystemKey: zod.string().optional(),
							value: zod.string().optional(),
							modified: zod.string().datetime().optional()
						})
					)
					.optional(),
				children: zod.array(zod.any()).optional(),
				childrenUrls: zod.array(zod.string()).optional(),
				lat: zod.number().optional(),
				lon: zod.number().optional()
			})
		)
		.optional(),
	childrenUrls: zod.array(zod.string()).optional(),
	lat: zod.number().optional(),
	lon: zod.number().optional()
});
export const stopPointReachableFromResponse = zod.array(stopPointReachableFromResponseItem);

/**
 * @summary Returns the route sections for all the lines that service the given stop point ids
 */
export const stopPointRouteParams = zod.object({
	id: zod.string()
});

export const stopPointRouteQueryParams = zod.object({
	serviceTypes: zod.array(zod.enum(['Regular', 'Night'])).optional()
});

export const stopPointRouteResponseItem = zod.object({
	naptanId: zod.string().optional(),
	lineId: zod.string().optional(),
	mode: zod.string().optional(),
	validFrom: zod.string().datetime().optional(),
	validTo: zod.string().datetime().optional(),
	direction: zod.string().optional(),
	routeSectionName: zod.string().optional(),
	lineString: zod.string().optional(),
	isActive: zod.boolean().optional(),
	serviceType: zod.string().optional(),
	vehicleDestinationText: zod.string().optional(),
	destinationName: zod.string().optional()
});
export const stopPointRouteResponse = zod.array(stopPointRouteResponseItem);

/**
 * @summary Gets a distinct list of disrupted stop points for the given modes
 */
export const stopPointDisruptionByModeParams = zod.object({
	modes: zod.array(zod.string())
});

export const stopPointDisruptionByModeQueryParams = zod.object({
	includeRouteBlockedStops: zod.boolean().optional()
});

export const stopPointDisruptionByModeResponseItem = zod.object({
	atcoCode: zod.string().optional(),
	fromDate: zod.string().datetime().optional(),
	toDate: zod.string().datetime().optional(),
	description: zod.string().optional(),
	commonName: zod.string().optional(),
	type: zod.string().optional(),
	mode: zod.string().optional(),
	stationAtcoCode: zod.string().optional(),
	appearance: zod.string().optional(),
	additionalInformation: zod.string().optional()
});
export const stopPointDisruptionByModeResponse = zod.array(stopPointDisruptionByModeResponseItem);

/**
 * @summary Gets all disruptions for the specified StopPointId, plus disruptions for any child Naptan records it may have.
 */
export const stopPointDisruptionParams = zod.object({
	ids: zod.array(zod.string())
});

export const stopPointDisruptionQueryParams = zod.object({
	getFamily: zod.boolean().optional(),
	includeRouteBlockedStops: zod.boolean().optional(),
	flattenResponse: zod.boolean().optional()
});

export const stopPointDisruptionResponseItem = zod.object({
	atcoCode: zod.string().optional(),
	fromDate: zod.string().datetime().optional(),
	toDate: zod.string().datetime().optional(),
	description: zod.string().optional(),
	commonName: zod.string().optional(),
	type: zod.string().optional(),
	mode: zod.string().optional(),
	stationAtcoCode: zod.string().optional(),
	appearance: zod.string().optional(),
	additionalInformation: zod.string().optional()
});
export const stopPointDisruptionResponse = zod.array(stopPointDisruptionResponseItem);

/**
 * @summary Returns the canonical direction, "inbound" or "outbound", for a given pair of stop point Ids in the direction from -&gt; to.
 */
export const stopPointDirectionParams = zod.object({
	id: zod.string(),
	toStopPointId: zod.string()
});

export const stopPointDirectionQueryParams = zod.object({
	lineId: zod.string().optional()
});

export const stopPointDirectionResponse = zod.string();

/**
 * @summary Gets a list of StopPoints within {radius} by the specified criteria
 */
export const stopPointGetByGeoPointQueryParams = zod.object({
	stopTypes: zod.array(zod.string()),
	radius: zod.number().optional(),
	useStopPointHierarchy: zod.boolean().optional(),
	modes: zod.array(zod.string()).optional(),
	categories: zod.array(zod.string()).optional(),
	returnLines: zod.boolean().optional(),
	'location.lat': zod.number(),
	'location.lon': zod.number()
});

export const stopPointGetByGeoPointResponse = zod.object({
	centrePoint: zod.array(zod.number()).optional(),
	stopPoints: zod
		.array(
			zod.object({
				naptanId: zod.string().optional(),
				platformName: zod.string().optional(),
				indicator: zod.string().optional(),
				stopLetter: zod.string().optional(),
				modes: zod.array(zod.string()).optional(),
				icsCode: zod.string().optional(),
				smsCode: zod.string().optional(),
				stopType: zod.string().optional(),
				stationNaptan: zod.string().optional(),
				accessibilitySummary: zod.string().optional(),
				hubNaptanCode: zod.string().optional(),
				lines: zod
					.array(
						zod.object({
							id: zod.string().optional(),
							name: zod.string().optional(),
							uri: zod.string().optional(),
							fullName: zod.string().optional(),
							type: zod.string().optional(),
							crowding: zod
								.object({
									passengerFlows: zod
										.array(
											zod.object({
												timeSlice: zod.string().optional(),
												value: zod.number().optional()
											})
										)
										.optional(),
									trainLoadings: zod
										.array(
											zod.object({
												line: zod.string().optional(),
												lineDirection: zod.string().optional(),
												platformDirection: zod.string().optional(),
												direction: zod.string().optional(),
												naptanTo: zod.string().optional(),
												timeSlice: zod.string().optional(),
												value: zod.number().optional()
											})
										)
										.optional()
								})
								.optional(),
							routeType: zod
								.enum([
									'Unknown',
									'All',
									'Cycle Superhighways',
									'Quietways',
									'Cycleways',
									'Mini-Hollands',
									'Central London Grid',
									'Streetspace Route'
								])
								.optional(),
							status: zod
								.enum([
									'Unknown',
									'All',
									'Open',
									'In Progress',
									'Planned',
									'Planned - Subject to feasibility and consultation.',
									'Not Open'
								])
								.optional(),
							motType: zod.string().optional(),
							network: zod.string().optional()
						})
					)
					.optional(),
				lineGroup: zod
					.array(
						zod.object({
							naptanIdReference: zod.string().optional(),
							stationAtcoCode: zod.string().optional(),
							lineIdentifier: zod.array(zod.string()).optional()
						})
					)
					.optional(),
				lineModeGroups: zod
					.array(
						zod.object({
							modeName: zod.string().optional(),
							lineIdentifier: zod.array(zod.string()).optional()
						})
					)
					.optional(),
				fullName: zod.string().optional(),
				naptanMode: zod.string().optional(),
				status: zod.boolean().optional(),
				individualStopId: zod.string().optional(),
				id: zod.string().optional(),
				url: zod.string().optional(),
				commonName: zod.string().optional(),
				distance: zod.number().optional(),
				placeType: zod.string().optional(),
				additionalProperties: zod
					.array(
						zod.object({
							category: zod.string().optional(),
							key: zod.string().optional(),
							sourceSystemKey: zod.string().optional(),
							value: zod.string().optional(),
							modified: zod.string().datetime().optional()
						})
					)
					.optional(),
				children: zod
					.array(
						zod.object({
							id: zod.string().optional(),
							url: zod.string().optional(),
							commonName: zod.string().optional(),
							distance: zod.number().optional(),
							placeType: zod.string().optional(),
							additionalProperties: zod
								.array(
									zod.object({
										category: zod.string().optional(),
										key: zod.string().optional(),
										sourceSystemKey: zod.string().optional(),
										value: zod.string().optional(),
										modified: zod.string().datetime().optional()
									})
								)
								.optional(),
							children: zod.array(zod.any()).optional(),
							childrenUrls: zod.array(zod.string()).optional(),
							lat: zod.number().optional(),
							lon: zod.number().optional()
						})
					)
					.optional(),
				childrenUrls: zod.array(zod.string()).optional(),
				lat: zod.number().optional(),
				lon: zod.number().optional()
			})
		)
		.optional(),
	pageSize: zod.number().optional(),
	total: zod.number().optional(),
	page: zod.number().optional()
});

/**
 * @summary Gets a list of StopPoints filtered by the modes available at that StopPoint.
 */
export const stopPointGetByModeParams = zod.object({
	modes: zod.array(zod.string())
});

export const stopPointGetByModeQueryParams = zod.object({
	page: zod.number().optional()
});

export const stopPointGetByModeResponse = zod.object({
	centrePoint: zod.array(zod.number()).optional(),
	stopPoints: zod
		.array(
			zod.object({
				naptanId: zod.string().optional(),
				platformName: zod.string().optional(),
				indicator: zod.string().optional(),
				stopLetter: zod.string().optional(),
				modes: zod.array(zod.string()).optional(),
				icsCode: zod.string().optional(),
				smsCode: zod.string().optional(),
				stopType: zod.string().optional(),
				stationNaptan: zod.string().optional(),
				accessibilitySummary: zod.string().optional(),
				hubNaptanCode: zod.string().optional(),
				lines: zod
					.array(
						zod.object({
							id: zod.string().optional(),
							name: zod.string().optional(),
							uri: zod.string().optional(),
							fullName: zod.string().optional(),
							type: zod.string().optional(),
							crowding: zod
								.object({
									passengerFlows: zod
										.array(
											zod.object({
												timeSlice: zod.string().optional(),
												value: zod.number().optional()
											})
										)
										.optional(),
									trainLoadings: zod
										.array(
											zod.object({
												line: zod.string().optional(),
												lineDirection: zod.string().optional(),
												platformDirection: zod.string().optional(),
												direction: zod.string().optional(),
												naptanTo: zod.string().optional(),
												timeSlice: zod.string().optional(),
												value: zod.number().optional()
											})
										)
										.optional()
								})
								.optional(),
							routeType: zod
								.enum([
									'Unknown',
									'All',
									'Cycle Superhighways',
									'Quietways',
									'Cycleways',
									'Mini-Hollands',
									'Central London Grid',
									'Streetspace Route'
								])
								.optional(),
							status: zod
								.enum([
									'Unknown',
									'All',
									'Open',
									'In Progress',
									'Planned',
									'Planned - Subject to feasibility and consultation.',
									'Not Open'
								])
								.optional(),
							motType: zod.string().optional(),
							network: zod.string().optional()
						})
					)
					.optional(),
				lineGroup: zod
					.array(
						zod.object({
							naptanIdReference: zod.string().optional(),
							stationAtcoCode: zod.string().optional(),
							lineIdentifier: zod.array(zod.string()).optional()
						})
					)
					.optional(),
				lineModeGroups: zod
					.array(
						zod.object({
							modeName: zod.string().optional(),
							lineIdentifier: zod.array(zod.string()).optional()
						})
					)
					.optional(),
				fullName: zod.string().optional(),
				naptanMode: zod.string().optional(),
				status: zod.boolean().optional(),
				individualStopId: zod.string().optional(),
				id: zod.string().optional(),
				url: zod.string().optional(),
				commonName: zod.string().optional(),
				distance: zod.number().optional(),
				placeType: zod.string().optional(),
				additionalProperties: zod
					.array(
						zod.object({
							category: zod.string().optional(),
							key: zod.string().optional(),
							sourceSystemKey: zod.string().optional(),
							value: zod.string().optional(),
							modified: zod.string().datetime().optional()
						})
					)
					.optional(),
				children: zod
					.array(
						zod.object({
							id: zod.string().optional(),
							url: zod.string().optional(),
							commonName: zod.string().optional(),
							distance: zod.number().optional(),
							placeType: zod.string().optional(),
							additionalProperties: zod
								.array(
									zod.object({
										category: zod.string().optional(),
										key: zod.string().optional(),
										sourceSystemKey: zod.string().optional(),
										value: zod.string().optional(),
										modified: zod.string().datetime().optional()
									})
								)
								.optional(),
							children: zod.array(zod.any()).optional(),
							childrenUrls: zod.array(zod.string()).optional(),
							lat: zod.number().optional(),
							lon: zod.number().optional()
						})
					)
					.optional(),
				childrenUrls: zod.array(zod.string()).optional(),
				lat: zod.number().optional(),
				lon: zod.number().optional()
			})
		)
		.optional(),
	pageSize: zod.number().optional(),
	total: zod.number().optional(),
	page: zod.number().optional()
});

/**
 * @summary Search StopPoints by their common name, or their 5-digit Countdown Bus Stop Code.
 */
export const stopPointSearchByPathParams = zod.object({
	query: zod.string()
});

export const stopPointSearchByPathQueryParams = zod.object({
	modes: zod.array(zod.string()).optional(),
	faresOnly: zod.boolean().optional(),
	maxResults: zod.number().optional(),
	lines: zod.array(zod.string()).optional(),
	includeHubs: zod.boolean().optional(),
	tflOperatedNationalRailStationsOnly: zod.boolean().optional()
});

export const stopPointSearchByPathResponse = zod.object({
	query: zod.string().optional(),
	from: zod.number().optional(),
	page: zod.number().optional(),
	pageSize: zod.number().optional(),
	provider: zod.string().optional(),
	total: zod.number().optional(),
	matches: zod
		.array(
			zod.object({
				id: zod.string().optional(),
				url: zod.string().optional(),
				name: zod.string().optional(),
				lat: zod.number().optional(),
				lon: zod.number().optional()
			})
		)
		.optional(),
	maxScore: zod.number().optional()
});

/**
 * @summary Search StopPoints by their common name, or their 5-digit Countdown Bus Stop Code.
 */
export const stopPointSearchByQueryQueryParams = zod.object({
	query: zod.string(),
	modes: zod.array(zod.string()).optional(),
	faresOnly: zod.boolean().optional(),
	maxResults: zod.number().optional(),
	lines: zod.array(zod.string()).optional(),
	includeHubs: zod.boolean().optional(),
	tflOperatedNationalRailStationsOnly: zod.boolean().optional()
});

export const stopPointSearchByQueryResponse = zod.object({
	query: zod.string().optional(),
	from: zod.number().optional(),
	page: zod.number().optional(),
	pageSize: zod.number().optional(),
	provider: zod.string().optional(),
	total: zod.number().optional(),
	matches: zod
		.array(
			zod.object({
				id: zod.string().optional(),
				url: zod.string().optional(),
				name: zod.string().optional(),
				lat: zod.number().optional(),
				lon: zod.number().optional()
			})
		)
		.optional(),
	maxScore: zod.number().optional()
});

/**
 * @summary Gets a StopPoint for a given sms code.
 */
export const stopPointGetBySmsParams = zod.object({
	id: zod.string()
});

export const stopPointGetBySmsQueryParams = zod.object({
	output: zod.string().optional()
});

export const stopPointGetBySmsResponse = zod.object({});

/**
 * @summary Gets a list of taxi ranks corresponding to the given stop point id.
 */
export const stopPointGetTaxiRanksByIdsParams = zod.object({
	stopPointId: zod.string()
});

export const stopPointGetTaxiRanksByIdsResponseItem = zod.object({
	id: zod.string().optional(),
	url: zod.string().optional(),
	commonName: zod.string().optional(),
	distance: zod.number().optional(),
	placeType: zod.string().optional(),
	additionalProperties: zod
		.array(
			zod.object({
				category: zod.string().optional(),
				key: zod.string().optional(),
				sourceSystemKey: zod.string().optional(),
				value: zod.string().optional(),
				modified: zod.string().datetime().optional()
			})
		)
		.optional(),
	children: zod.array(zod.any()).optional(),
	childrenUrls: zod.array(zod.string()).optional(),
	lat: zod.number().optional(),
	lon: zod.number().optional()
});
export const stopPointGetTaxiRanksByIdsResponse = zod.array(stopPointGetTaxiRanksByIdsResponseItem);

/**
 * @summary Get car parks corresponding to the given stop point id.
 */
export const stopPointGetCarParksByIdParams = zod.object({
	stopPointId: zod.string()
});

export const stopPointGetCarParksByIdResponseItem = zod.object({
	id: zod.string().optional(),
	url: zod.string().optional(),
	commonName: zod.string().optional(),
	distance: zod.number().optional(),
	placeType: zod.string().optional(),
	additionalProperties: zod
		.array(
			zod.object({
				category: zod.string().optional(),
				key: zod.string().optional(),
				sourceSystemKey: zod.string().optional(),
				value: zod.string().optional(),
				modified: zod.string().datetime().optional()
			})
		)
		.optional(),
	children: zod.array(zod.any()).optional(),
	childrenUrls: zod.array(zod.string()).optional(),
	lat: zod.number().optional(),
	lon: zod.number().optional()
});
export const stopPointGetCarParksByIdResponse = zod.array(stopPointGetCarParksByIdResponseItem);

/**
 * @summary Gets the TravelTime overlay.
 */
export const travelTimeGetOverlayParams = zod.object({
	z: zod.number(),
	pinLat: zod.number(),
	pinLon: zod.number(),
	mapCenterLat: zod.number(),
	mapCenterLon: zod.number(),
	width: zod.number(),
	height: zod.number()
});

export const travelTimeGetOverlayQueryParams = zod.object({
	scenarioTitle: zod.string(),
	timeOfDayId: zod.string(),
	modeId: zod.string(),
	direction: zod.enum(['Average', 'From', 'To']),
	travelTimeInterval: zod.number()
});

export const travelTimeGetOverlayResponse = zod.object({});

/**
 * @summary Gets the TravelTime overlay.
 */
export const travelTimeGetCompareOverlayParams = zod.object({
	z: zod.number(),
	pinLat: zod.number(),
	pinLon: zod.number(),
	mapCenterLat: zod.number(),
	mapCenterLon: zod.number(),
	width: zod.number(),
	height: zod.number()
});

export const travelTimeGetCompareOverlayQueryParams = zod.object({
	scenarioTitle: zod.string(),
	timeOfDayId: zod.string(),
	modeId: zod.string(),
	direction: zod.enum(['Average', 'From', 'To']),
	travelTimeInterval: zod.number(),
	compareType: zod.string(),
	compareValue: zod.string()
});

export const travelTimeGetCompareOverlayResponse = zod.object({});

/**
 * @summary Gets the predictions for a given list of vehicle Id's.
 */
export const vehicleGetParams = zod.object({
	ids: zod.array(zod.string())
});

export const vehicleGetResponseItem = zod.object({
	id: zod.string().optional(),
	operationType: zod.number().optional(),
	vehicleId: zod.string().optional(),
	naptanId: zod.string().optional(),
	stationName: zod.string().optional(),
	lineId: zod.string().optional(),
	lineName: zod.string().optional(),
	platformName: zod.string().optional(),
	direction: zod.string().optional(),
	bearing: zod.string().optional(),
	tripId: zod.string().optional(),
	baseVersion: zod.string().optional(),
	destinationNaptanId: zod.string().optional(),
	destinationName: zod.string().optional(),
	timestamp: zod.string().datetime().optional(),
	timeToStation: zod.number().optional(),
	currentLocation: zod.string().optional(),
	towards: zod.string().optional(),
	expectedArrival: zod.string().datetime().optional(),
	timeToLive: zod.string().datetime().optional(),
	modeName: zod.string().optional(),
	timing: zod
		.object({
			countdownServerAdjustment: zod.string().optional(),
			source: zod.string().datetime().optional(),
			insert: zod.string().datetime().optional(),
			read: zod.string().datetime().optional(),
			sent: zod.string().datetime().optional(),
			received: zod.string().datetime().optional()
		})
		.optional()
});
export const vehicleGetResponse = zod.array(vehicleGetResponseItem);
